; Stack-based integer math and I/O
;
; Doesn't make outside calls or gotos, so PAGESEL is not used.
;
; Does not lock out interrupts at any point.
;

 
;Storage Allocation

;Stacks 
ukrnl2 UDATA
stack res HLOE_STACK_SIZE
 
ukrnl3 UDATA 
alt_stack res HLOE_STACK2_SIZE
 
;Statics 
; Like the stacks, many of these can be used by other HLOE libraries... 
ukernl udata 

;"BLSS" interrupt-safe variables... these can be used
; by ANY functions that do not call other BLSS consumer
; functions. These must be used in ISR-safe ways, though,
; e.g. from an HLTHUNK/HLEND block in a .HLOE file
hllblss00 res 1 	  
#ifdef HLLMULTITASK
#ifdef HLLGUARDhllblss
hllblss00isr res 1      
#endif
#endif

hllblss01 res 1    
#ifdef HLLMULTITASK
#ifdef HLLGUARDhllblss
hllblss01isr res 1      
#endif
#endif

hllblss02 res 1    
#ifdef HLLMULTITASK
#ifdef HLLGUARDhllblss
hllblss02isr res 1      
#endif
#endif
  
ukrshr udata_shr

;Three "software stack"  statics in the shared (fast)  page
softstack0 res 1		
#ifdef HLLMULTITASK
softstack0isr res 1
#endif

softstack1 res 1		
#ifdef HLLMULTITASK
softstack1isr res 1
#endif

softstack2 res 1		
#ifdef HLLMULTITASK
softstack2isr res 1
#endif

alt_fsr res 1
W_Save res 1 ; Used to save context for interrupts
STATUS_Save res 1
FSR_Save res 1
ALT_Save res 1
in_isr res 1

hllkrna00 CODE

 
HLTHUNK hllblss,mul,mterm
 POP
 banksel mterm 
 movwf mterm
 clrw 
 addwf HLINDF,w 
 decf mterm,f 
 btfss STATUS,Z 
 goto $-3
 movwf HLINDF
 return
HLEND

hllkrna01 CODE

add: 
 POP
 addwf HLINDF,w
 decf HLFSR,f 
 PUSH
 return
 
hllkrna02 CODE 

negti:  ;Two's Comp. Negation
 comf HLINDF,f
 incf HLINDF,f
 return
 
hllkrna03 CODE 
 
printch:
 POP
#ifdef HLLMULTITASK 
 ;Flush buffer
 banksel PIR1
 btfss PIR1,TXIF  
 goto $-1 
#endif 
 ;Transmit 
 banksel TXREG
 movwf TXREG  
 ;Flush buffer... 2x allows cleaner preemption 
 banksel PIR1
 btfss PIR1,TXIF  
 goto $-1  
 return  

; TODO - Shift-based mul/div/mod functions.
;  Basically have this already, inside SFP.

hllkrna04 CODE
 
HLTHUNK hllblss,modu,mquot,mdiv,mterm
 banksel mquot 
 clrf mquot
 POP
 movwf mdiv
 POP
 movwf mterm
 movfw mdiv
 subwf mterm,f
 btfss STATUS,C 
 goto $+3
 incf mquot,f 
 goto $-4
 addwf mterm,w
 PUSH
 return 
HLEND 

hllkrna05 CODE

HLTHUNK hllblss,divu,mquot,mdiv,mterm
 banksel mquot 
 clrf mquot
 POP
 movwf mdiv
 POP
 movwf mterm
 movfw mdiv
 subwf mterm,f
 btfss STATUS,C 
 goto $+3
 incf mquot,f 
 goto $-4
 movfw mquot
 PUSH
 return 
HLEND

hllkrna06 CODE

 ; ISR-safe but blocking... this combination allows
 ; the ISR to do something else while input
 ; is awaited in an interruptable main loop.
getch:
 banksel RCSTA
 btfss RCSTA,OERR
 goto geth2
 bcf RCSTA,CREN
 bsf RCSTA,CREN
geth2:
 btfss RCSTA,FERR
 goto geth4
 bcf RCSTA,SPEN
 bsf RCSTA,SPEN
geth4:
 banksel PIR1
geth3: 
 btfss PIR1,RCIF
 goto geth3
 banksel RCREG
 movf RCREG,w
 PUSH 
 return
 
hllkrna07 CODE 
 
eq: 
 POP 
 xorwf HLINDF,w
 movlw .1 
 btfss STATUS,Z
 movlw .0 
 decf HLFSR,f 
 PUSH 
 return
 
 
 

#define sstack0 softstack0 
#define sstack1 softstack1 
#define sstack2 softstack2 

hllparmcore macro 
 movwf sstack2
 movfw HLFSR ;save user stack ptr; it's ok to share these with the "kernel stack" 
           ; functions, because of the way that the kernel stack calls bracket the
		   ; body of parm (vs. being mingled within it).
 movwf sstack0
 movfw HLINDF
 ;Incorporate offset into working pointer 
 subwf sstack2,w
 movwf HLFSR 
 movfw HLINDF ;After this, retval is in W
 ;Save Retval in mkarg1
 movwf sstack1
 ;Fix HLFSR then push ret. val
 movfw sstack0
 movwf HLFSR ;restore user stack ptr...
 clrf sstack0
 movfw sstack1 ; Push parm's return value...
 movwf HLINDF
 ;Put base ptr back
 movfw sstack2
 pagesel kpush
 goto kpush ;Allow it to return as in tail recursion... no need for a macro or func call 
 endm

 
hllkrna08 CODE  
parm:
 KPOP ;base ptr in softstack2.. using macro so as not to add an extra level of call depth
 
#ifdef HLLMULTITASK 
 movf in_isr,f ;In shared RAM, no need for BANKSEL
 btfss STATUS,Z
 goto parm4
 hllparmcore
#undefine sstack0 
#undefine sstack1
#undefine sstack2 
#define sstack0 softstack0+1
#define sstack1 softstack1+1
#define sstack2 softstack2+1
parm4:
#endif 
 hllparmcore
#undefine sstack0 
#undefine sstack1
#undefine sstack2 
 
hllkrna09 CODE  
kpop: ;Pops from second stack to W; more complex than POP; must swap HLFSR ptr.
 KPOP
 return 
 
hllkrna10 CODE   
kpush: ;Push to second stack from W
 KPUSH
 return

hllkrna11 CODE   
dispose:
 DISCARD
 return 
 
 
