; Fast Divide
;
; Doesn't make outside calls or gotos, so PAGESEL is not used.  TODO - explore and discuss! also discuss: kernel small, doesn't require much ram. so repeated subtraction ok, esp for 8-bit
;
; Does not lock out interrupts at any point.   
;
GLOBAL fastmodu
 
;Storage Allocation
ufstdv034 udata 

fstmods00 res 1 	  
#ifdef HLLMULTITASK
#ifdef HLLGUARDfstmods
fstmods00isr res 1      
#endif
#endif

fstmods01 res 1    
#ifdef HLLMULTITASK
#ifdef HLLGUARDfstmods
fstmods01isr res 1      
#endif
#endif

fstmods02 res 1    
#ifdef HLLMULTITASK
#ifdef HLLGUARDfstmods
fstmods02isr res 1      
#endif
#endif
  
fstmods03 res 1    
#ifdef HLLMULTITASK
#ifdef HLLGUARDfstmods
fstmods03isr res 1      
#endif
#endif
    
fstmods04 res 1    
#ifdef HLLMULTITASK
#ifdef HLLGUARDfstmods
fstmods04isr res 1      
#endif
#endif
    
fstmods05 res 1    
#ifdef HLLMULTITASK
#ifdef HLLGUARDfstmods
fstmods05isr res 1      
#endif
#endif
    
fstmods CODE

; Based on "restoring division" algorithm as posted by one UCLA instructor.
;  (See http://www.seas.ucla.edu/~ingrid/ee213a/lectures/division_presentV2.pdf 
;  However, also see comments below; implementation evolved to reflect what was
;  available on the simplest CPUs targeted, e.g. the 16F690 family.)
HLTHUNK fstmods,fastmodu,aterm,bterm,pterm,keepp,countrr
 banksel countrr
 clrf countrr
 POP
 movwf bterm
 POP
 movwf aterm
 clrf pterm
mop55d:         ;FOR CONTRR=0 TO 7
 movfw countrr
 xorlw .8
 btfsc STATUS,Z
 goto m2xx4s
 movfw aterm
 andlw .128
 movwf keepp
 LSHIFT pterm
 LSHIFT aterm
 movfw keepp   
 btfsc STATUS,Z
 goto m119ec
 incf pterm,f
m119ec:
 movfw bterm
 subwf pterm,w
 btfss STATUS,C  ;C==1 implies w<=f i.e. bterm<=pterm if this is not true we need to branch so branch when !c
 goto m01cee
 movwf pterm  ;Use the subtraction to alter pterm unless carry occurred. While the implementation seen here
 movfw aterm  ; was based on pseudocode for a "restoring" division algorithm, we actually don't restore per se.
 iorlw .1     ; Rather, we just don't complete the -= operation on PTERM unless restoration would not have been
 movwf aterm  ; required.
m01cee: 
 incf countrr,f
 goto mop55d  ;END FOR
m2xx4s:
 movf pterm,w  ;Because of the way we're doing things (following a "restoring division" algorithm but implementing
 PUSH          ; it as a sort of "aborted -= operation" algorithm, we can always count on pterm to contain the
 return        ; remainder.
HLEND
