calls setbit,clearbit,copyf,gtf,utof,mulf /,iszerof
calls ftou,divf
calls addf,parm

/TODO this should really be pwm0on
d .pwm1on is
 / Longest period possible for max res.; use a capacitor if period is too long
 255 > pr2

 / PWM out pin off for now
 .setbit[trisb5 .setbit[trisb3 @trisb]] > trisb

 / Half-bridge PWM mode
 .clearbit[ p1m0 .setbit [p1m1 @ccp1con]] > ccp1con
 .clearbit[ccp1m0 .clearbit [ccp1m1 @ccp1con]] > ccp1con
 .setbit[ccp1m2 .setbit [ccp1m3 @ccp1con]] > ccp1con

 /Set dead band b/w PWM signal and its complement right in middle of range
 .setbit[6 @pwm1con] > pwm1con

 / Use timer 2
 .clearbit[c1tsel0 .clearbit[c1tsel1 @ccptmrs]] > ccptmrs
 .clearbit[tmr2if @pir1] > pir1

 / Minimum prescale value for timer allows for minimum period
 /  width without reducing resolution
 /Accept default .clearbit[t2ckps0 .clearbit[t2ckps1 @t2con]] > t2con

 / Timer on
 .setbit[tmr2on @t2con] > t2con

 / PWM bit is output
 .clearbit[trisb5 .clearbit[trisb3 @trisb]] > trisb
;

d .pwm2on is
 / Longest period possible for max res.; use a capacitor if period is too long
 255 > pr4
 
 / PWM2 = A7 P2B = A6
 .setbit[p2bsel .setbit[ccp2sel @apfcon0]] > apfcon0
 / PWM out pin off for now
 .setbit[trisa7.setbit[trisa6 @trisa]] > trisa

 / Half-bridge PWM mode
 .clearbit[ p2m0 .setbit [p2m1 @ccp2con]] > ccp2con
 .clearbit[ccp2m0 .clearbit [ccp2m1 @ccp2con]] > ccp2con
 .setbit[ccp2m2 .setbit [ccp2m3 @ccp2con]] > ccp2con

 /Set dead band b/w PWM signal and its complement right in middle of range
 .setbit[6 @pwm2con] > pwm2con

 /Timer 4
 .setbit[c2tsel0 .clearbit[c2tsel1 @ccptmrs]] > ccptmrs
 .clearbit[tmr4if @pir1] > pir1

 / Minimum prescale value for timer allows for minimum period
 /  width without reducing resolution
 /Accept defaults .clearbit[t4ckps0 .clearbit[t4ckps1 @t4con]] > t4con

 / Timer on
 .setbit[tmr4on @t4con] > t4con

 / PWM bit is output
  .clearbit[trisa6 .clearbit[trisa7 @trisa]] > trisa
;

d .pwmf 3 0 is /1st parm is channel 0=B3 and 1=A7

 /Make 8-bit high byte
/  if  .iszerof[parmf`1\],0,
   if  .gtf[1.0 parmf`1\],0,
   if  .gtf[parmf`1\ 1000.0],255, /Deal w/ SFP rounding err. 
      .ftou[ .divf[parmf`1\ 4.0]]
  ,,


 if .eq[.parm[0] 0],

 /Channel 0

     > ccpr1l
 
    .addf[parmf`1\ .mulf[-1.0 .mulf[4.0 .utof[@ccpr1l]]]]
 
    if .gtf[.copyf[] 2.5],
      .setbit[dc1b1 .setbit[dc1b0 @ccp1con]] > ccp1con
    ,

    if .gtf[.copyf[] 1.5],
     .setbit[dc1b1  @ccp1con] > ccp1con
     ,	  
         if .gtf[.copyf[] 0.5],
	  
   	  .setbit[dc1b0  @ccp1con] > ccp1con,
          .clearbit[dc1b1 .clearbit[dc1b0 @ccp1con]] > ccp1con,	  
     ,    
    ,,

 /Channel 1
 
    > ccpr2l
 
    .addf[parmf`1\ .mulf[-1.0 .mulf[4.0 .utof[@ccpr2l]]]]
 
    if .gtf[.copyf[] 2.5],
      .setbit[dc2b1 .setbit[dc2b0 @ccp2con]] > ccp2con
    ,

    if .gtf[.copyf[] 1.5],
     .setbit[dc2b1  @ccp2con] > ccp2con
     ,	  
         if .gtf[.copyf[] 0.5],
	  
   	  .setbit[dc2b0  @ccp2con] > ccp2con,
          .clearbit[dc2b1 .clearbit[dc2b0 @ccp2con]] > ccp2con ,
     ,    
    ,,
;
