MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 
                      00002 #include "hloe.inc"
                      00001 
                      00002 
                      00003 #define HLLGUARDhllblss
                      00004 
                      00005 
                      00006 #define HLOE_STACK_SIZE .80
                      00007 #define HLOE_STACK2_SIZE .20
                      00008 
                      00009 
                      00010 #include <p16f690.inc>
                      00001         LIST
                      00002 ; P16F690.INC  Standard Header File, Version 1.00    Microchip Technology, Inc.
                      00607         LIST
                      00011 #include "../frostcompiler/kernel.inc"
                      00001 PUSH macro ;Push to the main stack for the programmer's parms and dyn. data;
                      00002  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
                      00003  movwf INDF ; code of any sort will not overwrite the data. 
                      00004  endm 
                      00005  
                      00006 POP macro ;Pop from main stack; "decf" is the de-allocator and thus happens last to 
                      00007  movfw INDF ; preserve the safety of this code under interruptible conditions. 
                      00008  decf FSR,f 
                      00009  endm
                      00010  
                      00011 DISCARD macro ;Remove items from the main stack and throw them away w/o affecting W
                      00012  decf FSR,f 
                      00013  endm
                      00014  
                      00015 KDISCARD macro ;Remove items from stack 2 and throw them away w/o affecting W
                      00016  decf alt_fsr,f 
                      00017  endm
                      00018 
                      00019 COPY macro ;Duplicate stack top
                      00020  movfw INDF
                      00021  incf FSR,f 
                      00022  movwf INDF 
                      00023  endm
                      00024 
                      00025 #define HLFSR FSR
                      00026  
                      00027 #define HLINDF INDF
                      00028 
                      00029   
                      00030 FAR_CALL macro caller_os,func_os ;Call destination residing within a different code page
                      00031  pagesel func_os
                      00032  call func_os
                      00033  pagesel caller_os ;This one restores the caller's code page
                      00034  endm
                      00035 
                      00036 ;Call destination residing within a different code page... does not restore the caller's
                      00037 ; code page after return, which may be OK (e.g. if the next operation is another 'Far'
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00038 ; function call). 
                      00039 HALF_FAR_CALL macro func_os 
                      00040  pagesel func_os        
                      00041  call func_os
                      00042  endm
                      00043  
                      00044 KPOP macro
                      00045  bankisel alt_stack ;This is OK for interrupts... part of STATUS 
                      00046  movf in_isr,f ;In shared RAM, no need for BANKSEL
                      00047  btfsc STATUS,Z
                      00048  goto $+0F
                      00049  movfw FSR 
                      00050  movwf softstack0+1 ;Save user stack ptr 
                      00051  movfw alt_fsr ;Get second stack ptr 
                      00052  movwf FSR 
                      00053  movfw INDF ;Dereference it 
                      00054  decf FSR,f ;Decrement it 
                      00055  movwf softstack1+1  ;Save popped value for ret urn 
                      00056  movfw FSR ;Save second stack ptr 
                      00057  movwf alt_fsr 
                      00058  movfw softstack0+1  ;Restore user stack ptr 
                      00059  movwf FSR 
                      00060  clrf softstack0+1
                      00061  movfw softstack1+1  ;Bring back popped value for ret urn 
                      00062  goto $+0E
                      00063  movfw FSR 
                      00064  movwf softstack0 ;Save user stack ptr 
                      00065  movfw alt_fsr ;Get second stack ptr 
                      00066  movwf FSR 
                      00067  movfw INDF ;Dereference it 
                      00068  decf FSR,f ;Decrement it 
                      00069  movwf softstack1  ;Save popped value for ret urn 
                      00070  movfw FSR ;Save second stack ptr 
                      00071  movwf alt_fsr 
                      00072  movfw softstack0  ;Restore user stack ptr 
                      00073  movwf FSR 
                      00074  clrf softstack0
                      00075  movfw softstack1  ;Bring back popped value for ret urn 
                      00076  bankisel stack
                      00077  endm 
                      00078 
                      00079 KPUSH macro
                      00080  bankisel alt_stack ;This is OK for interrupts... part of STATUS 
                      00081  movf in_isr,f ;In shared RAM, no need for BANKSEL
                      00082  btfsc STATUS,Z
                      00083  goto $+0E
                      00084  movwf softstack1+1 ;softstack1 holds parm value being pushed
                      00085  movfw FSR  
                      00086  movwf softstack0+1  ;softstack0 holds FSR
                      00087  movfw alt_fsr 
                      00088  movwf FSR 
                      00089  movfw softstack1+1
                      00090  incf alt_fsr,f 
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00091  incf FSR,f ;The actual kernel push... preincrement for interrupt safety
                      00092  movwf INDF 
                      00093  movfw softstack0+1
                      00094  movwf FSR 
                      00095  clrf softstack0+1 
                      00096  goto $+0D
                      00097  movwf softstack1 ;softstack1 holds parm value being pushed
                      00098  movfw FSR  
                      00099  movwf softstack0  ;softstack0 holds FSR
                      00100  movfw alt_fsr 
                      00101  movwf FSR 
                      00102  movfw softstack1
                      00103  incf alt_fsr,f 
                      00104  incf FSR,f ;The actual kernel push... preincrement for interrupt safety
                      00105  movwf INDF 
                      00106  movfw softstack0
                      00107  movwf FSR 
                      00108  clrf softstack0
                      00109  bankisel stack
                      00110  endm
                      00111  
                      00112 ;These are simple shifts, similar to << or >> in C, not rotates. Newer PICs include
                      00113 ; a native shift instruction that shifts in zeroes like << and >>. Older devices 
                      00114 ; can only rotate bits through the C register, requiring an extra instruction to
                      00115 ; clear C in cases where a simple shift is needed.
                      00116 LSHIFT macro file_reg
                      00117  bcf STATUS,C    ;RLF is a bit shift operation that's present on both the 16F690 (for example) and the 1
                            6F1827.
                      00118  rlf file_reg,f  ; It's a rotate, pulling from C for the necessary bottom-order bit       
                      00119  endm 
                      00120 
                      00121 RSHIFT macro file_reg
                      00122  bcf STATUS,C    ;RRF is a bit shift operation that's present on both the 16F690 (for example) and the 1
                            6F1827.
                      00123  rrf file_reg,f  ; It's a rotate, pulling from C for the necessary bottom-order bit       
                      00124  endm 
                      00125  
                      00126 PREEMPT macro
                      00127 #ifdef HLLMULTITASK 
                      00128  movwf W_Save ; save context- save W in "W_save" file reg.
                      00129  ;From datasheet... save STATUS properly
                      00130  swapf STATUS,W 
                      00131  movwf STATUS_Save 
                      00132  movf FSR,w 
                      00133  movwf FSR_Save 
                      00134  movf PCLATH,w ; save status in "STATUS_Save" file reg.
                      00135  movwf PC_Save 
                      00136  movf alt_fsr,w 
                      00137  movwf ALT_Save
                      00138  incf in_isr,f
                      00139  pagesel ISR
                      00140  bankisel stack 
                      00141  movf FSR,w           ;Restore "softstack" if main thread was using 2nd stack
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00142  movf softstack0,f        ; (coded to preserve constant interrupt latency)
                      00143  btfss STATUS,Z       
                      00144  movf softstack0,w  
                      00145  movwf FSR          
                      00146 #endif 
                      00147  endm
                      00148  
                      00149 RESUME macro
                      00150  
                      00151 #ifdef HLLMULTITASK 
                      00152  clrf in_isr
                      00153  movf ALT_Save,w
                      00154  movwf alt_fsr 
                      00155  movf PC_Save,w ; restore context (W and STATUS)
                      00156  movwf PCLATH
                      00157  movf FSR_Save,w 
                      00158  movwf FSR
                      00159  ;Per the datasheet...
                      00160  swapf STATUS_Save,W
                      00161  movwf STATUS ;Move W into Status reg
                      00162  swapf W_Save,F ;Swap W_TEMP
                      00163  swapf W_Save,W ;Swap W_TEMP into W
                      00164 #endif
                      00165 
                      00166  endm
                      00167  
                      00168 ; Table macro.. this followed by any series of RETLW calls
                      00169 ; transforms said call list into a function that takes an offset
                      00170 ; and returns that entry in the table (takes 1 byte, returns 1
                      00171 ; byte... this goes atop the HLL feature which allows generation 
                      00172 ; of tables. It can also go atop RETLW tables entered into assembly 
                      00173 ; files in a very basic fashion when doing assembly programming. In 
                      00174 ; either case, the overall result can be called exactly as if it were any 
                      00175 ; other HLOE function
                      00176 HLTABLE macro mmnme
                      00177 mmnme:
                      00178  movlw high mmnme#v(2) ; Necess. b/c writes to PCL take 5 bits fr. PCLATH
                      00179  movwf PCLATH ; and PAGESEL doesn't take care of all 5
                      00180  movlw low mmnme#v(2) ; Perform pointer arithmetic
                      00181  addwf INDF,w 
                      00182  decf FSR,f
                      00183  btfsc STATUS,C ; Necess. b/c writes to PCL take 5 bits fr. PCLATH
                      00184  incf PCLATH,f 
                      00185  movwf PCL 
                      00186 mmnme#v(2): 
                      00187  ;retlw K, retlw K, etc. go here
                      00188  endm
                      00189  
                      00012 
                      00013 
                      00014 #define HLLMULTITASK
                      00003 
2007   33C4           00004  __config (_INTRC_OSC_NOCLKOUT & _WDT_OFF & _PWRTE_ON & _MCLRE_OFF & _CP_OFF & _BOR_ON & _IESO_OFF & _FC
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            MEN_OFF)
                      00005 
                      00006 
                      00007 hllv2cval UDATA
0000                  00008 hllcvall RES .1
                      00009 
                      00010 #define cval hllcvall
                      00011 
                      00012 
                      00013 
                      00014 Resetv code 0 
0000   138B           00015  bcf INTCON,GIE
0001   ????           00016  pagesel hloego
0002   2???           00017  goto hloego
                      00018  
                      00019 #ifdef HLLMULTITASK
                      00020 vectr code 4     ;Device specific
0004                  00021 ISR:
                      00022 
                      00023 
                      00024  PREEMPT
                          M #ifdef HLLMULTITASK 
0004   00??               M  movwf W_Save ; save context- save W in "W_save" file reg.
                          M  ;From datasheet... save STATUS properly
0005   0E03               M  swapf STATUS,W 
0006   00??               M  movwf STATUS_Save 
0007   0804               M  movf FSR,w 
0008   00??               M  movwf FSR_Save 
0009   080A               M  movf PCLATH,w ; save status in "STATUS_Save" file reg.
000A   00??               M  movwf PC_Save 
000B   08??               M  movf alt_fsr,w 
000C   00??               M  movwf ALT_Save
000D   0A??               M  incf in_isr,f
000E   ????               M  pagesel ISR
000F   ????               M  bankisel stack 
0010   0804               M  movf FSR,w           ;Restore "softstack" if main thread was using 2nd stack
0011   08??               M  movf softstack0,f        ; (coded to preserve constant interrupt latency)
0012   1D03               M  btfss STATUS,Z       
0013   08??               M  movf softstack0,w  
0014   0084               M  movwf FSR          
                          M #endif 
                      00025 #endif
0015   1283 1303      00026  banksel PIR1
0017   1C0C           00027  btfss PIR1,TMR1IF
0018   2???           00028  goto hllnotisr49       
0019   100C           00029  bcf PIR1,TMR1IF
                      00030 
                      00031 
001A   3001           00032  movlw .1 
                      00033 
                      00034    
                      00035  FAR_CALL ISR ,safepush
001B   ????               M  pagesel safepush
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001C   2???               M  call safepush
001D   ????               M  pagesel ISR       ;This one restores the caller's code page
                      00036 
                      00037 
001E   30FF           00038  movlw -.1
                      00039 
                      00040    
                      00041  FAR_CALL ISR ,safepush
001F   ????               M  pagesel safepush
0020   2???               M  call safepush
0021   ????               M  pagesel ISR       ;This one restores the caller's code page
                      00042 
0022   ???? ????      00043    banksel cval
0024   08??           00044    movfw cval
                      00045    
                      00046    
                      00047 
                      00048    
                      00049  HALF_FAR_CALL safepush
0025   ????               M  pagesel safepush       
0026   2???               M  call safepush
                      00050 
                      00051 
                      00052  
                      00053  HALF_FAR_CALL mul
0027   ????               M  pagesel mul            
0028   2???               M  call mul
                      00054 
                      00055 
                      00056  
                      00057  FAR_CALL ISR,add
0029   ????               M  pagesel add
002A   2???               M  call add
002B   ????               M  pagesel ISR       ;This one restores the caller's code page
                      00058 
                      00059  POP
002C   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
002D   0384               M  decf FSR,f 
002E   ???? ????      00060  banksel cval
0030   00??           00061  movwf cval
                      00062  
                      00063 
0031   ???? ????      00064    banksel cval
0033   08??           00065    movfw cval
                      00066    
                      00067    
                      00068 
                      00069    
                      00070  FAR_CALL ISR ,safepush
0034   ????               M  pagesel safepush
0035   2???               M  call safepush
0036   ????               M  pagesel ISR       ;This one restores the caller's code page
                      00071 
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00072  POP
0037   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0038   0384               M  decf FSR,f 
0039   1283 1303      00073  banksel PORTC
003B   0087           00074  movwf PORTC
                      00075  
                      00076 
                      00077 
003C                  00078 hllnotisr49:
                      00079 
                      00080 #ifdef HLLMULTITASK
003C                  00081 ExitISR:    
                      00082 
                      00083   RESUME
                          M  
                          M #ifdef HLLMULTITASK 
003C   01??               M  clrf in_isr
003D   08??               M  movf ALT_Save,w
003E   00??               M  movwf alt_fsr 
003F   08??               M  movf PC_Save,w ; restore context (W and STATUS)
0040   008A               M  movwf PCLATH
0041   08??               M  movf FSR_Save,w 
0042   0084               M  movwf FSR
                          M  ;Per the datasheet...
0043   0E??               M  swapf STATUS_Save,W
0044   0083               M  movwf STATUS ;Move W into Status reg
0045   0E??               M  swapf W_Save,F ;Swap W_TEMP
0046   0E??               M  swapf W_Save,W ;Swap W_TEMP into W
                          M #endif
                          M 
                      00084   
                      00085   
0047   0009           00086   retfie
                      00087 #endif
                      00088 
                      00089 mainvars udata_shr      
                      00090 #ifdef HLLMULTITASK
0000                  00091 pbase res .1                    ; Used for functions w/ numbered pass/return, to clean up parms/push arg
                            s
0001                  00092 pbaseisr res .1 
                      00093 #else
                      00094 pbase res .1
                      00095 #endif
                      00096 
0002                  00097 PC_Save res .1
                      00098 
                      00099 main code
0000                  00100 hloego:
                      00101 
                      00102  
0000   01??           00103   clrf in_isr
                      00104  
0001   30??           00105   movlw stack-1         ;Set up stack starting position based on literals det. by incremental linker
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0002   0084           00106   movwf FSR 
0003   30??           00107   movlw alt_stack-1
0004   00??           00108   movwf alt_fsr 
                      00109   
                      00110   
0005   01??           00111   clrf softstack0
                      00112  
0006   ????           00113  bankisel stack
0007   ????           00114  pagesel hlluserprog
0008   2???           00115  goto hlluserprog
                      00116 hllupuser CODE
0000                  00117 hlluserprog: 
                      00118  
                      00119 
0000   3000           00120  movlw .0 
                      00121 
                      00122    
                      00123  FAR_CALL hlluserprog ,safepush
0001   ????               M  pagesel safepush
0002   2???               M  call safepush
0003   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00124 
                      00125  POP
0004   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0005   0384               M  decf FSR,f 
0006   ???? ????      00126  banksel cval
0008   00??           00127  movwf cval
                      00128  
                      00129 
                      00130 
0009   3070           00131  movlw .112 
                      00132 
                      00133    
                      00134  FAR_CALL hlluserprog ,safepush
000A   ????               M  pagesel safepush
000B   2???               M  call safepush
000C   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00135 
                      00136  POP
000D   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
000E   0384               M  decf FSR,f 
000F   1683 1303      00137  banksel OSCCON
0011   008F           00138  movwf OSCCON
                      00139  
                      00140 
                      00141 
0012   3000           00142  movlw .0
                      00143 
                      00144    
                      00145  FAR_CALL hlluserprog ,safepush
0013   ????               M  pagesel safepush
0014   2???               M  call safepush
0015   ????               M  pagesel hlluserprog ;This one restores the caller's code page
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00146 
                      00147  POP
0016   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0017   0384               M  decf FSR,f 
0018   1683 1303      00148  banksel TRISC
001A   0087           00149  movwf TRISC
                      00150  
                      00151 
                      00152 
001B   3001           00153  movlw TMR1CS
                      00154 
                      00155 
                      00156    
                      00157  FAR_CALL hlluserprog ,safepush
001C   ????               M  pagesel safepush
001D   2???               M  call safepush
001E   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00158 
                      00159 
001F   3006           00160  movlw TMR1GE
                      00161 
                      00162 
                      00163    
                      00164  FAR_CALL hlluserprog ,safepush
0020   ????               M  pagesel safepush
0021   2???               M  call safepush
0022   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00165 
                      00166 
0023   3005           00167  movlw T1CKPS1
                      00168 
                      00169 
                      00170    
                      00171  FAR_CALL hlluserprog ,safepush
0024   ????               M  pagesel safepush
0025   2???               M  call safepush
0026   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00172 
                      00173 
0027   3004           00174  movlw T1CKPS0
                      00175 
                      00176 
                      00177    
                      00178  FAR_CALL hlluserprog ,safepush
0028   ????               M  pagesel safepush
0029   2???               M  call safepush
002A   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00179 
                      00180 
002B   3002           00181  movlw NOT_T1SYNC
                      00182 
                      00183 
                      00184    
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00185  FAR_CALL hlluserprog ,safepush
002C   ????               M  pagesel safepush
002D   2???               M  call safepush
002E   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00186 
                      00187 
002F   3003           00188  movlw T1OSCEN
                      00189 
                      00190 
                      00191    
                      00192  FAR_CALL hlluserprog ,safepush
0030   ????               M  pagesel safepush
0031   2???               M  call safepush
0032   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00193 
0033   1283 1303      00194    banksel T1CON
0035   0810           00195    movfw T1CON
                      00196    
                      00197    
                      00198 
                      00199    
                      00200  HALF_FAR_CALL safepush
0036   ????               M  pagesel safepush       
0037   2???               M  call safepush
                      00201 
                      00202 
                      00203  
                      00204  HALF_FAR_CALL clearbit
0038   ????               M  pagesel clearbit       
0039   2???               M  call clearbit
                      00205 
                      00206 
                      00207  
                      00208  HALF_FAR_CALL clearbit
003A   ????               M  pagesel clearbit       
003B   2???               M  call clearbit
                      00209 
                      00210 
                      00211  
                      00212  HALF_FAR_CALL setbit
003C   ????               M  pagesel setbit         
003D   2???               M  call setbit
                      00213 
                      00214 
                      00215  
                      00216  HALF_FAR_CALL setbit
003E   ????               M  pagesel setbit         
003F   2???               M  call setbit
                      00217 
                      00218 
                      00219  
                      00220  HALF_FAR_CALL clearbit
0040   ????               M  pagesel clearbit       
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0041   2???               M  call clearbit
                      00221 
                      00222 
                      00223  
                      00224  FAR_CALL hlluserprog,clearbit
0042   ????               M  pagesel clearbit
0043   2???               M  call clearbit
0044   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00225 
                      00226  POP
0045   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0046   0384               M  decf FSR,f 
0047   1283 1303      00227  banksel T1CON
0049   0090           00228  movwf T1CON
                      00229  
                      00230 
                      00231 
004A   3000           00232  movlw TMR1IE
                      00233 
                      00234 
                      00235    
                      00236  FAR_CALL hlluserprog ,safepush
004B   ????               M  pagesel safepush
004C   2???               M  call safepush
004D   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00237 
004E   1683 1303      00238    banksel PIE1
0050   080C           00239    movfw PIE1
                      00240    
                      00241    
                      00242 
                      00243    
                      00244  HALF_FAR_CALL safepush
0051   ????               M  pagesel safepush       
0052   2???               M  call safepush
                      00245 
                      00246 
                      00247  
                      00248  FAR_CALL hlluserprog,setbit
0053   ????               M  pagesel setbit
0054   2???               M  call setbit
0055   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00249 
                      00250  POP
0056   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0057   0384               M  decf FSR,f 
0058   1683 1303      00251  banksel PIE1
005A   008C           00252  movwf PIE1
                      00253  
                      00254 
                      00255 
005B   3006           00256  movlw PEIE
                      00257 
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00258 
                      00259    
                      00260  FAR_CALL hlluserprog ,safepush
005C   ????               M  pagesel safepush
005D   2???               M  call safepush
005E   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00261 
005F   1283 1303      00262    banksel INTCON
0061   080B           00263    movfw INTCON
                      00264    
                      00265    
                      00266 
                      00267    
                      00268  HALF_FAR_CALL safepush
0062   ????               M  pagesel safepush       
0063   2???               M  call safepush
                      00269 
                      00270 
                      00271  
                      00272  FAR_CALL hlluserprog,setbit
0064   ????               M  pagesel setbit
0065   2???               M  call setbit
0066   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00273 
                      00274  POP
0067   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0068   0384               M  decf FSR,f 
0069   1283 1303      00275  banksel INTCON
006B   008B           00276  movwf INTCON
                      00277  
                      00278 
                      00279 
006C   3000           00280  movlw TMR1ON
                      00281 
                      00282 
                      00283    
                      00284  FAR_CALL hlluserprog ,safepush
006D   ????               M  pagesel safepush
006E   2???               M  call safepush
006F   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00285 
0070   1283 1303      00286    banksel T1CON
0072   0810           00287    movfw T1CON
                      00288    
                      00289    
                      00290 
                      00291    
                      00292  HALF_FAR_CALL safepush
0073   ????               M  pagesel safepush       
0074   2???               M  call safepush
                      00293 
                      00294 
                      00295  
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00296  FAR_CALL hlluserprog,setbit
0075   ????               M  pagesel setbit
0076   2???               M  call setbit
0077   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00297 
                      00298  POP
0078   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0079   0384               M  decf FSR,f 
007A   1283 1303      00299  banksel T1CON
007C   0090           00300  movwf T1CON
                      00301  
                      00302 
                      00303 
007D   3007           00304  movlw GIE
                      00305 
                      00306 
                      00307    
                      00308  FAR_CALL hlluserprog ,safepush
007E   ????               M  pagesel safepush
007F   2???               M  call safepush
0080   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00309 
0081   1283 1303      00310    banksel INTCON
0083   080B           00311    movfw INTCON
                      00312    
                      00313    
                      00314 
                      00315    
                      00316  HALF_FAR_CALL safepush
0084   ????               M  pagesel safepush       
0085   2???               M  call safepush
                      00317 
                      00318 
                      00319  
                      00320  FAR_CALL hlluserprog,setbit
0086   ????               M  pagesel setbit
0087   2???               M  call setbit
0088   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00321 
                      00322  POP
0089   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
008A   0384               M  decf FSR,f 
008B   1283 1303      00323  banksel INTCON
008D   008B           00324  movwf INTCON
                      00325  
                      00326 
                      00327     
008E                  00328 hllprogend:
008E   2???           00329  goto hllprogend
                      00330  
008F                  00331 hllprgen2:
008F   2???           00332  goto hllprgen2
                      00333  
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00334 
                      00335 
                      00336 
                      00337 
                      00338 
                      00339  
                      00340 
                      00341 
                      00342 hlog1a CODE
                      00343 
                      00344 
                      00345 
                      00346 #define margp2 hllblss00
                      00347 
                      00348 
0000                  00349 clearbit:  
                      00350 #ifdef HLLMULTITASK
                      00351 #ifdef HLLGUARDhllblss 
0000   08??           00352  movf in_isr,f  
0001   1903           00353  btfsc STATUS,Z
                      00354  
                      00355 
                      00356 
0002   2???           00357  goto clearbit0
                      00358 
                      00359  POP
0003   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0004   0384               M  decf FSR,f 
0005   ???? ????      00360  banksel margp2
0007   00??           00361  movwf margp2
                      00362  POP 
0008   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0009   0384               M  decf FSR,f 
000A   3A00           00363  xorlw .0
000B   1D03           00364  btfss STATUS,Z
000C   2???           00365  goto tff00h
                      00366  
000D   08??           00367  movfw margp2
000E   39FE           00368  andlw .255-.1
000F   2???           00369  goto tff99h
0010                  00370 tff00h: 
                      00371  
0010   3A01           00372  xorlw .1
0011   1D03           00373  btfss STATUS,Z
0012   2???           00374  goto tff01h
                      00375  
0013   08??           00376  movfw margp2
0014   39FD           00377  andlw .255-.2
0015   2???           00378  goto tff99h
0016                  00379 tff01h: 
0016   3A01           00380  xorlw .1
0017   3A02           00381  xorlw .2
0018   1D03           00382  btfss STATUS,Z
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0019   2???           00383  goto tff02h
                      00384  
001A   08??           00385  movfw margp2
001B   39FB           00386  andlw .255-.4
001C   2???           00387  goto tff99h
001D                  00388 tff02h: 
001D   3A02           00389  xorlw .2
001E   3A03           00390  xorlw .3
001F   1D03           00391  btfss STATUS,Z
0020   2???           00392  goto tff03h
                      00393  
0021   08??           00394  movfw margp2
0022   39F7           00395  andlw .255-.8
0023   2???           00396  goto tff99h
0024                  00397 tff03h: 
0024   3A03           00398  xorlw .3
0025   3A04           00399  xorlw .4
0026   1D03           00400  btfss STATUS,Z
0027   2???           00401  goto tff04h
                      00402  
0028   08??           00403  movfw margp2
0029   39EF           00404  andlw .255-.16
002A   2???           00405  goto tff99h
002B                  00406 tff04h: 
002B   3A04           00407  xorlw .4
002C   3A05           00408  xorlw .5
002D   1D03           00409  btfss STATUS,Z
002E   2???           00410  goto tff05h
                      00411  
002F   08??           00412  movfw margp2
0030   39DF           00413  andlw .255-.32
0031   2???           00414  goto tff99h
0032                  00415 tff05h: 
0032   3A05           00416  xorlw .5
0033   3A06           00417  xorlw .6
0034   1D03           00418  btfss STATUS,Z
0035   2???           00419  goto tff07h
                      00420  
0036   08??           00421  movfw margp2
0037   39BF           00422  andlw .255-.64
0038   2???           00423  goto tff99h
0039                  00424 tff07h: 
                      00425  
0039   08??           00426  movfw margp2
003A   397F           00427  andlw .255-.128
003B                  00428 tff99h:  
                      00429  PUSH
003B   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
003C   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
003D   0008           00430  return
                      00431 
                      00432 
                      00433 
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00434 
                      00435 #undefine margp2
                      00436 
                      00437 
                      00438 #define margp2 hllblss00+1
                      00439 
                      00440 
003E                  00441 clearbit0:
                      00442 #endif
                      00443 #endif
                      00444 
                      00445  POP
003E   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
003F   0384               M  decf FSR,f 
0040   ???? ????      00446  banksel margp2
0042   00??           00447  movwf margp2
                      00448  POP 
0043   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0044   0384               M  decf FSR,f 
0045   3A00           00449  xorlw .0
0046   1D03           00450  btfss STATUS,Z
0047   2???           00451  goto hllAAAAA
                      00452  
0048   08??           00453  movfw margp2
0049   39FE           00454  andlw .255-.1
004A   2???           00455  goto hllHAAAA
004B                  00456 hllAAAAA: 
                      00457  
004B   3A01           00458  xorlw .1
004C   1D03           00459  btfss STATUS,Z
004D   2???           00460  goto hllBAAAA
                      00461  
004E   08??           00462  movfw margp2
004F   39FD           00463  andlw .255-.2
0050   2???           00464  goto hllHAAAA
0051                  00465 hllBAAAA: 
0051   3A01           00466  xorlw .1
0052   3A02           00467  xorlw .2
0053   1D03           00468  btfss STATUS,Z
0054   2???           00469  goto hllCAAAA
                      00470  
0055   08??           00471  movfw margp2
0056   39FB           00472  andlw .255-.4
0057   2???           00473  goto hllHAAAA
0058                  00474 hllCAAAA: 
0058   3A02           00475  xorlw .2
0059   3A03           00476  xorlw .3
005A   1D03           00477  btfss STATUS,Z
005B   2???           00478  goto hllDAAAA
                      00479  
005C   08??           00480  movfw margp2
005D   39F7           00481  andlw .255-.8
005E   2???           00482  goto hllHAAAA
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

005F                  00483 hllDAAAA: 
005F   3A03           00484  xorlw .3
0060   3A04           00485  xorlw .4
0061   1D03           00486  btfss STATUS,Z
0062   2???           00487  goto hllEAAAA
                      00488  
0063   08??           00489  movfw margp2
0064   39EF           00490  andlw .255-.16
0065   2???           00491  goto hllHAAAA
0066                  00492 hllEAAAA: 
0066   3A04           00493  xorlw .4
0067   3A05           00494  xorlw .5
0068   1D03           00495  btfss STATUS,Z
0069   2???           00496  goto hllFAAAA
                      00497  
006A   08??           00498  movfw margp2
006B   39DF           00499  andlw .255-.32
006C   2???           00500  goto hllHAAAA
006D                  00501 hllFAAAA: 
006D   3A05           00502  xorlw .5
006E   3A06           00503  xorlw .6
006F   1D03           00504  btfss STATUS,Z
0070   2???           00505  goto hllGAAAA
                      00506  
0071   08??           00507  movfw margp2
0072   39BF           00508  andlw .255-.64
0073   2???           00509  goto hllHAAAA
0074                  00510 hllGAAAA: 
                      00511  
0074   08??           00512  movfw margp2
0075   397F           00513  andlw .255-.128
0076                  00514 hllHAAAA:  
                      00515  PUSH
0076   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0077   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0078   0008           00516  return
                      00517 
                      00518 
                      00519 
                      00520 
                      00521 #undefine margp2
                      00522 
                      00523 
                      00524 
                      00525 
                      00526 
                      00527 
                      00528 
                      00529  
                      00530 
                      00531 
                      00532 
                      00533 ukrnl2 UDATA
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000                  00534 stack res HLOE_STACK_SIZE
                      00535  
                      00536 ukrnl3 UDATA 
0000                  00537 alt_stack res HLOE_STACK2_SIZE
                      00538  
                      00539 
                      00540 
                      00541 ukernl udata 
                      00542 
                      00543 
                      00544 
                      00545 
                      00546 
0000                  00547 hllblss00 res 1           
                      00548 #ifdef HLLMULTITASK
                      00549 #ifdef HLLGUARDhllblss
0001                  00550 hllblss00isr res 1      
                      00551 #endif
                      00552 #endif
                      00553 
0002                  00554 hllblss01 res 1    
                      00555 #ifdef HLLMULTITASK
                      00556 #ifdef HLLGUARDhllblss
0003                  00557 hllblss01isr res 1      
                      00558 #endif
                      00559 #endif
                      00560 
0004                  00561 hllblss02 res 1    
                      00562 #ifdef HLLMULTITASK
                      00563 #ifdef HLLGUARDhllblss
0005                  00564 hllblss02isr res 1      
                      00565 #endif
                      00566 #endif
                      00567   
                      00568 ukrshr udata_shr
                      00569 
                      00570 
0000                  00571 softstack0 res 1                
                      00572 #ifdef HLLMULTITASK
0001                  00573 softstack0isr res 1
                      00574 #endif
                      00575 
0002                  00576 softstack1 res 1                
                      00577 #ifdef HLLMULTITASK
0003                  00578 softstack1isr res 1
                      00579 #endif
                      00580 
0004                  00581 softstack2 res 1                
                      00582 #ifdef HLLMULTITASK
0005                  00583 softstack2isr res 1
                      00584 #endif
                      00585 
0006                  00586 alt_fsr res 1
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0007                  00587 W_Save res 1 
0008                  00588 STATUS_Save res 1
0009                  00589 FSR_Save res 1
000A                  00590 ALT_Save res 1
000B                  00591 in_isr res 1
                      00592 
                      00593 hllkrna00 CODE
                      00594 
                      00595  
                      00596 
                      00597 
                      00598 #define mterm hllblss00
                      00599 
                      00600 
0000                  00601 mul:  
                      00602 #ifdef HLLMULTITASK
                      00603 #ifdef HLLGUARDhllblss 
0000   08??           00604  movf in_isr,f  
0001   1903           00605  btfsc STATUS,Z
                      00606  
                      00607 
                      00608 
0002   2???           00609  goto mul0
                      00610 
                      00611  POP
0003   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0004   0384               M  decf FSR,f 
0005   ???? ????      00612  banksel mterm 
0007   00??           00613  movwf mterm
0008   0103           00614  clrw 
0009   0700           00615  addwf HLINDF,w 
000A   03??           00616  decf mterm,f 
000B   1D03           00617  btfss STATUS,Z 
000C   2???           00618  goto $-3
000D   0080           00619  movwf HLINDF
000E   0008           00620  return
                      00621 
                      00622 
                      00623 
                      00624 #undefine mterm
                      00625 
                      00626 
                      00627 #define mterm hllblss00+1
                      00628 
                      00629 
000F                  00630 mul0:
                      00631 #endif
                      00632 #endif
                      00633 
                      00634  POP
000F   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0010   0384               M  decf FSR,f 
0011   ???? ????      00635  banksel mterm 
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0013   00??           00636  movwf mterm
0014   0103           00637  clrw 
0015   0700           00638  addwf HLINDF,w 
0016   03??           00639  decf mterm,f 
0017   1D03           00640  btfss STATUS,Z 
0018   2???           00641  goto $-3
0019   0080           00642  movwf HLINDF
001A   0008           00643  return
                      00644 
                      00645 
                      00646 
                      00647 #undefine mterm
                      00648 hllkrna01 CODE
                      00649 
0000                  00650 add: 
                      00651  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   0700           00652  addwf HLINDF,w
0003   0384           00653  decf HLFSR,f 
                      00654  PUSH
0004   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0005   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0006   0008           00655  return
                      00656  
                      00657 hllkrna02 CODE 
                      00658 
0000                  00659 negti:  
0000   0980           00660  comf HLINDF,f
0001   0A80           00661  incf HLINDF,f
0002   0008           00662  return
                      00663  
                      00664 hllkrna03 CODE 
                      00665  
0000                  00666 printch:
                      00667  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
                      00668 #ifdef HLLMULTITASK 
                      00669  
0002   1283 1303      00670  banksel PIR1
0004   1E0C           00671  btfss PIR1,TXIF  
0005   2???           00672  goto $-1 
                      00673 #endif 
                      00674  
0006   1283 1303      00675  banksel TXREG
0008   0099           00676  movwf TXREG  
                      00677  
0009   1283 1303      00678  banksel PIR1
000B   1E0C           00679  btfss PIR1,TXIF  
000C   2???           00680  goto $-1  
000D   0008           00681  return  
                      00682 
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00683 
                      00684 
                      00685 
                      00686 hllkrna04 CODE
                      00687  
                      00688 
                      00689 
                      00690 #define mterm hllblss00
                      00691 
                      00692 
                      00693 #define mdiv hllblss01
                      00694 
                      00695 
                      00696 #define mquot hllblss02
                      00697 
                      00698 
0000                  00699 modu:  
                      00700 #ifdef HLLMULTITASK
                      00701 #ifdef HLLGUARDhllblss 
0000   08??           00702  movf in_isr,f  
0001   1903           00703  btfsc STATUS,Z
                      00704  
                      00705 
                      00706 
0002   2???           00707  goto modu0
                      00708 
0003   ???? ????      00709  banksel mquot 
0005   01??           00710  clrf mquot
                      00711  POP
0006   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0007   0384               M  decf FSR,f 
0008   00??           00712  movwf mdiv
                      00713  POP
0009   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
000A   0384               M  decf FSR,f 
000B   00??           00714  movwf mterm
000C   08??           00715  movfw mdiv
000D   02??           00716  subwf mterm,f
000E   1C03           00717  btfss STATUS,C 
000F   2???           00718  goto $+3
0010   0A??           00719  incf mquot,f 
0011   2???           00720  goto $-4
0012   07??           00721  addwf mterm,w
                      00722  PUSH
0013   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0014   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0015   0008           00723  return 
                      00724 
                      00725 
                      00726 
                      00727 #undefine mterm
                      00728 
                      00729 
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00730 #undefine mdiv
                      00731 
                      00732 
                      00733 #undefine mquot
                      00734 
                      00735 
                      00736 #define mterm hllblss00+1
                      00737 
                      00738 
                      00739 #define mdiv hllblss01+1
                      00740 
                      00741 
                      00742 #define mquot hllblss02+1
                      00743 
                      00744 
0016                  00745 modu0:
                      00746 #endif
                      00747 #endif
                      00748 
0016   ???? ????      00749  banksel mquot 
0018   01??           00750  clrf mquot
                      00751  POP
0019   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
001A   0384               M  decf FSR,f 
001B   00??           00752  movwf mdiv
                      00753  POP
001C   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
001D   0384               M  decf FSR,f 
001E   00??           00754  movwf mterm
001F   08??           00755  movfw mdiv
0020   02??           00756  subwf mterm,f
0021   1C03           00757  btfss STATUS,C 
0022   2???           00758  goto $+3
0023   0A??           00759  incf mquot,f 
0024   2???           00760  goto $-4
0025   07??           00761  addwf mterm,w
                      00762  PUSH
0026   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0027   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0028   0008           00763  return 
                      00764 
                      00765 
                      00766 
                      00767 #undefine mterm
                      00768 
                      00769 
                      00770 #undefine mdiv
                      00771 
                      00772 
                      00773 #undefine mquot
                      00774 hllkrna05 CODE
                      00775 
                      00776 
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00777 
                      00778 #define mterm hllblss00
                      00779 
                      00780 
                      00781 #define mdiv hllblss01
                      00782 
                      00783 
                      00784 #define mquot hllblss02
                      00785 
                      00786 
0000                  00787 divu:  
                      00788 #ifdef HLLMULTITASK
                      00789 #ifdef HLLGUARDhllblss 
0000   08??           00790  movf in_isr,f  
0001   1903           00791  btfsc STATUS,Z
                      00792  
                      00793 
                      00794 
0002   2???           00795  goto divu0
                      00796 
0003   ???? ????      00797  banksel mquot 
0005   01??           00798  clrf mquot
                      00799  POP
0006   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0007   0384               M  decf FSR,f 
0008   00??           00800  movwf mdiv
                      00801  POP
0009   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
000A   0384               M  decf FSR,f 
000B   00??           00802  movwf mterm
000C   08??           00803  movfw mdiv
000D   02??           00804  subwf mterm,f
000E   1C03           00805  btfss STATUS,C 
000F   2???           00806  goto $+3
0010   0A??           00807  incf mquot,f 
0011   2???           00808  goto $-4
0012   08??           00809  movfw mquot
                      00810  PUSH
0013   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0014   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0015   0008           00811  return 
                      00812 
                      00813 
                      00814 
                      00815 #undefine mterm
                      00816 
                      00817 
                      00818 #undefine mdiv
                      00819 
                      00820 
                      00821 #undefine mquot
                      00822 
                      00823 
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00824 #define mterm hllblss00+1
                      00825 
                      00826 
                      00827 #define mdiv hllblss01+1
                      00828 
                      00829 
                      00830 #define mquot hllblss02+1
                      00831 
                      00832 
0016                  00833 divu0:
                      00834 #endif
                      00835 #endif
                      00836 
0016   ???? ????      00837  banksel mquot 
0018   01??           00838  clrf mquot
                      00839  POP
0019   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
001A   0384               M  decf FSR,f 
001B   00??           00840  movwf mdiv
                      00841  POP
001C   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
001D   0384               M  decf FSR,f 
001E   00??           00842  movwf mterm
001F   08??           00843  movfw mdiv
0020   02??           00844  subwf mterm,f
0021   1C03           00845  btfss STATUS,C 
0022   2???           00846  goto $+3
0023   0A??           00847  incf mquot,f 
0024   2???           00848  goto $-4
0025   08??           00849  movfw mquot
                      00850  PUSH
0026   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0027   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0028   0008           00851  return 
                      00852 
                      00853 
                      00854 
                      00855 #undefine mterm
                      00856 
                      00857 
                      00858 #undefine mdiv
                      00859 
                      00860 
                      00861 #undefine mquot
                      00862 hllkrna06 CODE
                      00863 
                      00864  
                      00865  
                      00866  
0000                  00867 getch:
0000   1283 1303      00868  banksel PIR1
0002                  00869 geth2: 
0002   1E8C           00870  btfss PIR1,RCIF
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0003   2???           00871  goto geth2
0004   1283 1303      00872  banksel RCREG
0006   081A           00873  movf RCREG,w
                      00874  PUSH 
0007   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0008   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0009   0008           00875  return
                      00876  
                      00877 hllkrna07 CODE 
                      00878  
0000                  00879 eq: 
                      00880  POP 
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   0600           00881  xorwf HLINDF,w
0003   3001           00882  movlw .1 
0004   1D03           00883  btfss STATUS,Z
0005   3000           00884  movlw .0 
0006   0384           00885  decf HLFSR,f 
                      00886  PUSH 
0007   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0008   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0009   0008           00887  return
                      00888  
                      00889  
                      00890  
                      00891 
                      00892 #define sstack0 softstack0 
                      00893 #define sstack1 softstack1 
                      00894 #define sstack2 softstack2 
                      00895 
                      00896 hllparmcore macro 
                      00897  movwf sstack2
                      00898  movfw HLFSR 
                      00899            
                      00900                    
                      00901  movwf sstack0
                      00902  movfw HLINDF
                      00903  
                      00904  subwf sstack2,w
                      00905  movwf HLFSR 
                      00906  movfw HLINDF 
                      00907  
                      00908  movwf sstack1
                      00909  
                      00910  movfw sstack0
                      00911  movwf HLFSR 
                      00912  clrf sstack0
                      00913  movfw sstack1 
                      00914  movwf HLINDF
                      00915  
                      00916  movfw sstack2
                      00917  pagesel kpush
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00918  goto kpush 
                      00919  endm
                      00920 
                      00921  
                      00922 hllkrna08 CODE  
0000                  00923 parm:
                      00924  KPOP 
0000   ????               M  bankisel alt_stack ;This is OK for interrupts... part of STATUS 
0001   08??               M  movf in_isr,f ;In shared RAM, no need for BANKSEL
0002   1903               M  btfsc STATUS,Z
0003   2???               M  goto $+0F
0004   0804               M  movfw FSR 
0005   00??               M  movwf softstack0+1 ;Save user stack ptr 
0006   08??               M  movfw alt_fsr ;Get second stack ptr 
0007   0084               M  movwf FSR 
0008   0800               M  movfw INDF ;Dereference it 
0009   0384               M  decf FSR,f ;Decrement it 
000A   00??               M  movwf softstack1+1  ;Save popped value for ret urn 
000B   0804               M  movfw FSR ;Save second stack ptr 
000C   00??               M  movwf alt_fsr 
000D   08??               M  movfw softstack0+1  ;Restore user stack ptr 
000E   0084               M  movwf FSR 
000F   01??               M  clrf softstack0+1
0010   08??               M  movfw softstack1+1  ;Bring back popped value for ret urn 
0011   2???               M  goto $+0E
0012   0804               M  movfw FSR 
0013   00??               M  movwf softstack0 ;Save user stack ptr 
0014   08??               M  movfw alt_fsr ;Get second stack ptr 
0015   0084               M  movwf FSR 
0016   0800               M  movfw INDF ;Dereference it 
0017   0384               M  decf FSR,f ;Decrement it 
0018   00??               M  movwf softstack1  ;Save popped value for ret urn 
0019   0804               M  movfw FSR ;Save second stack ptr 
001A   00??               M  movwf alt_fsr 
001B   08??               M  movfw softstack0  ;Restore user stack ptr 
001C   0084               M  movwf FSR 
001D   01??               M  clrf softstack0
001E   08??               M  movfw softstack1  ;Bring back popped value for ret urn 
001F   ????               M  bankisel stack
                      00925  
                      00926 #ifdef HLLMULTITASK 
0020   08??           00927  movf in_isr,f 
0021   1D03           00928  btfss STATUS,Z
0022   2???           00929  goto parm4
                      00930  hllparmcore
0023   00??               M  movwf sstack2
0024   0804               M  movfw HLFSR 
                          M            
                          M                    
0025   00??               M  movwf sstack0
0026   0800               M  movfw HLINDF
                          M  
0027   02??               M  subwf sstack2,w
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0028   0084               M  movwf HLFSR 
0029   0800               M  movfw HLINDF 
                          M  
002A   00??               M  movwf sstack1
                          M  
002B   08??               M  movfw sstack0
002C   0084               M  movwf HLFSR 
002D   01??               M  clrf sstack0
002E   08??               M  movfw sstack1 
002F   0080               M  movwf HLINDF
                          M  
0030   08??               M  movfw sstack2
0031   ????               M  pagesel kpush
0032   2???               M  goto kpush 
                      00931 #undefine sstack0 
                      00932 #undefine sstack1
                      00933 #undefine sstack2 
                      00934 #define sstack0 softstack0+1
                      00935 #define sstack1 softstack1+1
                      00936 #define sstack2 softstack2+1
0033                  00937 parm4:
                      00938 #endif 
                      00939  hllparmcore
0033   00??               M  movwf sstack2
0034   0804               M  movfw HLFSR 
                          M            
                          M                    
0035   00??               M  movwf sstack0
0036   0800               M  movfw HLINDF
                          M  
0037   02??               M  subwf sstack2,w
0038   0084               M  movwf HLFSR 
0039   0800               M  movfw HLINDF 
                          M  
003A   00??               M  movwf sstack1
                          M  
003B   08??               M  movfw sstack0
003C   0084               M  movwf HLFSR 
003D   01??               M  clrf sstack0
003E   08??               M  movfw sstack1 
003F   0080               M  movwf HLINDF
                          M  
0040   08??               M  movfw sstack2
0041   ????               M  pagesel kpush
0042   2???               M  goto kpush 
                      00940 #undefine sstack0 
                      00941 #undefine sstack1
                      00942 #undefine sstack2 
                      00943  
                      00944 hllkrna09 CODE  
0000                  00945 kpop: 
                      00946  KPOP
0000   ????               M  bankisel alt_stack ;This is OK for interrupts... part of STATUS 
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0001   08??               M  movf in_isr,f ;In shared RAM, no need for BANKSEL
0002   1903               M  btfsc STATUS,Z
0003   2???               M  goto $+0F
0004   0804               M  movfw FSR 
0005   00??               M  movwf softstack0+1 ;Save user stack ptr 
0006   08??               M  movfw alt_fsr ;Get second stack ptr 
0007   0084               M  movwf FSR 
0008   0800               M  movfw INDF ;Dereference it 
0009   0384               M  decf FSR,f ;Decrement it 
000A   00??               M  movwf softstack1+1  ;Save popped value for ret urn 
000B   0804               M  movfw FSR ;Save second stack ptr 
000C   00??               M  movwf alt_fsr 
000D   08??               M  movfw softstack0+1  ;Restore user stack ptr 
000E   0084               M  movwf FSR 
000F   01??               M  clrf softstack0+1
0010   08??               M  movfw softstack1+1  ;Bring back popped value for ret urn 
0011   2???               M  goto $+0E
0012   0804               M  movfw FSR 
0013   00??               M  movwf softstack0 ;Save user stack ptr 
0014   08??               M  movfw alt_fsr ;Get second stack ptr 
0015   0084               M  movwf FSR 
0016   0800               M  movfw INDF ;Dereference it 
0017   0384               M  decf FSR,f ;Decrement it 
0018   00??               M  movwf softstack1  ;Save popped value for ret urn 
0019   0804               M  movfw FSR ;Save second stack ptr 
001A   00??               M  movwf alt_fsr 
001B   08??               M  movfw softstack0  ;Restore user stack ptr 
001C   0084               M  movwf FSR 
001D   01??               M  clrf softstack0
001E   08??               M  movfw softstack1  ;Bring back popped value for ret urn 
001F   ????               M  bankisel stack
0020   0008           00947  return 
                      00948  
                      00949 hllkrna10 CODE   
0000                  00950 kpush: 
                      00951  KPUSH
0000   ????               M  bankisel alt_stack ;This is OK for interrupts... part of STATUS 
0001   08??               M  movf in_isr,f ;In shared RAM, no need for BANKSEL
0002   1903               M  btfsc STATUS,Z
0003   2???               M  goto $+0E
0004   00??               M  movwf softstack1+1 ;softstack1 holds parm value being pushed
0005   0804               M  movfw FSR  
0006   00??               M  movwf softstack0+1  ;softstack0 holds FSR
0007   08??               M  movfw alt_fsr 
0008   0084               M  movwf FSR 
0009   08??               M  movfw softstack1+1
000A   0A??               M  incf alt_fsr,f 
000B   0A84               M  incf FSR,f ;The actual kernel push... preincrement for interrupt safety
000C   0080               M  movwf INDF 
000D   08??               M  movfw softstack0+1
000E   0084               M  movwf FSR 
000F   01??               M  clrf softstack0+1 
0010   2???               M  goto $+0D
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0011   00??               M  movwf softstack1 ;softstack1 holds parm value being pushed
0012   0804               M  movfw FSR  
0013   00??               M  movwf softstack0  ;softstack0 holds FSR
0014   08??               M  movfw alt_fsr 
0015   0084               M  movwf FSR 
0016   08??               M  movfw softstack1
0017   0A??               M  incf alt_fsr,f 
0018   0A84               M  incf FSR,f ;The actual kernel push... preincrement for interrupt safety
0019   0080               M  movwf INDF 
001A   08??               M  movfw softstack0
001B   0084               M  movwf FSR 
001C   01??               M  clrf softstack0
001D   ????               M  bankisel stack
001E   0008           00952  return
                      00953 
                      00954 hllkrna11 CODE   
0000                  00955 dispose:
                      00956  DISCARD
0000   0384               M  decf FSR,f 
0001   0008           00957  return 
                      00958  
                      00959  
                      00960 
                      00961 
                      00962 
                      00963 
                      00964 
                      00965 
                      00966 
                      00967 
                      00968 hllkrn444 CODE    
0000                  00969 safepush: 
                      00970  PUSH
0000   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0001   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00971  
                      00972  
                      00973  
0002   0804           00974  movf HLFSR,w
0003   3C??           00975  sublw stack  
0004   1903           00976  btfsc STATUS,Z
0005   2???           00977  goto kspox5 
0006   1803           00978  btfsc STATUS,C 
0007   2???           00979  goto sperr11 
0008                  00980 kspox5:
                      00981   
                      00982 
0008   0804           00983  movf HLFSR,w
0009   3E01           00984  addlw .1
000A   3C??           00985  sublw (stack+HLOE_STACK_SIZE)  
000B   1C03           00986  btfss STATUS,C
000C   2???           00987  goto sperr11
000D   0800           00988  movf HLINDF,w
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000E   0008           00989  return
000F                  00990 sperr11:
000F   138B           00991  BCF INTCON,GIE 
                      00992  DISCARD 
0010   0384               M  decf FSR,f 
0011                  00993 dmm445:
0011   3021           00994  movlw '!' 
                      00995  PUSH
0012   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0013   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00996  
                      00997  FAR_CALL safepush,printch
0014   ????               M  pagesel printch
0015   2???               M  call printch
0016   ????               M  pagesel safepush  ;This one restores the caller's code page
0017   2???           00998  goto dmm445
                      00999  
                      01000  
                      01001 
                      01002 
                      01003 
                      01004 
                      01005 
                      01006  
                      01007  
                      01008 
                      01009  
                      01010 hlog1b CODE
                      01011 
                      01012 
                      01013 #define margp2 hllblss00
                      01014 
                      01015 
0000                  01016 setbit:  
                      01017 #ifdef HLLMULTITASK
                      01018 #ifdef HLLGUARDhllblss 
0000   08??           01019  movf in_isr,f  
0001   1903           01020  btfsc STATUS,Z
                      01021  
                      01022 
                      01023 
0002   2???           01024  goto setbit0
                      01025 
                      01026  POP
0003   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0004   0384               M  decf FSR,f 
0005   ???? ????      01027  banksel margp2
0007   00??           01028  movwf  margp2
                      01029  POP
0008   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0009   0384               M  decf FSR,f 
000A   3A00           01030  xorlw .0
000B   1D03           01031  btfss STATUS,Z
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000C   2???           01032  goto tcf00h
                      01033  
000D   08??           01034  movfw  margp2
000E   3801           01035  iorlw .1
000F   2???           01036  goto tcf99h
0010                  01037 tcf00h: 
                      01038  
0010   3A01           01039  xorlw .1
0011   1D03           01040  btfss STATUS,Z
0012   2???           01041  goto tcf01h
                      01042  
0013   08??           01043  movfw  margp2
0014   3802           01044  iorlw .2
0015   2???           01045  goto tcf99h
0016                  01046 tcf01h: 
0016   3A01           01047  xorlw .1
0017   3A02           01048  xorlw .2
0018   1D03           01049  btfss STATUS,Z
0019   2???           01050  goto tcf02h
                      01051  
001A   08??           01052  movfw margp2
001B   3804           01053  iorlw .4
001C   2???           01054  goto tcf99h
001D                  01055 tcf02h: 
001D   3A02           01056  xorlw .2
001E   3A03           01057  xorlw .3
001F   1D03           01058  btfss STATUS,Z
0020   2???           01059  goto tcf03h
                      01060  
0021   08??           01061  movfw margp2
0022   3808           01062  iorlw .8
0023   2???           01063  goto tcf99h
0024                  01064 tcf03h: 
0024   3A03           01065  xorlw .3
0025   3A04           01066  xorlw .4
0026   1D03           01067  btfss STATUS,Z
0027   2???           01068  goto tcf04h
                      01069  
0028   08??           01070  movfw margp2
0029   3810           01071  iorlw .16
002A   2???           01072  goto tcf99h
002B                  01073 tcf04h: 
002B   3A04           01074  xorlw .4
002C   3A05           01075  xorlw .5
002D   1D03           01076  btfss STATUS,Z
002E   2???           01077  goto tcf05h
                      01078  
002F   08??           01079  movfw margp2
0030   3820           01080  iorlw .32
0031   2???           01081  goto tcf99h
0032                  01082 tcf05h: 
0032   3A05           01083  xorlw .5
0033   3A06           01084  xorlw .6
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0034   1D03           01085  btfss STATUS,Z
0035   2???           01086  goto tcf07h
                      01087  
0036   08??           01088  movfw margp2
0037   3840           01089  iorlw .64
0038   2???           01090  goto tcf99h
0039                  01091 tcf07h: 
                      01092  
0039   08??           01093  movfw margp2
003A   3880           01094  iorlw .128 
003B                  01095 tcf99h:  
                      01096  PUSH 
003B   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
003C   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
003D   0008           01097  return
                      01098 
                      01099 
                      01100 
                      01101 
                      01102 #undefine margp2
                      01103 
                      01104 
                      01105 #define margp2 hllblss00+1
                      01106 
                      01107 
003E                  01108 setbit0:
                      01109 #endif
                      01110 #endif
                      01111 
                      01112  POP
003E   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
003F   0384               M  decf FSR,f 
0040   ???? ????      01113  banksel margp2
0042   00??           01114  movwf  margp2
                      01115  POP
0043   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0044   0384               M  decf FSR,f 
0045   3A00           01116  xorlw .0
0046   1D03           01117  btfss STATUS,Z
0047   2???           01118  goto hllIAAAA
                      01119  
0048   08??           01120  movfw  margp2
0049   3801           01121  iorlw .1
004A   2???           01122  goto hllPAAAA
004B                  01123 hllIAAAA: 
                      01124  
004B   3A01           01125  xorlw .1
004C   1D03           01126  btfss STATUS,Z
004D   2???           01127  goto hllJAAAA
                      01128  
004E   08??           01129  movfw  margp2
004F   3802           01130  iorlw .2
0050   2???           01131  goto hllPAAAA
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0051                  01132 hllJAAAA: 
0051   3A01           01133  xorlw .1
0052   3A02           01134  xorlw .2
0053   1D03           01135  btfss STATUS,Z
0054   2???           01136  goto hllKAAAA
                      01137  
0055   08??           01138  movfw margp2
0056   3804           01139  iorlw .4
0057   2???           01140  goto hllPAAAA
0058                  01141 hllKAAAA: 
0058   3A02           01142  xorlw .2
0059   3A03           01143  xorlw .3
005A   1D03           01144  btfss STATUS,Z
005B   2???           01145  goto hllLAAAA
                      01146  
005C   08??           01147  movfw margp2
005D   3808           01148  iorlw .8
005E   2???           01149  goto hllPAAAA
005F                  01150 hllLAAAA: 
005F   3A03           01151  xorlw .3
0060   3A04           01152  xorlw .4
0061   1D03           01153  btfss STATUS,Z
0062   2???           01154  goto hllMAAAA
                      01155  
0063   08??           01156  movfw margp2
0064   3810           01157  iorlw .16
0065   2???           01158  goto hllPAAAA
0066                  01159 hllMAAAA: 
0066   3A04           01160  xorlw .4
0067   3A05           01161  xorlw .5
0068   1D03           01162  btfss STATUS,Z
0069   2???           01163  goto hllNAAAA
                      01164  
006A   08??           01165  movfw margp2
006B   3820           01166  iorlw .32
006C   2???           01167  goto hllPAAAA
006D                  01168 hllNAAAA: 
006D   3A05           01169  xorlw .5
006E   3A06           01170  xorlw .6
006F   1D03           01171  btfss STATUS,Z
0070   2???           01172  goto hllOAAAA
                      01173  
0071   08??           01174  movfw margp2
0072   3840           01175  iorlw .64
0073   2???           01176  goto hllPAAAA
0074                  01177 hllOAAAA: 
                      01178  
0074   08??           01179  movfw margp2
0075   3880           01180  iorlw .128 
0076                  01181 hllPAAAA:  
                      01182  PUSH 
0076   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0077   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0078   0008           01183  return
                      01184 
                      01185 
                      01186 
                      01187 
                      01188 #undefine margp2
                      01189 
33C4                  01190  end
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 35


SYMBOL TABLE
  LABEL                             VALUE 

ABDEN                             00000000
ABDOVF                            00000007
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000004
ADCS1                             00000005
ADCS2                             00000006
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
ALT_Save                          0000000A
ANS0                              00000000
ANS1                              00000001
ANS10                             00000002
ANS11                             00000003
ANS2                              00000002
ANS3                              00000003
ANS4                              00000004
ANS5                              00000005
ANS6                              00000006
ANS7                              00000007
ANS8                              00000000
ANS9                              00000001
ANSEL                             0000011E
ANSELH                            0000011F
BAUDCTL                           0000009B
BF                                00000000
BRG0                              00000000
BRG1                              00000001
BRG10                             00000002
BRG11                             00000003
BRG12                             00000004
BRG13                             00000005
BRG14                             00000006
BRG15                             00000007
BRG16                             00000003
BRG2                              00000002
BRG3                              00000003
BRG4                              00000004
BRG5                              00000005
BRG6                              00000006
BRG7                              00000007
BRG8                              00000000
BRG9                              00000001
BRGH                              00000002
C                                 00000000
C1CH0                             00000000
C1CH1                             00000001
C1IE                              00000005
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 36


SYMBOL TABLE
  LABEL                             VALUE 

C1IF                              00000005
C1OE                              00000005
C1ON                              00000007
C1OUT                             00000006
C1POL                             00000004
C1R                               00000002
C1SEN                             00000005
C1VREN                            00000007
C2CH0                             00000000
C2CH1                             00000001
C2IE                              00000006
C2IF                              00000006
C2OE                              00000005
C2ON                              00000007
C2OUT                             00000006
C2POL                             00000004
C2R                               00000002
C2REN                             00000004
C2SYNC                            00000000
C2VREN                            00000006
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCPR1H                            00000016
CCPR1L                            00000015
CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CKE                               00000006
CKP                               00000004
CM1CON0                           00000119
CM2CON0                           0000011A
CM2CON1                           0000011B
COPY                              
CREN                              00000004
CSRC                              00000007
D                                 00000005
DATA_ADDRESS                      00000005
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DISCARD                           
D_A                               00000005
ECCPAS                            0000001D
ECCPAS0                           00000004
ECCPAS1                           00000005
ECCPAS2                           00000006
ECCPASE                           00000007
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 37


SYMBOL TABLE
  LABEL                             VALUE 

EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDAT                             0000010C
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
ExitISR                           0000003C
F                                 00000001
FAR_CALL                          
FERR                              00000002
FSR                               00000004
FSR_Save                          00000009
GIE                               00000007
GO                                00000001
GO_DONE                           00000001
HALF_FAR_CALL                     
HLFSR                             FSR
HLINDF                            INDF
HLLGUARDhllblss                   
HLLMULTITASK                      
HLOE_STACK2_SIZE                  .20
HLOE_STACK_SIZE                   .80
HLTABLE                           
HTS                               00000002
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IOC                               00000096
IOC0                              00000000
IOC1                              00000001
IOC2                              00000002
IOC3                              00000003
IOC4                              00000004
IOC5                              00000005
IOCA                              00000096
IOCA0                             00000000
IOCA1                             00000001
IOCA2                             00000002
IOCA3                             00000003
IOCA4                             00000004
IOCA5                             00000005
IOCB                              00000116
IOCB4                             00000004
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 38


SYMBOL TABLE
  LABEL                             VALUE 

IOCB5                             00000005
IOCB6                             00000006
IOCB7                             00000007
IRCF0                             00000004
IRCF1                             00000005
IRCF2                             00000006
IRP                               00000007
ISR                               00000004
KDISCARD                          
KPOP                              
KPUSH                             
LSHIFT                            
LTS                               00000001
MC1OUT                            00000007
MC2OUT                            00000006
MSK                               00000093
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BOR                           00000000
NOT_DONE                          00000001
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RABPU                         00000007
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_W                             00000002
NOT_WRITE                         00000002
OERR                              00000001
OPTION_REG                        00000081
OSCCON                            0000008F
OSCTUNE                           00000090
OSFIE                             00000007
OSFIF                             00000007
OSTS                              00000003
P                                 00000004
P1M0                              00000006
P1M1                              00000007
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PC_Save                           00000002
PDC0                              00000000
PDC1                              00000001
PDC2                              00000002
PDC3                              00000003
PDC4                              00000004
PDC5                              00000005
PDC6                              00000006
PEIE                              00000006
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 39


SYMBOL TABLE
  LABEL                             VALUE 

POP                               
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PR2                               00000092
PREEMPT                           
PRSEN                             00000007
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSSAC0                            00000002
PSSAC1                            00000003
PSSBD0                            00000000
PSSBD1                            00000001
PSTRCON                           0000019D
PULSR                             00000002
PULSS                             00000003
PUSH                              
PWM1CON                           0000001C
R                                 00000002
RABIE                             00000003
RABIF                             00000000
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
READ_WRITE                        00000002
RESUME                            
RP0                               00000005
RP1                               00000006
RSHIFT                            
RX9                               00000006
RX9D                              00000000
R_W                               00000002
S                                 00000003
SBOREN                            00000004
SCKP                              00000004
SCS                               00000000
SENB                              00000003
SMP                               00000007
SPBRG                             00000099
SPBRGH                            0000009A
SPEN                              00000007
SR0                               00000006
SR1                               00000007
SRCON                             0000019E
SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 40


SYMBOL TABLE
  LABEL                             VALUE 

SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPMSK                            00000093
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
STATUS_Save                       00000008
STRA                              00000000
STRB                              00000001
STRC                              00000002
STRD                              00000003
STRSYNC                           00000004
SWDTEN                            00000000
SYNC                              00000004
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1GINV                            00000007
T1GSS                             00000001
T1IE                              00000000
T1IF                              00000000
T1OSCEN                           00000003
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
T2IE                              00000001
T2IF                              00000001
TMR0                              00000001
TMR1CS                            00000001
TMR1GE                            00000006
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 41


SYMBOL TABLE
  LABEL                             VALUE 

TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000086
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRMT                              00000001
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
TUN3                              00000003
TUN4                              00000004
TX9                               00000006
TX9D                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
UA                                00000001
ULPWUE                            00000005
VCFG                              00000006
VP6EN                             00000004
VR0                               00000000
VR1                               00000001
VR2                               00000002
VR3                               00000003
VRCON                             00000118
VRR                               00000005
W                                 00000000
WCOL                              00000007
WDTCON                            00000097
WDTPS0                            00000001
WDTPS1                            00000002
WDTPS2                            00000003
WDTPS3                            00000004
WPU                               00000095
WPUA                              00000095
WPUA0                             00000000
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 42


SYMBOL TABLE
  LABEL                             VALUE 

WPUA1                             00000001
WPUA2                             00000002
WPUA4                             00000004
WPUA5                             00000005
WPUB                              00000115
WPUB4                             00000004
WPUB5                             00000005
WPUB6                             00000006
WPUB7                             00000007
WR                                00000001
WREN                              00000002
WRERR                             00000003
WUE                               00000001
W_Save                            00000007
Z                                 00000002
_BOR_NSLEEP                       00003EFF
_BOR_OFF                          00003CFF
_BOR_ON                           00003FFF
_BOR_SBODEN                       00003DFF
_CPD_OFF                          00003FFF
_CPD_ON                           00003F7F
_CP_OFF                           00003FFF
_CP_ON                            00003FBF
_EC_OSC                           00003FFB
_EXTRC                            00003FFF
_EXTRCIO                          00003FFE
_EXTRC_OSC_CLKOUT                 00003FFF
_EXTRC_OSC_NOCLKOUT               00003FFE
_FCMEN_OFF                        000037FF
_FCMEN_ON                         00003FFF
_HS_OSC                           00003FFA
_IESO_OFF                         00003BFF
_IESO_ON                          00003FFF
_INTOSC                           00003FFD
_INTOSCIO                         00003FFC
_INTRC_OSC_CLKOUT                 00003FFD
_INTRC_OSC_NOCLKOUT               00003FFC
_LP_OSC                           00003FF8
_MCLRE_OFF                        00003FDF
_MCLRE_ON                         00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FEF
_WDT_OFF                          00003FF7
_WDT_ON                           00003FFF
_XT_OSC                           00003FF9
__16F690                          00000001
_hllkrna00_000C                   0000000C
_hllkrna00_0018                   00000018
_hllkrna03_0005                   00000005
_hllkrna03_000C                   0000000C
_hllkrna04_000F                   0000000F
_hllkrna04_0011                   00000011
_hllkrna04_0022                   00000022
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 43


SYMBOL TABLE
  LABEL                             VALUE 

_hllkrna04_0024                   00000024
_hllkrna05_000F                   0000000F
_hllkrna05_0011                   00000011
_hllkrna05_0022                   00000022
_hllkrna05_0024                   00000024
_hllkrna08_0003                   00000003
_hllkrna08_0011                   00000011
_hllkrna09_0003                   00000003
_hllkrna09_0011                   00000011
_hllkrna10_0003                   00000003
_hllkrna10_0010                   00000010
add                               00000000
alt_fsr                           00000006
alt_stack                         00000000
clearbit                          00000000
clearbit0                         0000003E
cval                              hllcvall
dispose                           00000000
divu                              00000000
divu0                             00000016
dmm445                            00000011
eq                                00000000
getch                             00000000
geth2                             00000002
hllAAAAA                          0000004B
hllBAAAA                          00000051
hllCAAAA                          00000058
hllDAAAA                          0000005F
hllEAAAA                          00000066
hllFAAAA                          0000006D
hllGAAAA                          00000074
hllHAAAA                          00000076
hllIAAAA                          0000004B
hllJAAAA                          00000051
hllKAAAA                          00000058
hllLAAAA                          0000005F
hllMAAAA                          00000066
hllNAAAA                          0000006D
hllOAAAA                          00000074
hllPAAAA                          00000076
hllblss00                         00000000
hllblss00isr                      00000001
hllblss01                         00000002
hllblss01isr                      00000003
hllblss02                         00000004
hllblss02isr                      00000005
hllcvall                          00000000
hllnotisr49                       0000003C
hllparmcore                       
hllprgen2                         0000008F
hllprogend                        0000008E
hlluserprog                       00000000
hloego                            00000000
MPASM  5.35                        TARGET.ASM   7-10-2019  20:35:34         PAGE 44


SYMBOL TABLE
  LABEL                             VALUE 

in_isr                            0000000B
kpop                              00000000
kpush                             00000000
kspox5                            00000008
modu                              00000000
modu0                             00000016
mul                               00000000
mul0                              0000000F
negti                             00000000
parm                              00000000
parm4                             00000033
pbase                             00000000
pbaseisr                          00000001
printch                           00000000
safepush                          00000000
setbit                            00000000
setbit0                           0000003E
softstack0                        00000000
softstack0isr                     00000001
softstack1                        00000002
softstack1isr                     00000003
softstack2                        00000004
softstack2isr                     00000005
sperr11                           0000000F
stack                             00000000
tcf00h                            00000010
tcf01h                            00000016
tcf02h                            0000001D
tcf03h                            00000024
tcf04h                            0000002B
tcf05h                            00000032
tcf07h                            00000039
tcf99h                            0000003B
tff00h                            00000010
tff01h                            00000016
tff02h                            0000001D
tff03h                            00000024
tff04h                            0000002B
tff05h                            00000032
tff07h                            00000039
tff99h                            0000003B

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     4 suppressed

