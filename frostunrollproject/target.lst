MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 
                      00002 #include "hloe.inc"
                      00001 
                      00002 
                      00003 #define HLLGUARDhllblss
                      00004 
                      00005 
                      00006 #define HLOE_STACK_SIZE .80
                      00007 #define HLOE_STACK2_SIZE .20
                      00008 
                      00009 
                      00010 #include <p16F690.inc>
                      00001         LIST
                      00002 ; P16F690.INC  Standard Header File, Version 1.00    Microchip Technology, Inc.
                      00607         LIST
                      00011 #include "../frostcompiler/kernel.inc"
                      00001 PUSH macro ;Push to the main stack for the programmer's parms and dyn. data;
                      00002  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
                      00003  movwf INDF ; code of any sort will not overwrite the data. 
                      00004  endm 
                      00005  
                      00006 POP macro ;Pop from main stack; "decf" is the de-allocator and thus happens last to 
                      00007  movfw INDF ; preserve the safety of this code under interruptible conditions. 
                      00008  decf FSR,f 
                      00009  endm
                      00010  
                      00011 DISCARD macro ;Remove items from the main stack and throw them away w/o affecting W
                      00012  decf FSR,f 
                      00013  endm
                      00014  
                      00015 KDISCARD macro ;Remove items from stack 2 and throw them away w/o affecting W
                      00016  decf alt_fsr,f 
                      00017  endm
                      00018 
                      00019 COPY macro ;Duplicate stack top
                      00020  movfw INDF
                      00021  incf FSR,f 
                      00022  movwf INDF 
                      00023  endm
                      00024 
                      00025 #define HLFSR FSR
                      00026  
                      00027 #define HLINDF INDF
                      00028 
                      00029   
                      00030 FAR_CALL macro caller_os,func_os ;Call destination residing within a different code page
                      00031  pagesel func_os
                      00032  call func_os
                      00033  pagesel caller_os ;This one restores the caller's code page
                      00034  endm
                      00035 
                      00036 ;Call destination residing within a different code page... does not restore the caller's
                      00037 ; code page after return, which may be OK (e.g. if the next operation is another 'Far'
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00038 ; function call). 
                      00039 HALF_FAR_CALL macro func_os 
                      00040  pagesel func_os        
                      00041  call func_os
                      00042  endm
                      00043  
                      00044 KPOP macro
                      00045  bankisel alt_stack ;This is OK for interrupts... part of STATUS 
                      00046  movf in_isr,f ;In shared RAM, no need for BANKSEL
                      00047  btfsc STATUS,Z
                      00048  goto $+0F
                      00049  movfw FSR 
                      00050  movwf softstack0+1 ;Save user stack ptr 
                      00051  movfw alt_fsr ;Get second stack ptr 
                      00052  movwf FSR 
                      00053  movfw INDF ;Dereference it 
                      00054  decf FSR,f ;Decrement it 
                      00055  movwf softstack1+1  ;Save popped value for ret urn 
                      00056  movfw FSR ;Save second stack ptr 
                      00057  movwf alt_fsr 
                      00058  movfw softstack0+1  ;Restore user stack ptr 
                      00059  movwf FSR 
                      00060  clrf softstack0+1
                      00061  movfw softstack1+1  ;Bring back popped value for ret urn 
                      00062  goto $+0E
                      00063  movfw FSR 
                      00064  movwf softstack0 ;Save user stack ptr 
                      00065  movfw alt_fsr ;Get second stack ptr 
                      00066  movwf FSR 
                      00067  movfw INDF ;Dereference it 
                      00068  decf FSR,f ;Decrement it 
                      00069  movwf softstack1  ;Save popped value for ret urn 
                      00070  movfw FSR ;Save second stack ptr 
                      00071  movwf alt_fsr 
                      00072  movfw softstack0  ;Restore user stack ptr 
                      00073  movwf FSR 
                      00074  clrf softstack0
                      00075  movfw softstack1  ;Bring back popped value for ret urn 
                      00076  bankisel stack
                      00077  endm 
                      00078 
                      00079 KPUSH macro
                      00080  bankisel alt_stack ;This is OK for interrupts... part of STATUS 
                      00081  movf in_isr,f ;In shared RAM, no need for BANKSEL
                      00082  btfsc STATUS,Z
                      00083  goto $+0E
                      00084  movwf softstack1+1 ;softstack1 holds parm value being pushed
                      00085  movfw FSR  
                      00086  movwf softstack0+1  ;softstack0 holds FSR
                      00087  movfw alt_fsr 
                      00088  movwf FSR 
                      00089  movfw softstack1+1
                      00090  incf alt_fsr,f 
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00091  incf FSR,f ;The actual kernel push... preincrement for interrupt safety
                      00092  movwf INDF 
                      00093  movfw softstack0+1
                      00094  movwf FSR 
                      00095  clrf softstack0+1 
                      00096  goto $+0D
                      00097  movwf softstack1 ;softstack1 holds parm value being pushed
                      00098  movfw FSR  
                      00099  movwf softstack0  ;softstack0 holds FSR
                      00100  movfw alt_fsr 
                      00101  movwf FSR 
                      00102  movfw softstack1
                      00103  incf alt_fsr,f 
                      00104  incf FSR,f ;The actual kernel push... preincrement for interrupt safety
                      00105  movwf INDF 
                      00106  movfw softstack0
                      00107  movwf FSR 
                      00108  clrf softstack0
                      00109  bankisel stack
                      00110  endm
                      00111  
                      00112 ;These are simple shifts, similar to << or >> in C, not rotates. Newer PICs include
                      00113 ; a native shift instruction that shifts in zeroes like << and >>. Older devices 
                      00114 ; can only rotate bits through the C register, requiring an extra instruction to
                      00115 ; clear C in cases where a simple shift is needed.
                      00116 LSHIFT macro file_reg
                      00117  bcf STATUS,C    ;RLF is a bit shift operation that's present on both the 16F690 (for example) and the 1
                            6F1827.
                      00118  rlf file_reg,f  ; It's a rotate, pulling from C for the necessary bottom-order bit       
                      00119  endm 
                      00120 
                      00121 RSHIFT macro file_reg
                      00122  bcf STATUS,C    ;RRF is a bit shift operation that's present on both the 16F690 (for example) and the 1
                            6F1827.
                      00123  rrf file_reg,f  ; It's a rotate, pulling from C for the necessary bottom-order bit       
                      00124  endm 
                      00125  
                      00126 PREEMPT macro
                      00127 #ifdef HLLMULTITASK 
                      00128  movwf W_Save ; save context- save W in "W_save" file reg.
                      00129  ;From datasheet... save STATUS properly
                      00130  swapf STATUS,W 
                      00131  movwf STATUS_Save 
                      00132  movf FSR,w 
                      00133  movwf FSR_Save 
                      00134  movf PCLATH,w ; save status in "STATUS_Save" file reg.
                      00135  movwf PC_Save 
                      00136  movf alt_fsr,w 
                      00137  movwf ALT_Save
                      00138  incf in_isr,f
                      00139  pagesel ISR
                      00140  bankisel stack 
                      00141  movf FSR,w           ;Restore "softstack" if main thread was using 2nd stack
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00142  movf softstack0,f        ; (coded to preserve constant interrupt latency)
                      00143  btfss STATUS,Z       
                      00144  movf softstack0,w  
                      00145  movwf FSR          
                      00146 #endif 
                      00147  endm
                      00148  
                      00149 RESUME macro
                      00150  
                      00151 #ifdef HLLMULTITASK 
                      00152  clrf in_isr
                      00153  movf ALT_Save,w
                      00154  movwf alt_fsr 
                      00155  movf PC_Save,w ; restore context (W and STATUS)
                      00156  movwf PCLATH
                      00157  movf FSR_Save,w 
                      00158  movwf FSR
                      00159  ;Per the datasheet...
                      00160  swapf STATUS_Save,W
                      00161  movwf STATUS ;Move W into Status reg
                      00162  swapf W_Save,F ;Swap W_TEMP
                      00163  swapf W_Save,W ;Swap W_TEMP into W
                      00164 #endif
                      00165 
                      00166  endm
                      00167  
                      00168 ; Table macro.. this followed by any series of RETLW calls
                      00169 ; transforms said call list into a function that takes an offset
                      00170 ; and returns that entry in the table (takes 1 byte, returns 1
                      00171 ; byte... this goes atop the HLL feature which allows generation 
                      00172 ; of tables. It can also go atop RETLW tables entered into assembly 
                      00173 ; files in a very basic fashion when doing assembly programming. In 
                      00174 ; either case, the overall result can be called exactly as if it were any 
                      00175 ; other HLOE function
                      00176 HLTABLE macro mmnme
                      00177 mmnme:
                      00178  movlw high mmnme#v(2) ; Necess. b/c writes to PCL take 5 bits fr. PCLATH
                      00179  movwf PCLATH ; and PAGESEL doesn't take care of all 5
                      00180  movlw low mmnme#v(2) ; Perform pointer arithmetic
                      00181  addwf INDF,w 
                      00182  decf FSR,f
                      00183  btfsc STATUS,C ; Necess. b/c writes to PCL take 5 bits fr. PCLATH
                      00184  incf PCLATH,f 
                      00185  movwf PCL 
                      00186 mmnme#v(2): 
                      00187  ;retlw K, retlw K, etc. go here
                      00188  endm
                      00189  
                      00003 
2007   33C4           00004  __config (_INTRC_OSC_NOCLKOUT & _WDT_OFF & _PWRTE_ON & _MCLRE_OFF & _CP_OFF & _BOR_ON & _IESO_OFF & _FC
                            MEN_OFF)
                      00005 
                      00006 
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00007 
                      00008 
                      00009 Resetv code 0 
0000   138B           00010  bcf INTCON,GIE
0001   ????           00011  pagesel hloego
0002   2???           00012  goto hloego
                      00013  
                      00014 #ifdef HLLMULTITASK
                      00015 vectr code 4     ;Device specific
                      00016 ISR:
                      00017 
                      00018 
                      00019  PREEMPT
                      00020 #endif
                      00021 #ifdef HLLMULTITASK
                      00022 ExitISR:    
                      00023 
                      00024   RESUME
                      00025   
                      00026   
                      00027   retfie
                      00028 #endif
                      00029 
                      00030 mainvars udata_shr      
                      00031 #ifdef HLLMULTITASK
                      00032 pbase res .1                    ; Used for functions w/ numbered pass/return, to clean up parms/push arg
                            s
                      00033 pbaseisr res .1 
                      00034 #else
0000                  00035 pbase res .1
                      00036 #endif
                      00037 
0001                  00038 PC_Save res .1
                      00039 
                      00040 main code
0000                  00041 hloego:
                      00042 
                      00043  
0000   01??           00044   clrf in_isr
                      00045  
0001   30??           00046   movlw stack-1         ;Set up stack starting position based on literals det. by incremental linker
0002   0084           00047   movwf FSR 
0003   30??           00048   movlw alt_stack-1
0004   00??           00049   movwf alt_fsr 
                      00050   
                      00051   
0005   01??           00052   clrf softstack0
                      00053  
0006   ????           00054  bankisel stack
0007   ????           00055  pagesel hlluserprog
0008   2???           00056  goto hlluserprog
                      00057 hllupuser CODE
0000                  00058 hlluserprog: 
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00059  
                      00060 
0000   3070           00061  movlw .112 
                      00062  PUSH 
0001   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0002   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00063 
0003   1683 1303      00064    banksel OSCCON
0005   080F           00065    movfw OSCCON
                      00066    
                      00067    
                      00068  PUSH 
0006   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0007   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00069 
                      00070 
                      00071  
                      00072  FAR_CALL hlluserprog,oru
0008   ????               M  pagesel oru
0009   2???               M  call oru
000A   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00073 
                      00074  POP
000B   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
000C   0384               M  decf FSR,f 
000D   1683 1303      00075  banksel OSCCON
000F   008F           00076  movwf OSCCON
                      00077  
                      00078 
                      00079 
0010   3011           00080  movlw .17 
                      00081  
0011   1683 1303      00082  banksel SPBRG
0013   0099           00083  movwf SPBRG
                      00084  
                      00085 
                      00086 
0014   3000           00087  movlw .0 
                      00088  
0015   1683 1303      00089  banksel SPBRGH
0017   009A           00090  movwf SPBRGH
                      00091  
                      00092 
                      00093 
0018   3004           00094  movlw SYNC
                      00095 
                      00096  PUSH 
0019   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
001A   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00097 
001B   1683 1303      00098    banksel TXSTA
001D   0818           00099    movfw TXSTA
                      00100    
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00101    
                      00102  PUSH 
001E   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
001F   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00103 
                      00104 
                      00105  
                      00106  FAR_CALL hlluserprog,clearbit
0020   ????               M  pagesel clearbit
0021   2???               M  call clearbit
0022   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00107 
                      00108  POP
0023   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0024   0384               M  decf FSR,f 
0025   1683 1303      00109  banksel TXSTA
0027   0098           00110  movwf TXSTA
                      00111  
                      00112 
                      00113 
0028   3004           00114  movlw CREN
                      00115 
                      00116  PUSH 
0029   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
002A   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00117 
002B   1283 1303      00118    banksel RCSTA
002D   0818           00119    movfw RCSTA
                      00120    
                      00121    
                      00122  PUSH 
002E   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
002F   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00123 
                      00124 
                      00125  
                      00126  FAR_CALL hlluserprog,clearbit
0030   ????               M  pagesel clearbit
0031   2???               M  call clearbit
0032   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00127 
                      00128  POP
0033   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0034   0384               M  decf FSR,f 
0035   1283 1303      00129  banksel RCSTA
0037   0098           00130  movwf RCSTA
                      00131  
                      00132 
                      00133 
0038   3004           00134  movlw CREN
                      00135 
                      00136  PUSH 
0039   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

003A   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00137 
003B   1283 1303      00138    banksel RCSTA
003D   0818           00139    movfw RCSTA
                      00140    
                      00141    
                      00142  PUSH 
003E   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
003F   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00143 
                      00144 
                      00145  
                      00146  FAR_CALL hlluserprog,setbit
0040   ????               M  pagesel setbit
0041   2???               M  call setbit
0042   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00147 
                      00148  POP
0043   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0044   0384               M  decf FSR,f 
0045   1283 1303      00149  banksel RCSTA
0047   0098           00150  movwf RCSTA
                      00151  
                      00152 
                      00153 
0048   3007           00154  movlw SPEN
                      00155 
                      00156  PUSH 
0049   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
004A   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00157 
004B   1283 1303      00158    banksel RCSTA
004D   0818           00159    movfw RCSTA
                      00160    
                      00161    
                      00162  PUSH 
004E   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
004F   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00163 
                      00164 
                      00165  
                      00166  FAR_CALL hlluserprog,setbit
0050   ????               M  pagesel setbit
0051   2???               M  call setbit
0052   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00167 
                      00168  POP
0053   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0054   0384               M  decf FSR,f 
0055   1283 1303      00169  banksel RCSTA
0057   0098           00170  movwf RCSTA
                      00171  
                      00172 
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00173 
0058   3005           00174  movlw TXEN
                      00175 
                      00176  PUSH 
0059   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
005A   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00177 
                      00178 
005B   3006           00179  movlw TX9
                      00180 
                      00181  PUSH 
005C   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
005D   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00182 
                      00183 
005E   3002           00184  movlw BRGH
                      00185 
                      00186  PUSH 
005F   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0060   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00187 
0061   1683 1303      00188    banksel TXSTA
0063   0818           00189    movfw TXSTA
                      00190    
                      00191    
                      00192  PUSH 
0064   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0065   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00193 
                      00194 
                      00195  
                      00196  HALF_FAR_CALL setbit
0066   ????               M  pagesel setbit         
0067   2???               M  call setbit
                      00197 
                      00198 
                      00199  
                      00200  HALF_FAR_CALL clearbit
0068   ????               M  pagesel clearbit       
0069   2???               M  call clearbit
                      00201 
                      00202 
                      00203  
                      00204  FAR_CALL hlluserprog,setbit
006A   ????               M  pagesel setbit
006B   2???               M  call setbit
006C   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00205 
                      00206  POP
006D   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
006E   0384               M  decf FSR,f 
006F   1683 1303      00207  banksel TXSTA
0071   0098           00208  movwf TXSTA
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00209  
                      00210 
                      00211 
0072   3003           00212  movlw BRG16
                      00213 
                      00214  PUSH 
0073   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0074   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00215 
                      00216 
0075   3004           00217  movlw SCKP
                      00218 
                      00219  PUSH 
0076   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0077   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00220 
0078   1683 1303      00221    banksel BAUDCTL
007A   081B           00222    movfw BAUDCTL
                      00223    
                      00224    
                      00225  PUSH 
007B   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
007C   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00226 
                      00227 
                      00228  
                      00229  HALF_FAR_CALL setbit
007D   ????               M  pagesel setbit         
007E   2???               M  call setbit
                      00230 
                      00231 
                      00232  
                      00233  FAR_CALL hlluserprog,setbit
007F   ????               M  pagesel setbit
0080   2???               M  call setbit
0081   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00234 
                      00235  POP
0082   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0083   0384               M  decf FSR,f 
0084   1683 1303      00236  banksel BAUDCTL
0086   009B           00237  movwf BAUDCTL
                      00238  
                      00239 
                      00240 
0087   3000           00241  movlw .0 
                      00242  
0088   1283 1703      00243  banksel ANSELH
008A   009F           00244  movwf ANSELH
                      00245  
                      00246 
                      00247 
008B   3000           00248  movlw .0 
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00249  
008C   1283 1703      00250  banksel ANSEL
008E   009E           00251  movwf ANSEL
                      00252  
                      00253 
                      00254 
008F   3005           00255  movlw RCIE
                      00256 
                      00257  PUSH 
0090   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0091   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00258 
                      00259 
0092   3004           00260  movlw TXIE
                      00261 
                      00262  PUSH 
0093   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0094   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00263 
0095   1683 1303      00264    banksel PIE1
0097   080C           00265    movfw PIE1
                      00266    
                      00267    
                      00268  PUSH 
0098   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0099   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00269 
                      00270 
                      00271  
                      00272  HALF_FAR_CALL clearbit
009A   ????               M  pagesel clearbit       
009B   2???               M  call clearbit
                      00273 
                      00274 
                      00275  
                      00276  FAR_CALL hlluserprog,clearbit
009C   ????               M  pagesel clearbit
009D   2???               M  call clearbit
009E   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00277 
                      00278  POP
009F   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
00A0   0384               M  decf FSR,f 
00A1   1683 1303      00279  banksel PIE1
00A3   008C           00280  movwf PIE1
                      00281  
                      00282 
                      00283 
00A4   300D           00284  movlw .13
                      00285  PUSH 
00A5   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00A6   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00286 
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00287 
                      00288  
                      00289  FAR_CALL hlluserprog,printch
00A7   ????               M  pagesel printch
00A8   2???               M  call printch
00A9   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00290 
                      00291 
00AA   300A           00292  movlw .10
                      00293  PUSH 
00AB   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00AC   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00294 
                      00295 
                      00296  
                      00297  FAR_CALL hlluserprog,printch
00AD   ????               M  pagesel printch
00AE   2???               M  call printch
00AF   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00298 
                      00299  ; char 'B'
                      00300 
                      00301 
00B0   3042           00302  movlw .66
                      00303 
                      00304  PUSH 
00B1   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00B2   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00305 
                      00306 
                      00307  
                      00308  FAR_CALL hlluserprog,printch
00B3   ????               M  pagesel printch
00B4   2???               M  call printch
00B5   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00309 
                      00310  ; char 'B'
                      00311 
                      00312 
00B6   3042           00313  movlw .66
                      00314 
                      00315  PUSH 
00B7   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00B8   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00316 
                      00317 
                      00318  
                      00319  FAR_CALL hlluserprog,printch
00B9   ????               M  pagesel printch
00BA   2???               M  call printch
00BB   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00320 
                      00321  ; char 'B'
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00322 
                      00323 
00BC   3042           00324  movlw .66
                      00325 
                      00326  PUSH 
00BD   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00BE   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00327 
                      00328 
                      00329  
                      00330  FAR_CALL hlluserprog,printch
00BF   ????               M  pagesel printch
00C0   2???               M  call printch
00C1   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00331 
                      00332  ; char 'B'
                      00333 
                      00334 
00C2   3042           00335  movlw .66
                      00336 
                      00337  PUSH 
00C3   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00C4   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00338 
                      00339 
                      00340  
                      00341  FAR_CALL hlluserprog,printch
00C5   ????               M  pagesel printch
00C6   2???               M  call printch
00C7   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00342 
                      00343  ; char 'B'
                      00344 
                      00345 
00C8   3042           00346  movlw .66
                      00347 
                      00348  PUSH 
00C9   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00CA   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00349 
                      00350 
                      00351  
                      00352  FAR_CALL hlluserprog,printch
00CB   ????               M  pagesel printch
00CC   2???               M  call printch
00CD   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00353 
                      00354  ; char 'B'
                      00355 
                      00356 
00CE   3042           00357  movlw .66
                      00358 
                      00359  PUSH 
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00CF   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00D0   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00360 
                      00361 
                      00362  
                      00363  FAR_CALL hlluserprog,printch
00D1   ????               M  pagesel printch
00D2   2???               M  call printch
00D3   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00364 
                      00365  ; char 'B'
                      00366 
                      00367 
00D4   3042           00368  movlw .66
                      00369 
                      00370  PUSH 
00D5   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00D6   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00371 
                      00372 
                      00373  
                      00374  FAR_CALL hlluserprog,printch
00D7   ????               M  pagesel printch
00D8   2???               M  call printch
00D9   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00375 
                      00376  ; char 'B'
                      00377 
                      00378 
00DA   3042           00379  movlw .66
                      00380 
                      00381  PUSH 
00DB   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00DC   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00382 
                      00383 
                      00384  
                      00385  FAR_CALL hlluserprog,printch
00DD   ????               M  pagesel printch
00DE   2???               M  call printch
00DF   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00386 
                      00387  ; char 'B'
                      00388 
                      00389 
00E0   3042           00390  movlw .66
                      00391 
                      00392  PUSH 
00E1   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00E2   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00393 
                      00394 
                      00395  
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00396  FAR_CALL hlluserprog,printch
00E3   ????               M  pagesel printch
00E4   2???               M  call printch
00E5   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00397 
                      00398     
00E6                  00399 hllprogend:
00E6   2???           00400  goto hllprogend
                      00401  
00E7                  00402 hllprgen2:
00E7   2???           00403  goto hllprgen2
                      00404  
                      00405 
                      00406 
                      00407 
                      00408 
                      00409 
                      00410  
                      00411 
                      00412 
                      00413 hlog1a CODE
                      00414 
                      00415 
                      00416 
                      00417 #define margp2 hllblss00
                      00418 
                      00419 
0000                  00420 clearbit:  
                      00421 #ifdef HLLMULTITASK
                      00422 #ifdef HLLGUARDhllblss 
                      00423  movf in_isr,f  
                      00424  btfsc STATUS,Z
                      00425  
                      00426 
                      00427 
                      00428  goto clearbit0
                      00429 
                      00430  POP
                      00431  banksel margp2
                      00432  movwf margp2
                      00433  POP 
                      00434  xorlw .0
                      00435  btfss STATUS,Z
                      00436  goto tff00h
                      00437  
                      00438  movfw margp2
                      00439  andlw .255-.1
                      00440  goto tff99h
                      00441 tff00h: 
                      00442  
                      00443  xorlw .1
                      00444  btfss STATUS,Z
                      00445  goto tff01h
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00446  
                      00447  movfw margp2
                      00448  andlw .255-.2
                      00449  goto tff99h
                      00450 tff01h: 
                      00451  xorlw .1
                      00452  xorlw .2
                      00453  btfss STATUS,Z
                      00454  goto tff02h
                      00455  
                      00456  movfw margp2
                      00457  andlw .255-.4
                      00458  goto tff99h
                      00459 tff02h: 
                      00460  xorlw .2
                      00461  xorlw .3
                      00462  btfss STATUS,Z
                      00463  goto tff03h
                      00464  
                      00465  movfw margp2
                      00466  andlw .255-.8
                      00467  goto tff99h
                      00468 tff03h: 
                      00469  xorlw .3
                      00470  xorlw .4
                      00471  btfss STATUS,Z
                      00472  goto tff04h
                      00473  
                      00474  movfw margp2
                      00475  andlw .255-.16
                      00476  goto tff99h
                      00477 tff04h: 
                      00478  xorlw .4
                      00479  xorlw .5
                      00480  btfss STATUS,Z
                      00481  goto tff05h
                      00482  
                      00483  movfw margp2
                      00484  andlw .255-.32
                      00485  goto tff99h
                      00486 tff05h: 
                      00487  xorlw .5
                      00488  xorlw .6
                      00489  btfss STATUS,Z
                      00490  goto tff07h
                      00491  
                      00492  movfw margp2
                      00493  andlw .255-.64
                      00494  goto tff99h
                      00495 tff07h: 
                      00496  
                      00497  movfw margp2
                      00498  andlw .255-.128
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00499 tff99h:  
                      00500  PUSH
                      00501  return
                      00502 
                      00503 
                      00504 
                      00505 
                      00506 #undefine margp2
                      00507 
                      00508 
                      00509 #define margp2 hllblss00+1
                      00510 
                      00511 
                      00512 clearbit0:
                      00513 #endif
                      00514 #endif
                      00515 
                      00516  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   ???? ????      00517  banksel margp2
0004   00??           00518  movwf margp2
                      00519  POP 
0005   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0006   0384               M  decf FSR,f 
0007   3A00           00520  xorlw .0
0008   1D03           00521  btfss STATUS,Z
0009   2???           00522  goto hllAAAAA
                      00523  
000A   08??           00524  movfw margp2
000B   39FE           00525  andlw .255-.1
000C   2???           00526  goto hllHAAAA
000D                  00527 hllAAAAA: 
                      00528  
000D   3A01           00529  xorlw .1
000E   1D03           00530  btfss STATUS,Z
000F   2???           00531  goto hllBAAAA
                      00532  
0010   08??           00533  movfw margp2
0011   39FD           00534  andlw .255-.2
0012   2???           00535  goto hllHAAAA
0013                  00536 hllBAAAA: 
0013   3A01           00537  xorlw .1
0014   3A02           00538  xorlw .2
0015   1D03           00539  btfss STATUS,Z
0016   2???           00540  goto hllCAAAA
                      00541  
0017   08??           00542  movfw margp2
0018   39FB           00543  andlw .255-.4
0019   2???           00544  goto hllHAAAA
001A                  00545 hllCAAAA: 
001A   3A02           00546  xorlw .2
001B   3A03           00547  xorlw .3
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001C   1D03           00548  btfss STATUS,Z
001D   2???           00549  goto hllDAAAA
                      00550  
001E   08??           00551  movfw margp2
001F   39F7           00552  andlw .255-.8
0020   2???           00553  goto hllHAAAA
0021                  00554 hllDAAAA: 
0021   3A03           00555  xorlw .3
0022   3A04           00556  xorlw .4
0023   1D03           00557  btfss STATUS,Z
0024   2???           00558  goto hllEAAAA
                      00559  
0025   08??           00560  movfw margp2
0026   39EF           00561  andlw .255-.16
0027   2???           00562  goto hllHAAAA
0028                  00563 hllEAAAA: 
0028   3A04           00564  xorlw .4
0029   3A05           00565  xorlw .5
002A   1D03           00566  btfss STATUS,Z
002B   2???           00567  goto hllFAAAA
                      00568  
002C   08??           00569  movfw margp2
002D   39DF           00570  andlw .255-.32
002E   2???           00571  goto hllHAAAA
002F                  00572 hllFAAAA: 
002F   3A05           00573  xorlw .5
0030   3A06           00574  xorlw .6
0031   1D03           00575  btfss STATUS,Z
0032   2???           00576  goto hllGAAAA
                      00577  
0033   08??           00578  movfw margp2
0034   39BF           00579  andlw .255-.64
0035   2???           00580  goto hllHAAAA
0036                  00581 hllGAAAA: 
                      00582  
0036   08??           00583  movfw margp2
0037   397F           00584  andlw .255-.128
0038                  00585 hllHAAAA:  
                      00586  PUSH
0038   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0039   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
003A   0008           00587  return
                      00588 
                      00589 
                      00590 
                      00591 
                      00592 #undefine margp2
                      00593 
                      00594 
                      00595 
                      00596 
                      00597 
                      00598 
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00599 
                      00600  
                      00601 
                      00602 
                      00603 
                      00604 ukrnl2 UDATA
0000                  00605 stack res HLOE_STACK_SIZE
                      00606  
                      00607 ukrnl3 UDATA 
0000                  00608 alt_stack res HLOE_STACK2_SIZE
                      00609  
                      00610 
                      00611 
                      00612 ukernl udata 
                      00613 
                      00614 
                      00615 
                      00616 
                      00617 
0000                  00618 hllblss00 res 1           
                      00619 #ifdef HLLMULTITASK
                      00620 #ifdef HLLGUARDhllblss
                      00621 hllblss00isr res 1      
                      00622 #endif
                      00623 #endif
                      00624 
0001                  00625 hllblss01 res 1    
                      00626 #ifdef HLLMULTITASK
                      00627 #ifdef HLLGUARDhllblss
                      00628 hllblss01isr res 1      
                      00629 #endif
                      00630 #endif
                      00631 
0002                  00632 hllblss02 res 1    
                      00633 #ifdef HLLMULTITASK
                      00634 #ifdef HLLGUARDhllblss
                      00635 hllblss02isr res 1      
                      00636 #endif
                      00637 #endif
                      00638   
                      00639 ukrshr udata_shr
                      00640 
                      00641 
0000                  00642 softstack0 res 1                
                      00643 #ifdef HLLMULTITASK
                      00644 softstack0isr res 1
                      00645 #endif
                      00646 
0001                  00647 softstack1 res 1                
                      00648 #ifdef HLLMULTITASK
                      00649 softstack1isr res 1
                      00650 #endif
                      00651 
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0002                  00652 softstack2 res 1                
                      00653 #ifdef HLLMULTITASK
                      00654 softstack2isr res 1
                      00655 #endif
                      00656 
0003                  00657 alt_fsr res 1
0004                  00658 W_Save res 1 
0005                  00659 STATUS_Save res 1
0006                  00660 FSR_Save res 1
0007                  00661 ALT_Save res 1
0008                  00662 in_isr res 1
                      00663 
                      00664 hllkrna00 CODE
                      00665 
                      00666  
                      00667 
                      00668 
                      00669 #define mterm hllblss00
                      00670 
                      00671 
0000                  00672 mul:  
                      00673 #ifdef HLLMULTITASK
                      00674 #ifdef HLLGUARDhllblss 
                      00675  movf in_isr,f  
                      00676  btfsc STATUS,Z
                      00677  
                      00678 
                      00679 
                      00680  goto mul0
                      00681 
                      00682  POP
                      00683  banksel mterm 
                      00684  movwf mterm
                      00685  clrw 
                      00686  addwf HLINDF,w 
                      00687  decf mterm,f 
                      00688  btfss STATUS,Z 
                      00689  goto $-3
                      00690  movwf HLINDF
                      00691  return
                      00692 
                      00693 
                      00694 
                      00695 #undefine mterm
                      00696 
                      00697 
                      00698 #define mterm hllblss00+1
                      00699 
                      00700 
                      00701 mul0:
                      00702 #endif
                      00703 #endif
                      00704 
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00705  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   ???? ????      00706  banksel mterm 
0004   00??           00707  movwf mterm
0005   0103           00708  clrw 
0006   0700           00709  addwf HLINDF,w 
0007   03??           00710  decf mterm,f 
0008   1D03           00711  btfss STATUS,Z 
0009   2???           00712  goto $-3
000A   0080           00713  movwf HLINDF
000B   0008           00714  return
                      00715 
                      00716 
                      00717 
                      00718 #undefine mterm
                      00719 hllkrna01 CODE
                      00720 
0000                  00721 add: 
                      00722  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   0700           00723  addwf HLINDF,w
0003   0384           00724  decf HLFSR,f 
                      00725  PUSH
0004   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0005   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0006   0008           00726  return
                      00727  
                      00728 hllkrna02 CODE 
                      00729 
0000                  00730 negti:  
0000   0980           00731  comf HLINDF,f
0001   0A80           00732  incf HLINDF,f
0002   0008           00733  return
                      00734  
                      00735 hllkrna03 CODE 
                      00736  
0000                  00737 printch:
                      00738  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
                      00739 #ifdef HLLMULTITASK 
                      00740  
                      00741  banksel PIR1
                      00742  btfss PIR1,TXIF  
                      00743  goto $-1 
                      00744 #endif 
                      00745  
0002   1283 1303      00746  banksel TXREG
0004   0099           00747  movwf TXREG  
                      00748  
0005   1283 1303      00749  banksel PIR1
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0007   1E0C           00750  btfss PIR1,TXIF  
0008   2???           00751  goto $-1  
0009   0008           00752  return  
                      00753 
                      00754 
                      00755 
                      00756 
                      00757 hllkrna04 CODE
                      00758  
                      00759 
                      00760 
                      00761 #define mterm hllblss00
                      00762 
                      00763 
                      00764 #define mdiv hllblss01
                      00765 
                      00766 
                      00767 #define mquot hllblss02
                      00768 
                      00769 
0000                  00770 modu:  
                      00771 #ifdef HLLMULTITASK
                      00772 #ifdef HLLGUARDhllblss 
                      00773  movf in_isr,f  
                      00774  btfsc STATUS,Z
                      00775  
                      00776 
                      00777 
                      00778  goto modu0
                      00779 
                      00780  banksel mquot 
                      00781  clrf mquot
                      00782  POP
                      00783  movwf mdiv
                      00784  POP
                      00785  movwf mterm
                      00786  movfw mdiv
                      00787  subwf mterm,f
                      00788  btfss STATUS,C 
                      00789  goto $+3
                      00790  incf mquot,f 
                      00791  goto $-4
                      00792  addwf mterm,w
                      00793  PUSH
                      00794  return 
                      00795 
                      00796 
                      00797 
                      00798 #undefine mterm
                      00799 
                      00800 
                      00801 #undefine mdiv
                      00802 
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00803 
                      00804 #undefine mquot
                      00805 
                      00806 
                      00807 #define mterm hllblss00+1
                      00808 
                      00809 
                      00810 #define mdiv hllblss01+1
                      00811 
                      00812 
                      00813 #define mquot hllblss02+1
                      00814 
                      00815 
                      00816 modu0:
                      00817 #endif
                      00818 #endif
                      00819 
0000   ???? ????      00820  banksel mquot 
0002   01??           00821  clrf mquot
                      00822  POP
0003   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0004   0384               M  decf FSR,f 
0005   00??           00823  movwf mdiv
                      00824  POP
0006   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0007   0384               M  decf FSR,f 
0008   00??           00825  movwf mterm
0009   08??           00826  movfw mdiv
000A   02??           00827  subwf mterm,f
000B   1C03           00828  btfss STATUS,C 
000C   2???           00829  goto $+3
000D   0A??           00830  incf mquot,f 
000E   2???           00831  goto $-4
000F   07??           00832  addwf mterm,w
                      00833  PUSH
0010   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0011   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0012   0008           00834  return 
                      00835 
                      00836 
                      00837 
                      00838 #undefine mterm
                      00839 
                      00840 
                      00841 #undefine mdiv
                      00842 
                      00843 
                      00844 #undefine mquot
                      00845 hllkrna05 CODE
                      00846 
                      00847 
                      00848 
                      00849 #define mterm hllblss00
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00850 
                      00851 
                      00852 #define mdiv hllblss01
                      00853 
                      00854 
                      00855 #define mquot hllblss02
                      00856 
                      00857 
0000                  00858 divu:  
                      00859 #ifdef HLLMULTITASK
                      00860 #ifdef HLLGUARDhllblss 
                      00861  movf in_isr,f  
                      00862  btfsc STATUS,Z
                      00863  
                      00864 
                      00865 
                      00866  goto divu0
                      00867 
                      00868  banksel mquot 
                      00869  clrf mquot
                      00870  POP
                      00871  movwf mdiv
                      00872  POP
                      00873  movwf mterm
                      00874  movfw mdiv
                      00875  subwf mterm,f
                      00876  btfss STATUS,C 
                      00877  goto $+3
                      00878  incf mquot,f 
                      00879  goto $-4
                      00880  movfw mquot
                      00881  PUSH
                      00882  return 
                      00883 
                      00884 
                      00885 
                      00886 #undefine mterm
                      00887 
                      00888 
                      00889 #undefine mdiv
                      00890 
                      00891 
                      00892 #undefine mquot
                      00893 
                      00894 
                      00895 #define mterm hllblss00+1
                      00896 
                      00897 
                      00898 #define mdiv hllblss01+1
                      00899 
                      00900 
                      00901 #define mquot hllblss02+1
                      00902 
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00903 
                      00904 divu0:
                      00905 #endif
                      00906 #endif
                      00907 
0000   ???? ????      00908  banksel mquot 
0002   01??           00909  clrf mquot
                      00910  POP
0003   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0004   0384               M  decf FSR,f 
0005   00??           00911  movwf mdiv
                      00912  POP
0006   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0007   0384               M  decf FSR,f 
0008   00??           00913  movwf mterm
0009   08??           00914  movfw mdiv
000A   02??           00915  subwf mterm,f
000B   1C03           00916  btfss STATUS,C 
000C   2???           00917  goto $+3
000D   0A??           00918  incf mquot,f 
000E   2???           00919  goto $-4
000F   08??           00920  movfw mquot
                      00921  PUSH
0010   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0011   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0012   0008           00922  return 
                      00923 
                      00924 
                      00925 
                      00926 #undefine mterm
                      00927 
                      00928 
                      00929 #undefine mdiv
                      00930 
                      00931 
                      00932 #undefine mquot
                      00933 hllkrna06 CODE
                      00934 
                      00935  
                      00936  
                      00937  
0000                  00938 getch:
0000   1283 1303      00939  banksel PIR1
0002                  00940 geth2: 
0002   1E8C           00941  btfss PIR1,RCIF
0003   2???           00942  goto geth2
0004   1283 1303      00943  banksel RCREG
0006   081A           00944  movf RCREG,w
                      00945  PUSH 
0007   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0008   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0009   0008           00946  return
                      00947  
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00948 hllkrna07 CODE 
                      00949  
0000                  00950 eq: 
                      00951  POP 
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   0600           00952  xorwf HLINDF,w
0003   3001           00953  movlw .1 
0004   1D03           00954  btfss STATUS,Z
0005   3000           00955  movlw .0 
0006   0384           00956  decf HLFSR,f 
                      00957  PUSH 
0007   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0008   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0009   0008           00958  return
                      00959  
                      00960  
                      00961  
                      00962 
                      00963 #define sstack0 softstack0 
                      00964 #define sstack1 softstack1 
                      00965 #define sstack2 softstack2 
                      00966 
                      00967 hllparmcore macro 
                      00968  movwf sstack2
                      00969  movfw HLFSR 
                      00970            
                      00971                    
                      00972  movwf sstack0
                      00973  movfw HLINDF
                      00974  
                      00975  subwf sstack2,w
                      00976  movwf HLFSR 
                      00977  movfw HLINDF 
                      00978  
                      00979  movwf sstack1
                      00980  
                      00981  movfw sstack0
                      00982  movwf HLFSR 
                      00983  clrf sstack0
                      00984  movfw sstack1 
                      00985  movwf HLINDF
                      00986  
                      00987  movfw sstack2
                      00988  pagesel kpush
                      00989  goto kpush 
                      00990  endm
                      00991 
                      00992  
                      00993 hllkrna08 CODE  
0000                  00994 parm:
                      00995  KPOP 
0000   ????               M  bankisel alt_stack ;This is OK for interrupts... part of STATUS 
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0001   08??               M  movf in_isr,f ;In shared RAM, no need for BANKSEL
0002   1903               M  btfsc STATUS,Z
0003   2???               M  goto $+0F
0004   0804               M  movfw FSR 
0005   00??               M  movwf softstack0+1 ;Save user stack ptr 
0006   08??               M  movfw alt_fsr ;Get second stack ptr 
0007   0084               M  movwf FSR 
0008   0800               M  movfw INDF ;Dereference it 
0009   0384               M  decf FSR,f ;Decrement it 
000A   00??               M  movwf softstack1+1  ;Save popped value for ret urn 
000B   0804               M  movfw FSR ;Save second stack ptr 
000C   00??               M  movwf alt_fsr 
000D   08??               M  movfw softstack0+1  ;Restore user stack ptr 
000E   0084               M  movwf FSR 
000F   01??               M  clrf softstack0+1
0010   08??               M  movfw softstack1+1  ;Bring back popped value for ret urn 
0011   2???               M  goto $+0E
0012   0804               M  movfw FSR 
0013   00??               M  movwf softstack0 ;Save user stack ptr 
0014   08??               M  movfw alt_fsr ;Get second stack ptr 
0015   0084               M  movwf FSR 
0016   0800               M  movfw INDF ;Dereference it 
0017   0384               M  decf FSR,f ;Decrement it 
0018   00??               M  movwf softstack1  ;Save popped value for ret urn 
0019   0804               M  movfw FSR ;Save second stack ptr 
001A   00??               M  movwf alt_fsr 
001B   08??               M  movfw softstack0  ;Restore user stack ptr 
001C   0084               M  movwf FSR 
001D   01??               M  clrf softstack0
001E   08??               M  movfw softstack1  ;Bring back popped value for ret urn 
001F   ????               M  bankisel stack
                      00996  
                      00997 #ifdef HLLMULTITASK 
                      00998  movf in_isr,f 
                      00999  btfss STATUS,Z
                      01000  goto parm4
                      01001  hllparmcore
                      01002 #undefine sstack0 
                      01003 #undefine sstack1
                      01004 #undefine sstack2 
                      01005 #define sstack0 softstack0+1
                      01006 #define sstack1 softstack1+1
                      01007 #define sstack2 softstack2+1
                      01008 parm4:
                      01009 #endif 
                      01010  hllparmcore
0020   00??               M  movwf sstack2
0021   0804               M  movfw HLFSR 
                          M            
                          M                    
0022   00??               M  movwf sstack0
0023   0800               M  movfw HLINDF
                          M  
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0024   02??               M  subwf sstack2,w
0025   0084               M  movwf HLFSR 
0026   0800               M  movfw HLINDF 
                          M  
0027   00??               M  movwf sstack1
                          M  
0028   08??               M  movfw sstack0
0029   0084               M  movwf HLFSR 
002A   01??               M  clrf sstack0
002B   08??               M  movfw sstack1 
002C   0080               M  movwf HLINDF
                          M  
002D   08??               M  movfw sstack2
002E   ????               M  pagesel kpush
002F   2???               M  goto kpush 
                      01011 #undefine sstack0 
                      01012 #undefine sstack1
                      01013 #undefine sstack2 
                      01014  
                      01015 hllkrna09 CODE  
0000                  01016 kpop: 
                      01017  KPOP
0000   ????               M  bankisel alt_stack ;This is OK for interrupts... part of STATUS 
0001   08??               M  movf in_isr,f ;In shared RAM, no need for BANKSEL
0002   1903               M  btfsc STATUS,Z
0003   2???               M  goto $+0F
0004   0804               M  movfw FSR 
0005   00??               M  movwf softstack0+1 ;Save user stack ptr 
0006   08??               M  movfw alt_fsr ;Get second stack ptr 
0007   0084               M  movwf FSR 
0008   0800               M  movfw INDF ;Dereference it 
0009   0384               M  decf FSR,f ;Decrement it 
000A   00??               M  movwf softstack1+1  ;Save popped value for ret urn 
000B   0804               M  movfw FSR ;Save second stack ptr 
000C   00??               M  movwf alt_fsr 
000D   08??               M  movfw softstack0+1  ;Restore user stack ptr 
000E   0084               M  movwf FSR 
000F   01??               M  clrf softstack0+1
0010   08??               M  movfw softstack1+1  ;Bring back popped value for ret urn 
0011   2???               M  goto $+0E
0012   0804               M  movfw FSR 
0013   00??               M  movwf softstack0 ;Save user stack ptr 
0014   08??               M  movfw alt_fsr ;Get second stack ptr 
0015   0084               M  movwf FSR 
0016   0800               M  movfw INDF ;Dereference it 
0017   0384               M  decf FSR,f ;Decrement it 
0018   00??               M  movwf softstack1  ;Save popped value for ret urn 
0019   0804               M  movfw FSR ;Save second stack ptr 
001A   00??               M  movwf alt_fsr 
001B   08??               M  movfw softstack0  ;Restore user stack ptr 
001C   0084               M  movwf FSR 
001D   01??               M  clrf softstack0
001E   08??               M  movfw softstack1  ;Bring back popped value for ret urn 
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001F   ????               M  bankisel stack
0020   0008           01018  return 
                      01019  
                      01020 hllkrna10 CODE   
0000                  01021 kpush: 
                      01022  KPUSH
0000   ????               M  bankisel alt_stack ;This is OK for interrupts... part of STATUS 
0001   08??               M  movf in_isr,f ;In shared RAM, no need for BANKSEL
0002   1903               M  btfsc STATUS,Z
0003   2???               M  goto $+0E
0004   00??               M  movwf softstack1+1 ;softstack1 holds parm value being pushed
0005   0804               M  movfw FSR  
0006   00??               M  movwf softstack0+1  ;softstack0 holds FSR
0007   08??               M  movfw alt_fsr 
0008   0084               M  movwf FSR 
0009   08??               M  movfw softstack1+1
000A   0A??               M  incf alt_fsr,f 
000B   0A84               M  incf FSR,f ;The actual kernel push... preincrement for interrupt safety
000C   0080               M  movwf INDF 
000D   08??               M  movfw softstack0+1
000E   0084               M  movwf FSR 
000F   01??               M  clrf softstack0+1 
0010   2???               M  goto $+0D
0011   00??               M  movwf softstack1 ;softstack1 holds parm value being pushed
0012   0804               M  movfw FSR  
0013   00??               M  movwf softstack0  ;softstack0 holds FSR
0014   08??               M  movfw alt_fsr 
0015   0084               M  movwf FSR 
0016   08??               M  movfw softstack1
0017   0A??               M  incf alt_fsr,f 
0018   0A84               M  incf FSR,f ;The actual kernel push... preincrement for interrupt safety
0019   0080               M  movwf INDF 
001A   08??               M  movfw softstack0
001B   0084               M  movwf FSR 
001C   01??               M  clrf softstack0
001D   ????               M  bankisel stack
001E   0008           01023  return
                      01024 
                      01025 hllkrna11 CODE   
0000                  01026 dispose:
                      01027  DISCARD
0000   0384               M  decf FSR,f 
0001   0008           01028  return 
                      01029  
                      01030  
                      01031 
                      01032 
                      01033 
                      01034 
                      01035 
                      01036 
                      01037  
                      01038  
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01039 
                      01040  
                      01041 hlog1d CODE
                      01042 
0000                  01043 oru: 
                      01044  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   0400           01045  iorwf HLINDF,w
0003   0384           01046  decf HLFSR,f 
                      01047  PUSH
0004   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0005   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0006   0008           01048  return
                      01049 
                      01050  
                      01051 
                      01052 
                      01053 
                      01054 
                      01055 
                      01056  
                      01057  
                      01058 
                      01059  
                      01060 hlog1b CODE
                      01061 
                      01062 
                      01063 #define margp2 hllblss00
                      01064 
                      01065 
0000                  01066 setbit:  
                      01067 #ifdef HLLMULTITASK
                      01068 #ifdef HLLGUARDhllblss 
                      01069  movf in_isr,f  
                      01070  btfsc STATUS,Z
                      01071  
                      01072 
                      01073 
                      01074  goto setbit0
                      01075 
                      01076  POP
                      01077  banksel margp2
                      01078  movwf  margp2
                      01079  POP
                      01080  xorlw .0
                      01081  btfss STATUS,Z
                      01082  goto tcf00h
                      01083  
                      01084  movfw  margp2
                      01085  iorlw .1
                      01086  goto tcf99h
                      01087 tcf00h: 
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01088  
                      01089  xorlw .1
                      01090  btfss STATUS,Z
                      01091  goto tcf01h
                      01092  
                      01093  movfw  margp2
                      01094  iorlw .2
                      01095  goto tcf99h
                      01096 tcf01h: 
                      01097  xorlw .1
                      01098  xorlw .2
                      01099  btfss STATUS,Z
                      01100  goto tcf02h
                      01101  
                      01102  movfw margp2
                      01103  iorlw .4
                      01104  goto tcf99h
                      01105 tcf02h: 
                      01106  xorlw .2
                      01107  xorlw .3
                      01108  btfss STATUS,Z
                      01109  goto tcf03h
                      01110  
                      01111  movfw margp2
                      01112  iorlw .8
                      01113  goto tcf99h
                      01114 tcf03h: 
                      01115  xorlw .3
                      01116  xorlw .4
                      01117  btfss STATUS,Z
                      01118  goto tcf04h
                      01119  
                      01120  movfw margp2
                      01121  iorlw .16
                      01122  goto tcf99h
                      01123 tcf04h: 
                      01124  xorlw .4
                      01125  xorlw .5
                      01126  btfss STATUS,Z
                      01127  goto tcf05h
                      01128  
                      01129  movfw margp2
                      01130  iorlw .32
                      01131  goto tcf99h
                      01132 tcf05h: 
                      01133  xorlw .5
                      01134  xorlw .6
                      01135  btfss STATUS,Z
                      01136  goto tcf07h
                      01137  
                      01138  movfw margp2
                      01139  iorlw .64
                      01140  goto tcf99h
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01141 tcf07h: 
                      01142  
                      01143  movfw margp2
                      01144  iorlw .128 
                      01145 tcf99h:  
                      01146  PUSH 
                      01147  return
                      01148 
                      01149 
                      01150 
                      01151 
                      01152 #undefine margp2
                      01153 
                      01154 
                      01155 #define margp2 hllblss00+1
                      01156 
                      01157 
                      01158 setbit0:
                      01159 #endif
                      01160 #endif
                      01161 
                      01162  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   ???? ????      01163  banksel margp2
0004   00??           01164  movwf  margp2
                      01165  POP
0005   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0006   0384               M  decf FSR,f 
0007   3A00           01166  xorlw .0
0008   1D03           01167  btfss STATUS,Z
0009   2???           01168  goto hllIAAAA
                      01169  
000A   08??           01170  movfw  margp2
000B   3801           01171  iorlw .1
000C   2???           01172  goto hllPAAAA
000D                  01173 hllIAAAA: 
                      01174  
000D   3A01           01175  xorlw .1
000E   1D03           01176  btfss STATUS,Z
000F   2???           01177  goto hllJAAAA
                      01178  
0010   08??           01179  movfw  margp2
0011   3802           01180  iorlw .2
0012   2???           01181  goto hllPAAAA
0013                  01182 hllJAAAA: 
0013   3A01           01183  xorlw .1
0014   3A02           01184  xorlw .2
0015   1D03           01185  btfss STATUS,Z
0016   2???           01186  goto hllKAAAA
                      01187  
0017   08??           01188  movfw margp2
0018   3804           01189  iorlw .4
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0019   2???           01190  goto hllPAAAA
001A                  01191 hllKAAAA: 
001A   3A02           01192  xorlw .2
001B   3A03           01193  xorlw .3
001C   1D03           01194  btfss STATUS,Z
001D   2???           01195  goto hllLAAAA
                      01196  
001E   08??           01197  movfw margp2
001F   3808           01198  iorlw .8
0020   2???           01199  goto hllPAAAA
0021                  01200 hllLAAAA: 
0021   3A03           01201  xorlw .3
0022   3A04           01202  xorlw .4
0023   1D03           01203  btfss STATUS,Z
0024   2???           01204  goto hllMAAAA
                      01205  
0025   08??           01206  movfw margp2
0026   3810           01207  iorlw .16
0027   2???           01208  goto hllPAAAA
0028                  01209 hllMAAAA: 
0028   3A04           01210  xorlw .4
0029   3A05           01211  xorlw .5
002A   1D03           01212  btfss STATUS,Z
002B   2???           01213  goto hllNAAAA
                      01214  
002C   08??           01215  movfw margp2
002D   3820           01216  iorlw .32
002E   2???           01217  goto hllPAAAA
002F                  01218 hllNAAAA: 
002F   3A05           01219  xorlw .5
0030   3A06           01220  xorlw .6
0031   1D03           01221  btfss STATUS,Z
0032   2???           01222  goto hllOAAAA
                      01223  
0033   08??           01224  movfw margp2
0034   3840           01225  iorlw .64
0035   2???           01226  goto hllPAAAA
0036                  01227 hllOAAAA: 
                      01228  
0036   08??           01229  movfw margp2
0037   3880           01230  iorlw .128 
0038                  01231 hllPAAAA:  
                      01232  PUSH 
0038   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0039   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
003A   0008           01233  return
                      01234 
                      01235 
                      01236 
                      01237 
                      01238 #undefine margp2
                      01239 
                      01240  end
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 34


SYMBOL TABLE
  LABEL                             VALUE 

ABDEN                             00000000
ABDOVF                            00000007
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000004
ADCS1                             00000005
ADCS2                             00000006
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
ALT_Save                          00000007
ANS0                              00000000
ANS1                              00000001
ANS10                             00000002
ANS11                             00000003
ANS2                              00000002
ANS3                              00000003
ANS4                              00000004
ANS5                              00000005
ANS6                              00000006
ANS7                              00000007
ANS8                              00000000
ANS9                              00000001
ANSEL                             0000011E
ANSELH                            0000011F
BAUDCTL                           0000009B
BF                                00000000
BRG0                              00000000
BRG1                              00000001
BRG10                             00000002
BRG11                             00000003
BRG12                             00000004
BRG13                             00000005
BRG14                             00000006
BRG15                             00000007
BRG16                             00000003
BRG2                              00000002
BRG3                              00000003
BRG4                              00000004
BRG5                              00000005
BRG6                              00000006
BRG7                              00000007
BRG8                              00000000
BRG9                              00000001
BRGH                              00000002
C                                 00000000
C1CH0                             00000000
C1CH1                             00000001
C1IE                              00000005
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 35


SYMBOL TABLE
  LABEL                             VALUE 

C1IF                              00000005
C1OE                              00000005
C1ON                              00000007
C1OUT                             00000006
C1POL                             00000004
C1R                               00000002
C1SEN                             00000005
C1VREN                            00000007
C2CH0                             00000000
C2CH1                             00000001
C2IE                              00000006
C2IF                              00000006
C2OE                              00000005
C2ON                              00000007
C2OUT                             00000006
C2POL                             00000004
C2R                               00000002
C2REN                             00000004
C2SYNC                            00000000
C2VREN                            00000006
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCPR1H                            00000016
CCPR1L                            00000015
CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CKE                               00000006
CKP                               00000004
CM1CON0                           00000119
CM2CON0                           0000011A
CM2CON1                           0000011B
COPY                              
CREN                              00000004
CSRC                              00000007
D                                 00000005
DATA_ADDRESS                      00000005
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DISCARD                           
D_A                               00000005
ECCPAS                            0000001D
ECCPAS0                           00000004
ECCPAS1                           00000005
ECCPAS2                           00000006
ECCPASE                           00000007
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 36


SYMBOL TABLE
  LABEL                             VALUE 

EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDAT                             0000010C
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
F                                 00000001
FAR_CALL                          
FERR                              00000002
FSR                               00000004
FSR_Save                          00000006
GIE                               00000007
GO                                00000001
GO_DONE                           00000001
HALF_FAR_CALL                     
HLFSR                             FSR
HLINDF                            INDF
HLLGUARDhllblss                   
HLOE_STACK2_SIZE                  .20
HLOE_STACK_SIZE                   .80
HLTABLE                           
HTS                               00000002
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IOC                               00000096
IOC0                              00000000
IOC1                              00000001
IOC2                              00000002
IOC3                              00000003
IOC4                              00000004
IOC5                              00000005
IOCA                              00000096
IOCA0                             00000000
IOCA1                             00000001
IOCA2                             00000002
IOCA3                             00000003
IOCA4                             00000004
IOCA5                             00000005
IOCB                              00000116
IOCB4                             00000004
IOCB5                             00000005
IOCB6                             00000006
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 37


SYMBOL TABLE
  LABEL                             VALUE 

IOCB7                             00000007
IRCF0                             00000004
IRCF1                             00000005
IRCF2                             00000006
IRP                               00000007
KDISCARD                          
KPOP                              
KPUSH                             
LSHIFT                            
LTS                               00000001
MC1OUT                            00000007
MC2OUT                            00000006
MSK                               00000093
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BOR                           00000000
NOT_DONE                          00000001
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RABPU                         00000007
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_W                             00000002
NOT_WRITE                         00000002
OERR                              00000001
OPTION_REG                        00000081
OSCCON                            0000008F
OSCTUNE                           00000090
OSFIE                             00000007
OSFIF                             00000007
OSTS                              00000003
P                                 00000004
P1M0                              00000006
P1M1                              00000007
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PC_Save                           00000001
PDC0                              00000000
PDC1                              00000001
PDC2                              00000002
PDC3                              00000003
PDC4                              00000004
PDC5                              00000005
PDC6                              00000006
PEIE                              00000006
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
POP                               
PORTA                             00000005
PORTB                             00000006
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 38


SYMBOL TABLE
  LABEL                             VALUE 

PORTC                             00000007
PR2                               00000092
PREEMPT                           
PRSEN                             00000007
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSSAC0                            00000002
PSSAC1                            00000003
PSSBD0                            00000000
PSSBD1                            00000001
PSTRCON                           0000019D
PULSR                             00000002
PULSS                             00000003
PUSH                              
PWM1CON                           0000001C
R                                 00000002
RABIE                             00000003
RABIF                             00000000
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
READ_WRITE                        00000002
RESUME                            
RP0                               00000005
RP1                               00000006
RSHIFT                            
RX9                               00000006
RX9D                              00000000
R_W                               00000002
S                                 00000003
SBOREN                            00000004
SCKP                              00000004
SCS                               00000000
SENB                              00000003
SMP                               00000007
SPBRG                             00000099
SPBRGH                            0000009A
SPEN                              00000007
SR0                               00000006
SR1                               00000007
SRCON                             0000019E
SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 39


SYMBOL TABLE
  LABEL                             VALUE 

SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPMSK                            00000093
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
STATUS_Save                       00000005
STRA                              00000000
STRB                              00000001
STRC                              00000002
STRD                              00000003
STRSYNC                           00000004
SWDTEN                            00000000
SYNC                              00000004
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1GINV                            00000007
T1GSS                             00000001
T1IE                              00000000
T1IF                              00000000
T1OSCEN                           00000003
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
T2IE                              00000001
T2IF                              00000001
TMR0                              00000001
TMR1CS                            00000001
TMR1GE                            00000006
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 40


SYMBOL TABLE
  LABEL                             VALUE 

TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000086
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRMT                              00000001
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
TUN3                              00000003
TUN4                              00000004
TX9                               00000006
TX9D                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
UA                                00000001
ULPWUE                            00000005
VCFG                              00000006
VP6EN                             00000004
VR0                               00000000
VR1                               00000001
VR2                               00000002
VR3                               00000003
VRCON                             00000118
VRR                               00000005
W                                 00000000
WCOL                              00000007
WDTCON                            00000097
WDTPS0                            00000001
WDTPS1                            00000002
WDTPS2                            00000003
WDTPS3                            00000004
WPU                               00000095
WPUA                              00000095
WPUA0                             00000000
WPUA1                             00000001
WPUA2                             00000002
WPUA4                             00000004
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 41


SYMBOL TABLE
  LABEL                             VALUE 

WPUA5                             00000005
WPUB                              00000115
WPUB4                             00000004
WPUB5                             00000005
WPUB6                             00000006
WPUB7                             00000007
WR                                00000001
WREN                              00000002
WRERR                             00000003
WUE                               00000001
W_Save                            00000004
Z                                 00000002
_BOR_NSLEEP                       00003EFF
_BOR_OFF                          00003CFF
_BOR_ON                           00003FFF
_BOR_SBODEN                       00003DFF
_CPD_OFF                          00003FFF
_CPD_ON                           00003F7F
_CP_OFF                           00003FFF
_CP_ON                            00003FBF
_EC_OSC                           00003FFB
_EXTRC                            00003FFF
_EXTRCIO                          00003FFE
_EXTRC_OSC_CLKOUT                 00003FFF
_EXTRC_OSC_NOCLKOUT               00003FFE
_FCMEN_OFF                        000037FF
_FCMEN_ON                         00003FFF
_HS_OSC                           00003FFA
_IESO_OFF                         00003BFF
_IESO_ON                          00003FFF
_INTOSC                           00003FFD
_INTOSCIO                         00003FFC
_INTRC_OSC_CLKOUT                 00003FFD
_INTRC_OSC_NOCLKOUT               00003FFC
_LP_OSC                           00003FF8
_MCLRE_OFF                        00003FDF
_MCLRE_ON                         00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FEF
_WDT_OFF                          00003FF7
_WDT_ON                           00003FFF
_XT_OSC                           00003FF9
__16F690                          00000001
_hllkrna00_0009                   00000009
_hllkrna03_0008                   00000008
_hllkrna04_000C                   0000000C
_hllkrna04_000E                   0000000E
_hllkrna05_000C                   0000000C
_hllkrna05_000E                   0000000E
_hllkrna08_0003                   00000003
_hllkrna08_0011                   00000011
_hllkrna09_0003                   00000003
_hllkrna09_0011                   00000011
MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 42


SYMBOL TABLE
  LABEL                             VALUE 

_hllkrna10_0003                   00000003
_hllkrna10_0010                   00000010
add                               00000000
alt_fsr                           00000003
alt_stack                         00000000
clearbit                          00000000
dispose                           00000000
divu                              00000000
eq                                00000000
getch                             00000000
geth2                             00000002
hllAAAAA                          0000000D
hllBAAAA                          00000013
hllCAAAA                          0000001A
hllDAAAA                          00000021
hllEAAAA                          00000028
hllFAAAA                          0000002F
hllGAAAA                          00000036
hllHAAAA                          00000038
hllIAAAA                          0000000D
hllJAAAA                          00000013
hllKAAAA                          0000001A
hllLAAAA                          00000021
hllMAAAA                          00000028
hllNAAAA                          0000002F
hllOAAAA                          00000036
hllPAAAA                          00000038
hllblss00                         00000000
hllblss01                         00000001
hllblss02                         00000002
hllparmcore                       
hllprgen2                         000000E7
hllprogend                        000000E6
hlluserprog                       00000000
hloego                            00000000
in_isr                            00000008
kpop                              00000000
kpush                             00000000
modu                              00000000
mul                               00000000
negti                             00000000
oru                               00000000
parm                              00000000
pbase                             00000000
printch                           00000000
setbit                            00000000
softstack0                        00000000
softstack1                        00000001
softstack2                        00000002
stack                             00000000

MPASM  5.14                        TARGET.ASM   7-7-2019  20:18:52         PAGE 43





Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,    14 suppressed

