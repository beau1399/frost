/
/ GPS to UART program
/ Latitude only for now
/ On start, pauses until position fix obtained
/ Continues to print position once fix is obtained; if fix is lost,
/  last fix will keep printing
/ Fractional part of minutes are smoothing while continuously fixed
/

/// Directives ////////////////////////////////////////////////////////////

calls andb,geu,utof,addf,printf,printu,mulf,divf,iszerof,notb,iszerof,writeeeprom,readeeprom,debugptru

altstack is 80

var isgll,latmin,lonmin,scaler,temp,tempb,latfiltervalid,lonfiltervalid,fix,ptr

macro filter-factor is 0.5 end macro
macro one-minus-filter is 0.5 end macro

/// event() ///////////////////////////////////////////////////////////////

event 1 is
 .add[1 @scaler] > scaler
 if .andb[ @fix .eq[20 @scaler]],
  0 > scaler
  .printf[.readeeprom[0] .readeeprom[1]]
  .printch['+']  .printch['(']  .printch['(']
  .printf[.readeeprom[2] .readeeprom[3]]
  .printch['+']
  .printf[.readeeprom[4] .readeeprom[5]]
  .printch[')']  .printch['/']  .printch['6']  .printch['0']   .printch[')']   .printch['=']
  .printch[13].printch[10]
  .printf[.readeeprom[6] .readeeprom[7]]
  .printch['+']  .printch['(']  .printch['(']
  .printf[.readeeprom[8] .readeeprom[9]]
  .printch['+']
  .printf[.readeeprom[10] .readeeprom[11]]
  .printch[')']  .printch['/']  .printch['6']  .printch['0']   .printch[')']   .printch['=']
  .printch[13].printch[10]
  ,,
  .clearbit[1 @porta] > porta /Turn OFF light
  16 > iocbp /Interrupt on B4 change back on
;

event b is
 0 > iocbp /Interrupt on B4 change off for hysteresis
 .setbit[1 @porta] > porta /Turn ON light
 /TODO
; 

/// main() ////////////////////////////////////////////////////////////////

0 > latfiltervalid 0 > lonfiltervalid
0 > fix
0 > ptr
insert clock
frost9600baud
/For MAX-232. We are using a 5V-to-RS232 bridge so we don't need tricks to make serial work.
.clearbit[sckp @baudcon] > baudcon
0 > isgll
0 > scaler
/ Start the 6hz timer

/ Global weak pull-up enabled... button will ground out B4
/ 7 is "not WPUEN"... not sure of friendly name
.clearbit[7 @option-reg] > option-reg 

/ Interrupts on, Interrupt-on-Change on
.setbit[gie .setbit[iocie @intcon]] > intcon

16 > iocbp /Interrupt on B4 change
16 > trisb /B4 is input
0 > anselb /B all digital
16 > wpub  /Pull B4 high

0 > trisa  /A is output
0 > ansela /A is digital

insert slowtimer
insert starttimer

.mainloop[]

/// functions //////////////////////////////////////////////////////////////

d .mainloop is
 .dofunc[]
 .mainloop[]
;

d .dofunc 0 0 is
 .receive[0 .getch[] 1]
;

macro readchar is
 .parm[0]>temp .dispose[] .receive[.getch[] .add[1 @temp]]
end macro

d .receive * is
 if .eq[.parm[1] ','],  

////////////// COMMA HANDLER ////
     if .geu[@isgll 2],   /Are we working through the middle of a GLL string?

        /Yes; the 1 below is to force a real call vs. tail recursion.
        / We need to actually return here once required units have been read so that
        / we don't reach function bottom and return to dofunc early.
        .add[-1 @isgll]>isgll  readchar 1 , 

        /No; but are we at the end of a GLL string?
        if .eq[@isgll 1],
               /Yes... process!
               0>isgll .purge[],
               /Not in GLL string... look for new GLL string (or do nothing & continue if not found)
               if .andb[.eq[.parm[2] 'L']  .eq[.parm[3] 'L']],4>isgll,,,,,
////////////////////////////////
 
 /Didn't find comma this character
 if .geu[.parm[0] 28], 0 > latfiltervalid 0 > lonfiltervalid, readchar,,  /Just accumulate, unless GLL hasn't been timely

 /If we are here we have amassed 28 characters w/o getting a position, and will
 /  return and discard the accumulated stack. IS THIS TRUE - COUNTEREXAMPLE IS 'ORDINARY' NON-GLL COMMA?
;

d .swapp 2 2 is
 .parm[0] .parm[1]
;

// GLL input processor /////////
d .purge * is
 if .eq[.parm[0] 27],

  / Push lat. degrees
  .addf[
   .addf[0.0
     .mulf[10.0 .utof[.add[.mul[-1 '0'].parm[27]]] ] ]
     .utof[.add[.mul[-1 '0'].parm[26]]]
   ] 


  / Get lat. minutes
  .addf[
   .addf[0.0
     .mulf[10.0 .utof[.add[.mul[-1 '0'].parm[25]]] ] ]
     .utof[.add[.mul[-1 '0'].parm[24]]]
  ]  > tempb > temp

  /Examine mantissa of lat. minutes (middle of the three terms in
  / order of significance) and bust smooting if there was a
  / change.
  if .eq[@temp @latmin],, 0 > latfiltervalid,

  / Save to check for future minute changes, which should "bust" smoothing
  @temp  > latmin 

  / Push lat. minutes
  @temp @tempb





  / Get lat. fractional minutes
  .divf[.addf[.addf[.addf[ .addf[ .addf[0.0
     .mulf[10000.0 .utof[.add[.mul[-1 '0'].parm[22]]]]  ]
     .mulf[1000.0 .utof[.add[.mul[-1 '0'].parm[21]]]]   ]
     .mulf[100.0 .utof[.add[.mul[-1 '0'].parm[20]]]]    ]
     .mulf[10.0 .utof[.add[.mul[-1 '0'].parm[19]]]]     ]
     .utof[.add[.mul[-1 '0'].parm[18]]]]
     100000.0]
  > tempb > temp

  / Maybe apply smooting to lat. fractional minutes
  if @latfiltervalid,
    .addf[  /Active fix available... smooth
     .mulf[one-minus-filter @temp @tempb]
     .mulf[filter-factor .readeeprom[4] .readeeprom[5]]]  , />l
    /No continuous fix; don't smooth, just push latest values
    @temp @tempb,




  / Push long. degrees
  .addf[
  .addf[
   .addf[0.0
      .mulf[100.0 .utof[.add[.mul[-1 '0'].parm[14]]] ] ]
     .mulf[10.0 .utof[.add[.mul[-1 '0'].parm[13]]] ] ]
     .utof[.add[.mul[-1 '0'].parm[12]]]
   ]










  / Get long. minutes
  .addf[
   .addf[0.0
     .mulf[10.0 .utof[.add[.mul[-1 '0'].parm[11]]] ] ]
     .utof[.add[.mul[-1 '0'].parm[10]]]
  ] > tempb > temp

  /Examine mantissa of lon. minutes (middle of the three terms in
  / order of significance) and bust smoothing if there was a
  / change.
  if .eq[@temp @lonmin],, 0 > lonfiltervalid,

  / Save to check for future minute changes, which should "bust" smoothing
  @temp  > lonmin 

  / Push long. minutes
  @temp @tempb


/ Get long. fractional minutes
  .divf[.addf[.addf[.addf[ .addf[ .addf[0.0
     .mulf[10000.0 .utof[.add[.mul[-1 '0'].parm[8]]]]]
     .mulf[1000.0 .utof[.add[.mul[-1 '0'].parm[7]]]]]
     .mulf[100.0 .utof[.add[.mul[-1 '0'].parm[6]]]]]
     .mulf[10.0 .utof[.add[.mul[-1 '0'].parm[5]]]]]
     .utof[.add[.mul[-1 '0'].parm[4]]]] 100000.0]
   > tempb > temp

  / Maybe smooth long. fractional minutes 
  if @lonfiltervalid,
    .addf[  /Active fix available... smooth
     .mulf[one-minus-filter @temp @tempb]
     .mulf[filter-factor .readeeprom[10] .readeeprom[11]]] ,
    /No continuous fix; don't smooth
    @temp @tempb,

  1 > lonfiltervalid 1 > latfiltervalid 1 > fix

/   .writeeeprom[.swapp[.add[@ptr 11]]]
/  ...
/   .writeeeprom[.swapp[.add[@ptr 0]]] /,,

/  if .eq[1 0],
   pos2rom(11)
/,,

  , /If arg count is not correct (27), do nothing
 ,
;

macro pos2rom is 
 .writeeeprom[.swapp[.add[@ptr $0]]]
 when! $0 0
  pos2rom ($0-)
 end!
end macro  
