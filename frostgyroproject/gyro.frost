macro networkretries is 5 end macro

macro centerx is 512.0 end macro
macro maxcommandx is 650.0 end macro
macro mincommandx is 375.0 end macro
macro ptermx is 2.5 end macro
macro itermx is 1.0 end macro
macro dtermx is -0.85 end macro
macro maxix is 150.0 end macro
macro minix is 150.0 end macro

macro centery is 512.0 end macro
macro maxcommandy is 650.0 end macro
macro mincommandy is 375.0 end macro
macro ptermy is 2.5 end macro
macro itermy is 1.0 end macro
macro dtermy is -0.85 end macro
macro maxiy is 150.0 end macro
macro miniy is 150.0 end macro

calls printu,notb,addf,gtf,andb,orb
altstack is 80
var scaler,ym,ye,xm,xe,zeroxm,zeroxe,zeroym,zeroye,init,errorxm,errorxe,
    errorym,errorye,tempm,tempe,commandxm,commandxe,commandym,commandye

.clearbit[2 @trisa] > trisa
.clearbit[2 @ansela] > ansela
.clearbit[2 @porta] > porta

0.0 > commandxe > commandxm
0.0 > commandye > commandym
0.0 > errorxe > errorxm
0.0 > errorye > errorym
insert clock
.clearbit[gie @intcon] > intcon
.clearbit[sspen @ssp1con1] > ssp1con1



8 > ssp1con1   		    /I2C master mode
0 > ssp1con2		    /Default settings
19 > ssp1add  		    /32000000/(4*(1+SSPADD)); 19 -> 400k; Slow for now
18 > trisb		    /SCL and SDA as inputs
.clearbit[ansb4 @anselb] > anselb    /SCL and SDA non-analog
.clearbit[ansb1 @anselb] > anselb
.setbit[scie .setbit[pcie @ssp1con3]] > ssp1con3	/Start and Stop bit flagging on
.setbit[sspen @ssp1con1] > ssp1con1   /Start I2C

/Not sure why but PWM doesn't work w/o these two calls
.setbit[txen @txsta] > txsta
.setbit[spen @rcsta] > rcsta
/frost9600baud

.iicstart[]
.clearinterrupt[]
.checkack[]
210 > ssp1buf
.clearinterrupt[]
.checkack[]
107 > ssp1buf
.clearinterrupt[]
.checkack[]
0 > ssp1buf		/I think this is necess. to turn on the internal clock
.clearinterrupt[]
.checkack[]
.iicend[]
.clearinterrupt[]
/.awaitin[255]


.iicstart[]
.clearinterrupt[]
.checkack[]
210 > ssp1buf
.clearinterrupt[]
.checkack[]
26 > ssp1buf      
.clearinterrupt[]
.checkack[]
6 > ssp1buf		/Low-pass filter (6 is max)
.clearinterrupt[]
.checkack[]
.iicend[]
.clearinterrupt[]
/.awaitin[255]
.pwm1on[] 
.pwm2on[] 
.command[centerx 1]
.command[centery 0]


/.setbit[2 @porta] > porta            /DEBUG


.await[]
.samplex[]
.sampley[]
.mulf[-1.0 @xm @xe] > zeroxe > zeroxm
.mulf[-1.0 @ym @ye] > zeroye > zeroym
ffor(.avgzero[])(3)


/.setbit[2 @porta] > porta            /DEBUG

/.clearbit[3 @trisa] > trisa 
/.clearbit[3 @ansela] > ansela
/.setbit[3 @porta] > porta /Turn on LED for debugging

.loop[]

////////////////////////////////////////////////////

d .await * is
 .awaitin[255]
 if .notb[ .parm[0] ],,.add[-1] .await[],
;

d .awaitin * is
 if .notb[ .parm[0] ],.dispose[],.add[-1] .awaitin[],
;

d .loop is
 .samplex[]
 .sampley[]





 .addf[ @zeroxm @zeroxe @xm @xe] > tempe > tempm		/temp_ holds error for this iteration
 .addf[ @errorxm @errorxe @tempm @tempe] > errorxe > errorxm

 if .gtf[@errorxm @errorxe maxix],maxix > errorxe > errorxm,
  if .gtf[minix @errorxm @errorxe ],minix > errorxe > errorxm,,,

 /temp_ holds command w/o differential part
 .addf[ .mulf[@errorxm @errorxe itermx] .mulf[ptermx @tempm @tempe ]] > tempe > tempm

 .addf[ @tempm @tempe
        .mulf[ .addf[ .mulf[-1.0 @commandxm @commandxe] @tempm @tempe] dtermx ]] > commandxe > commandxm

 .command[ .addf[centerx            @commandxm @commandxe  ]  1]

















 .addf[ @zeroym @zeroye @ym @ye] > tempe > tempm		/temp_ holds error for this iteration
 .addf[ @errorym @errorye @tempm @tempe] > errorye > errorym

 if .gtf[@errorym @errorye maxiy],maxiy > errorye > errorym,
  if .gtf[miniy @errorym @errorye ],miniy > errorye > errorym,,,

 /temp_ holds command w/o differential part
 .addf[ .mulf[@errorym @errorye itermy] .mulf[ptermy @tempm @tempe ]] > tempe > tempm

 .addf[ @tempm @tempe
        .mulf[ .addf[ .mulf[-1.0 @commandym @commandye] @tempm @tempe] dtermy ]] > commandye > commandym

 .command[ .addf[centery            @commandym @commandye  ]  0]













 if .eq[@scaler 127],.setbit[2 @porta] > porta,
   if .eq[@scaler 255],.clearbit[2 @porta] > porta,,,            /DEBUG

/ @xm > porta

.add[1 @scaler] > scaler

/ .awaitin[255]

 .loop[]
;

d .clearinterruptin * is
 if .orb[ .notb[.parm[0]] .getbit[ssp1if @pir1]   ],,.clearinterruptin[.add[-1]], 
;

d .clearinterrupt 0 0 is
 .clearinterruptin[networkretries]
 .clearbit[3 @pir1] > pir1
;

d .clearfill is
 if .getbit[bf @ssp1stat],,.clearfill[], 
;

d .ack is
 .clearbit[ackdt @ssp1con2] > ssp1con2
 .setbit[acken @ssp1con2] > ssp1con2
;

d .nack is
 .setbit[ackdt @ssp1con2] > ssp1con2
 .setbit[acken @ssp1con2] > ssp1con2
;

d .checkack 0 0 is
 if .notb[.getbit[6 @ssp1con2]],,.printch['E'].printch['R'].printch['R']  .checkack[],
;


d .iicstart is
 .setbit[sen @ssp1con2] > ssp1con2
;

d .iicend is
 .setbit[pen @ssp1con2] > ssp1con2
;

d .samplex is
 .iicstart[]
 .clearinterrupt[]
 210 > sspbuf
 .clearinterrupt[]
 .checkack[]
 59 > sspbuf
 .clearinterrupt[]
 .checkack[]
 .setbit[rsen @ssp1con2] > ssp1con2
 .clearinterrupt[]
 211 > sspbuf
 .clearinterrupt[]
 .checkack[]
 .setbit[rcen @ssp1con2] > ssp1con2
 .clearfill[]
 .clearinterrupt[]
 .clearbit[ssp1if @pir1] > pir1
 @ssp1buf
 .clearbit[bf @ssp1stat] > ssp1stat

 .ack[]
 .clearinterrupt[]
 .setbit[rcen @ssp1con2] > ssp1con2
 .clearfill[]
 .clearinterrupt[]
 .clearbit[ssp1if @pir1] > pir1
 @ssp1buf
 .itoflong[]  > xe > xm
 .clearbit[bf @ssp1stat] > ssp1stat
;

d .sampley is

 .ack[]
 .clearinterrupt[]
 .setbit[rcen @ssp1con2] > ssp1con2
 .clearfill[]
 .clearinterrupt[]
 .clearbit[ssp1if @pir1] > pir1
 @ssp1buf
 .clearbit[bf @ssp1stat] > ssp1stat

 .ack[]
 .clearinterrupt[]
 .setbit[rcen @ssp1con2] > ssp1con2
 .clearfill[]
 .clearinterrupt[]
 .clearbit[ssp1if @pir1] > pir1
 @ssp1buf
 .itoflong[]  > ye > ym
 .clearbit[bf @ssp1stat] > ssp1stat

 .nack[]
 .clearinterrupt[]
 .iicend[]
 .clearinterrupt[]
;


d .avgzero is
  .samplex[]
  .sampley[]
  .mulf[0.5 .addf[.mulf[-1.0 @xm @xe] @zeroxm @zeroxe]]> zeroxe > zeroxm
  .mulf[0.5 .addf[.mulf[-1.0 @ym @ye] @zeroym @zeroye]]> zeroye > zeroym
;

d .command 3 0 is
 if .gtf[maxcommandx parmf(1)],
    if .gtf[parmf(1) mincommandx],.pwmf[parmf(1) .parm[0]],  .pwmf[mincommandx .parm[0]], ,
  .pwmf[maxcommandx .parm[0]],
;

insert itof
insert pwm