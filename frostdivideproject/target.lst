MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 
                      00002 #include "hloe.inc"
                      00001 
                      00002 
                      00003 #define HLLGUARDhllblss
                      00004 
                      00005 
                      00006 #define HLOE_STACK_SIZE .80
                      00007 #define HLOE_STACK2_SIZE .20
                      00008 
                      00009 
                      00010 #include <p16f690.inc>
                      00001         LIST
                      00002 ; P16F690.INC  Standard Header File, Version 1.00    Microchip Technology, Inc.
                      00607         LIST
                      00011 #include <C:\Users\james.wilkinson\Downloads\frost\frostcompiler\kernel.inc>
                      00001 PUSH macro ;Push to the main stack for the programmer's parms and dyn. data;
                      00002  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
                      00003  movwf INDF ; code of any sort will not overwrite the data. 
                      00004  endm 
                      00005  
                      00006 POP macro ;Pop from main stack; "decf" is the de-allocator and thus happens last to 
                      00007  movfw INDF ; preserve the safety of this code under interruptible conditions. 
                      00008  decf FSR,f 
                      00009  endm
                      00010  
                      00011 DISCARD macro ;Remove items from the main stack and throw them away w/o affecting W
                      00012  decf FSR,f 
                      00013  endm
                      00014  
                      00015 KDISCARD macro ;Remove items from stack 2 and throw them away w/o affecting W
                      00016  decf alt_fsr,f 
                      00017  endm
                      00018 
                      00019 COPY macro ;Duplicate stack top
                      00020  movfw INDF
                      00021  incf FSR,f 
                      00022  movwf INDF 
                      00023  endm
                      00024 
                      00025 #define HLFSR FSR
                      00026  
                      00027 #define HLINDF INDF
                      00028 
                      00029   
                      00030 FAR_CALL macro caller_os,func_os ;Call destination residing within a different code page
                      00031  pagesel func_os
                      00032  call func_os
                      00033  pagesel caller_os ;This one restores the caller's code page
                      00034  endm
                      00035 
                      00036 ;Call destination residing within a different code page... does not restore the caller's
                      00037 ; code page after return, which may be OK (e.g. if the next operation is another 'Far'
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00038 ; function call). 
                      00039 HALF_FAR_CALL macro func_os 
                      00040  pagesel func_os        
                      00041  call func_os
                      00042  endm
                      00043  
                      00044 KPOP macro
                      00045  bankisel alt_stack ;This is OK for interrupts... part of STATUS 
                      00046  movf in_isr,f ;In shared RAM, no need for BANKSEL
                      00047  btfsc STATUS,Z
                      00048  goto $+0F
                      00049  movfw FSR 
                      00050  movwf softstack0+1 ;Save user stack ptr 
                      00051  movfw alt_fsr ;Get second stack ptr 
                      00052  movwf FSR 
                      00053  movfw INDF ;Dereference it 
                      00054  decf FSR,f ;Decrement it 
                      00055  movwf softstack1+1  ;Save popped value for ret urn 
                      00056  movfw FSR ;Save second stack ptr 
                      00057  movwf alt_fsr 
                      00058  movfw softstack0+1  ;Restore user stack ptr 
                      00059  movwf FSR 
                      00060  clrf softstack0+1
                      00061  movfw softstack1+1  ;Bring back popped value for ret urn 
                      00062  goto $+0E
                      00063  movfw FSR 
                      00064  movwf softstack0 ;Save user stack ptr 
                      00065  movfw alt_fsr ;Get second stack ptr 
                      00066  movwf FSR 
                      00067  movfw INDF ;Dereference it 
                      00068  decf FSR,f ;Decrement it 
                      00069  movwf softstack1  ;Save popped value for ret urn 
                      00070  movfw FSR ;Save second stack ptr 
                      00071  movwf alt_fsr 
                      00072  movfw softstack0  ;Restore user stack ptr 
                      00073  movwf FSR 
                      00074  clrf softstack0
                      00075  movfw softstack1  ;Bring back popped value for ret urn 
                      00076  bankisel stack
                      00077  endm 
                      00078 
                      00079 KPUSH macro
                      00080  bankisel alt_stack ;This is OK for interrupts... part of STATUS 
                      00081  movf in_isr,f ;In shared RAM, no need for BANKSEL
                      00082  btfsc STATUS,Z
                      00083  goto $+0E
                      00084  movwf softstack1+1 ;softstack1 holds parm value being pushed
                      00085  movfw FSR  
                      00086  movwf softstack0+1  ;softstack0 holds FSR
                      00087  movfw alt_fsr 
                      00088  movwf FSR 
                      00089  movfw softstack1+1
                      00090  incf alt_fsr,f 
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00091  incf FSR,f ;The actual kernel push... preincrement for interrupt safety
                      00092  movwf INDF 
                      00093  movfw softstack0+1
                      00094  movwf FSR 
                      00095  clrf softstack0+1 
                      00096  goto $+0D
                      00097  movwf softstack1 ;softstack1 holds parm value being pushed
                      00098  movfw FSR  
                      00099  movwf softstack0  ;softstack0 holds FSR
                      00100  movfw alt_fsr 
                      00101  movwf FSR 
                      00102  movfw softstack1
                      00103  incf alt_fsr,f 
                      00104  incf FSR,f ;The actual kernel push... preincrement for interrupt safety
                      00105  movwf INDF 
                      00106  movfw softstack0
                      00107  movwf FSR 
                      00108  clrf softstack0
                      00109  bankisel stack
                      00110  endm
                      00111  
                      00112 PREEMPT macro
                      00113 #ifdef HLLMULTITASK 
                      00114  movwf W_Save ; save context- save W in "W_save" file reg.
                      00115  ;From datasheet... save STATUS properly
                      00116  swapf STATUS,W 
                      00117  movwf STATUS_Save 
                      00118  movf FSR,w 
                      00119  movwf FSR_Save 
                      00120  movf PCLATH,w ; save status in "STATUS_Save" file reg.
                      00121  movwf PC_Save 
                      00122  movf alt_fsr,w 
                      00123  movwf ALT_Save
                      00124  incf in_isr,f
                      00125  pagesel ISR
                      00126  bankisel stack 
                      00127  movf FSR,w           ;Restore "softstack" if main thread was using 2nd stack
                      00128  movf softstack0,f        ; (coded to preserve constant interrupt latency)
                      00129  btfss STATUS,Z       
                      00130  movf softstack0,w  
                      00131  movwf FSR          
                      00132 #endif 
                      00133  endm
                      00134  
                      00135 RESUME macro
                      00136  
                      00137 #ifdef HLLMULTITASK 
                      00138  clrf in_isr
                      00139  movf ALT_Save,w
                      00140  movwf alt_fsr 
                      00141  movf PC_Save,w ; restore context (W and STATUS)
                      00142  movwf PCLATH
                      00143  movf FSR_Save,w 
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00144  movwf FSR
                      00145  ;Per the datasheet...
                      00146  swapf STATUS_Save,W
                      00147  movwf STATUS ;Move W into Status reg
                      00148  swapf W_Save,F ;Swap W_TEMP
                      00149  swapf W_Save,W ;Swap W_TEMP into W
                      00150 #endif
                      00151 
                      00152  endm
                      00153  
                      00154 ; Table macro.. this followed by any series of RETLW calls
                      00155 ; transforms said call list into a function that takes an offset
                      00156 ; and returns that entry in the table (takes 1 byte, returns 1
                      00157 ; byte... this goes atop the HLL feature which allows generation 
                      00158 ; of tables. It can also go atop RETLW tables entered into assembly 
                      00159 ; files in a very basic fashion when doing assembly programming. In 
                      00160 ; either case, the overall result can be called exactly as if it were any 
                      00161 ; other HLOE function
                      00162 HLTABLE macro mmnme
                      00163 mmnme:
                      00164  movlw high mmnme#v(2) ; Necess. b/c writes to PCL take 5 bits fr. PCLATH
                      00165  movwf PCLATH ; and PAGESEL doesn't take care of all 5
                      00166  movlw low mmnme#v(2) ; Perform pointer arithmetic
                      00167  addwf INDF,w 
                      00168  decf FSR,f
                      00169  btfsc STATUS,C ; Necess. b/c writes to PCL take 5 bits fr. PCLATH
                      00170  incf PCLATH,f 
                      00171  movwf PCL 
                      00172 mmnme#v(2): 
                      00173  ;retlw K, retlw K, etc. go here
                      00174  endm
                      00175  
                      00003 
                      00004 
                      00005 ;
                      00006 ; R O B O T
                      00007 ;
                      00008 ; C O N F I G
                      00009 ;
                      00010 
                      00011 
2007   30C6           00012  __config (_EXTRC_OSC_NOCLKOUT& _WDT_OFF  & _MCLRE_OFF & _IESO_OFF & _FCMEN_OFF  & _PWRTE_ON & _BOR_OFF)
                      00013 
                      00014 
                      00015 
                      00016 
                      00017 Resetv code 0 
0000   138B           00018  bcf INTCON,GIE
0001   ????           00019  pagesel hloego
0002   2???           00020  goto hloego
                      00021  
                      00022 #ifdef HLLMULTITASK
                      00023 vectr code 4     ;Device specific
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00024 ISR:
                      00025 
                      00026 
                      00027  PREEMPT
                      00028 #endif
                      00029 
                      00030 ;
                      00031 ; R O B O T
                      00032 ;
                      00033 ; H E A D E R
                      00034 ;
                      00035 
                      00036 #ifdef HLLMULTITASK
                      00037 ExitISR:    
                      00038  RESUME 
                      00039  
                      00040   retfie
                      00041 #endif
                      00042 
                      00043 mainvars udata_shr      
                      00044 #ifdef HLLMULTITASK
                      00045 pbase res .1                    ; Used for functions w/ numbered pass/return, to clean up parms/push arg
                            s
                      00046 pbaseisr res .1 
                      00047 #else
0000                  00048 pbase res .1
                      00049 #endif
0001                  00050 PC_Save res .1
                      00051 
                      00052 main code
0000                  00053 hloego:
                      00054 
                      00055  
                      00056 
                      00057   
0000   01??           00058   clrf in_isr
                      00059  
0001   30??           00060   movlw stack-1         ;Set up stack starting position based on literals det. by incremental linker
0002   0084           00061   movwf FSR 
0003   30??           00062   movlw alt_stack-1
0004   00??           00063   movwf alt_fsr 
                      00064  
                      00065  
0005   01??           00066  clrf softstack0 
                      00067  
0006   ????           00068  bankisel stack
0007   ????           00069  pagesel hlluserprog
0008   2???           00070  goto hlluserprog
                      00071 hllupuser CODE
0000                  00072 hlluserprog: 
                      00073  
                      00074 
0000   3004           00075  movlw SYNC
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00076 
                      00077  PUSH 
0001   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0002   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00078 
                      00079 
0003   3002           00080  movlw BRGH
                      00081 
                      00082  PUSH 
0004   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0005   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00083 
0006   1683 1303      00084    banksel TXSTA
0008   0818           00085    movfw TXSTA
                      00086    
                      00087    
                      00088  PUSH 
0009   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
000A   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00089 
                      00090 
                      00091  
                      00092  HALF_FAR_CALL setbit
000B   ????               M  pagesel setbit         
000C   2???               M  call setbit
                      00093 
                      00094 
                      00095  
                      00096  FAR_CALL hlluserprog,clearbit
000D   ????               M  pagesel clearbit
000E   2???               M  call clearbit
000F   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00097 
                      00098  POP
0010   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0011   0384               M  decf FSR,f 
0012   1683 1303      00099  banksel TXSTA
0014   0098           00100  movwf TXSTA
                      00101  
                      00102 
                      00103 
0015   3003           00104  movlw BRG16
                      00105 
                      00106  PUSH 
0016   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0017   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00107 
                      00108 
0018   3004           00109  movlw SCKP
                      00110 
                      00111  PUSH 
0019   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
001A   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00112 
001B   1683 1303      00113    banksel BAUDCTL
001D   081B           00114    movfw BAUDCTL
                      00115    
                      00116    
                      00117  PUSH 
001E   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
001F   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00118 
                      00119 
                      00120  
                      00121  HALF_FAR_CALL setbit
0020   ????               M  pagesel setbit         
0021   2???               M  call setbit
                      00122 
                      00123 
                      00124  
                      00125  FAR_CALL hlluserprog,setbit
0022   ????               M  pagesel setbit
0023   2???               M  call setbit
0024   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00126 
                      00127  POP
0025   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0026   0384               M  decf FSR,f 
0027   1683 1303      00128  banksel BAUDCTL
0029   009B           00129  movwf BAUDCTL
                      00130  
                      00131 
                      00132 
002A   3004           00133  movlw CREN
                      00134 
                      00135  PUSH 
002B   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
002C   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00136 
002D   1283 1303      00137    banksel RCSTA
002F   0818           00138    movfw RCSTA
                      00139    
                      00140    
                      00141  PUSH 
0030   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0031   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00142 
                      00143 
                      00144  
                      00145  FAR_CALL hlluserprog,clearbit
0032   ????               M  pagesel clearbit
0033   2???               M  call clearbit
0034   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00146 
                      00147  POP
0035   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0036   0384               M  decf FSR,f 
0037   1283 1303      00148  banksel RCSTA
0039   0098           00149  movwf RCSTA
                      00150  
                      00151 
                      00152 
003A   3004           00153  movlw CREN
                      00154 
                      00155  PUSH 
003B   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
003C   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00156 
003D   1283 1303      00157    banksel RCSTA
003F   0818           00158    movfw RCSTA
                      00159    
                      00160    
                      00161  PUSH 
0040   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0041   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00162 
                      00163 
                      00164  
                      00165  FAR_CALL hlluserprog,setbit
0042   ????               M  pagesel setbit
0043   2???               M  call setbit
0044   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00166 
                      00167  POP
0045   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0046   0384               M  decf FSR,f 
0047   1283 1303      00168  banksel RCSTA
0049   0098           00169  movwf RCSTA
                      00170  
                      00171 
                      00172 
004A   3019           00173  movlw .25 
                      00174  
004B   1683 1303      00175  banksel SPBRG
004D   0099           00176  movwf SPBRG
                      00177  
                      00178 
                      00179 
004E   3000           00180  movlw .0  
                      00181  
004F   1683 1303      00182  banksel SPBRGH
0051   009A           00183  movwf SPBRGH
                      00184  
                      00185 
                      00186 
0052   3005           00187  movlw TXEN
                      00188 
                      00189  PUSH 
0053   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0054   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00190 
                      00191 
0055   3006           00192  movlw TX9
                      00193 
                      00194  PUSH 
0056   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0057   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00195 
0058   1683 1303      00196    banksel TXSTA
005A   0818           00197    movfw TXSTA
                      00198    
                      00199    
                      00200  PUSH 
005B   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
005C   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00201 
                      00202 
                      00203  
                      00204  HALF_FAR_CALL clearbit
005D   ????               M  pagesel clearbit       
005E   2???               M  call clearbit
                      00205 
                      00206 
                      00207  
                      00208  FAR_CALL hlluserprog,setbit
005F   ????               M  pagesel setbit
0060   2???               M  call setbit
0061   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00209 
                      00210  POP
0062   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0063   0384               M  decf FSR,f 
0064   1683 1303      00211  banksel TXSTA
0066   0098           00212  movwf TXSTA
                      00213  
                      00214 
                      00215 
0067   3007           00216  movlw SPEN
                      00217 
                      00218  PUSH 
0068   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0069   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00219 
006A   1283 1303      00220    banksel RCSTA
006C   0818           00221    movfw RCSTA
                      00222    
                      00223    
                      00224  PUSH 
006D   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
006E   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00225 
                      00226 
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00227  
                      00228  FAR_CALL hlluserprog,setbit
006F   ????               M  pagesel setbit
0070   2???               M  call setbit
0071   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00229 
                      00230  POP
0072   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0073   0384               M  decf FSR,f 
0074   1283 1303      00231  banksel RCSTA
0076   0098           00232  movwf RCSTA
                      00233  
                      00234 
                      00235 
0077   300D           00236  movlw .13
                      00237  PUSH 
0078   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0079   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00238 
                      00239 
                      00240  
                      00241  FAR_CALL hlluserprog,printch
007A   ????               M  pagesel printch
007B   2???               M  call printch
007C   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00242 
                      00243 
007D   300A           00244  movlw .10
                      00245  PUSH 
007E   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
007F   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00246 
                      00247 
                      00248  
                      00249  FAR_CALL hlluserprog,printch
0080   ????               M  pagesel printch
0081   2???               M  call printch
0082   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00250 
                      00251 
0083   3044           00252  movlw .68 
                      00253  PUSH 
0084   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0085   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00254 
                      00255 
0086   3008           00256  movlw .8
                      00257  PUSH 
0087   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0088   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00258 
                      00259 
                      00260  
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00261  HALF_FAR_CALL fastdivu
0089   ????               M  pagesel fastdivu       
008A   2???               M  call fastdivu
                      00262 
                      00263 
                      00264  
                      00265  FAR_CALL hlluserprog,printu
008B   ????               M  pagesel printu
008C   2???               M  call printu
008D   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00266 
                      00267 
008E   301D           00268  movlw .29 
                      00269  PUSH 
008F   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0090   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00270 
                      00271 
0091   3003           00272  movlw .3
                      00273  PUSH 
0092   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0093   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00274 
                      00275 
                      00276  
                      00277  HALF_FAR_CALL fastdivu
0094   ????               M  pagesel fastdivu       
0095   2???               M  call fastdivu
                      00278 
                      00279 
                      00280  
                      00281  FAR_CALL hlluserprog,printu
0096   ????               M  pagesel printu
0097   2???               M  call printu
0098   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00282 
                      00283 
0099   303F           00284  movlw .63 
                      00285  PUSH 
009A   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
009B   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00286 
                      00287 
009C   3016           00288  movlw .22
                      00289  PUSH 
009D   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
009E   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00290 
                      00291 
                      00292  
                      00293  HALF_FAR_CALL fastdivu
009F   ????               M  pagesel fastdivu       
00A0   2???               M  call fastdivu
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00294 
                      00295 
                      00296  
                      00297  FAR_CALL hlluserprog,printu
00A1   ????               M  pagesel printu
00A2   2???               M  call printu
00A3   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00298 
                      00299 
00A4   302C           00300  movlw .44 
                      00301  PUSH 
00A5   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00A6   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00302 
                      00303 
00A7   3016           00304  movlw .22
                      00305  PUSH 
00A8   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00A9   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00306 
                      00307 
                      00308  
                      00309  HALF_FAR_CALL fastdivu
00AA   ????               M  pagesel fastdivu       
00AB   2???               M  call fastdivu
                      00310 
                      00311 
                      00312  
                      00313  FAR_CALL hlluserprog,printu
00AC   ????               M  pagesel printu
00AD   2???               M  call printu
00AE   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00314 
                      00315 
00AF   3041           00316  movlw .65 
                      00317  PUSH 
00B0   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00B1   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00318 
                      00319 
00B2   3016           00320  movlw .22
                      00321  PUSH 
00B3   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00B4   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00322 
                      00323 
                      00324  
                      00325  HALF_FAR_CALL fastdivu
00B5   ????               M  pagesel fastdivu       
00B6   2???               M  call fastdivu
                      00326 
                      00327 
                      00328  
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00329  FAR_CALL hlluserprog,printu
00B7   ????               M  pagesel printu
00B8   2???               M  call printu
00B9   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00330 
                      00331 
00BA   3063           00332  movlw .99 
                      00333  PUSH 
00BB   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00BC   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00334 
                      00335 
00BD   300B           00336  movlw .11
                      00337  PUSH 
00BE   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00BF   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00338 
                      00339 
                      00340  
                      00341  HALF_FAR_CALL fastdivu
00C0   ????               M  pagesel fastdivu       
00C1   2???               M  call fastdivu
                      00342 
                      00343 
                      00344  
                      00345  FAR_CALL hlluserprog,printu
00C2   ????               M  pagesel printu
00C3   2???               M  call printu
00C4   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00346 
                      00347 
00C5   3017           00348  movlw .23 
                      00349  PUSH 
00C6   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00C7   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00350 
                      00351 
00C8   300B           00352  movlw .11
                      00353  PUSH 
00C9   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00CA   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00354 
                      00355 
                      00356  
                      00357  HALF_FAR_CALL fastdivu
00CB   ????               M  pagesel fastdivu       
00CC   2???               M  call fastdivu
                      00358 
                      00359 
                      00360  
                      00361  FAR_CALL hlluserprog,printu
00CD   ????               M  pagesel printu
00CE   2???               M  call printu
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00CF   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00362 
                      00363     
00D0                  00364 hllprogend:
00D0   2???           00365  goto hllprogend
                      00366  
00D1                  00367 hllprgen2:
00D1   2???           00368  goto hllprgen2
                      00369  
                      00370 
                      00371 
                      00372 
                      00373 
                      00374 
                      00375  
                      00376  
                      00377 
                      00378  
                      00379 
                      00380 
                      00381 ansiadt udata
0000                  00382 aart00 RES .1
                      00383 #ifdef HLLMULTITASK
                      00384 #ifdef HLLGUARDaart
                      00385 aart00isr RES .1
                      00386 #endif 
                      00387 #endif 
0001                  00388 aart01 RES .1
                      00389 #ifdef HLLMULTITASK
                      00390 #ifdef HLLGUARDaart
                      00391 aart01isr RES .1
                      00392 #endif 
                      00393 #endif 
0002                  00394 aart02 RES .1
                      00395 #ifdef HLLMULTITASK
                      00396 #ifdef HLLGUARDaart
                      00397 aart02isr RES .1
                      00398 #endif 
                      00399 #endif 
                      00400 
                      00401  
                      00402 ansiara CODE
                      00403 
                      00404 ansiadu udata
0000                  00405 aartpr00 RES .1
                      00406 #ifdef HLLMULTITASK
                      00407 #ifdef HLLGUARDaartpr
                      00408 aart00prisr RES .1
                      00409 #endif 
                      00410 #endif 
                      00411 
                      00412 cprntuc CODE
                      00413 
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00414 
                      00415 
                      00416 #define margpi aartpr00
                      00417 
                      00418 
0000                  00419 printu:  
                      00420 #ifdef HLLMULTITASK
                      00421 #ifdef HLLGUARDaartpr 
                      00422  movf in_isr,f  
                      00423  btfsc STATUS,Z
                      00424  
                      00425 
                      00426 
                      00427  goto printu0
                      00428 
                      00429  POP
                      00430  banksel margpi
                      00431  movwf margpi
                      00432  PUSH
                      00433  movlw .100 
                      00434  PUSH
                      00435  
                      00436  FAR_CALL printu,divu
                      00437  POP
                      00438  addlw '0' 
                      00439  PUSH
                      00440  
                      00441  FAR_CALL printu,printch
                      00442  banksel margpi 
                      00443  movfw margpi
                      00444  PUSH
                      00445  movlw .100 
                      00446  PUSH
                      00447  
                      00448  FAR_CALL printu,modu
                      00449  movlw .10
                      00450  PUSH
                      00451  
                      00452  FAR_CALL printu,divu
                      00453  POP
                      00454  addlw '0' 
                      00455  PUSH
                      00456  
                      00457  FAR_CALL printu,printch
                      00458  banksel margpi
                      00459  movfw margpi
                      00460  PUSH
                      00461  movlw .10 
                      00462  PUSH
                      00463  
                      00464  FAR_CALL printu,modu
                      00465  POP
                      00466  addlw '0' 
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00467  PUSH
                      00468  
                      00469  FAR_CALL printu,printch  
                      00470  return
                      00471 
                      00472 
                      00473 
                      00474 #undefine margpi
                      00475 
                      00476 
                      00477 #define margpi aartpr00+1
                      00478 
                      00479 
                      00480 printu0:
                      00481 #endif
                      00482 #endif
                      00483 
                      00484  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   ???? ????      00485  banksel margpi
0004   00??           00486  movwf margpi
                      00487  PUSH
0005   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0006   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0007   3064           00488  movlw .100 
                      00489  PUSH
0008   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0009   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00490  
                      00491  FAR_CALL printu,divu
000A   ????               M  pagesel divu
000B   2???               M  call divu
000C   ????               M  pagesel printu    ;This one restores the caller's code page
                      00492  POP
000D   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
000E   0384               M  decf FSR,f 
000F   3E30           00493  addlw '0' 
                      00494  PUSH
0010   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0011   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00495  
                      00496  FAR_CALL printu,printch
0012   ????               M  pagesel printch
0013   2???               M  call printch
0014   ????               M  pagesel printu    ;This one restores the caller's code page
0015   ???? ????      00497  banksel margpi 
0017   08??           00498  movfw margpi
                      00499  PUSH
0018   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0019   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
001A   3064           00500  movlw .100 
                      00501  PUSH
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001B   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
001C   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00502  
                      00503  FAR_CALL printu,modu
001D   ????               M  pagesel modu
001E   2???               M  call modu
001F   ????               M  pagesel printu    ;This one restores the caller's code page
0020   300A           00504  movlw .10
                      00505  PUSH
0021   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0022   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00506  
                      00507  FAR_CALL printu,divu
0023   ????               M  pagesel divu
0024   2???               M  call divu
0025   ????               M  pagesel printu    ;This one restores the caller's code page
                      00508  POP
0026   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0027   0384               M  decf FSR,f 
0028   3E30           00509  addlw '0' 
                      00510  PUSH
0029   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
002A   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00511  
                      00512  FAR_CALL printu,printch
002B   ????               M  pagesel printch
002C   2???               M  call printch
002D   ????               M  pagesel printu    ;This one restores the caller's code page
002E   ???? ????      00513  banksel margpi
0030   08??           00514  movfw margpi
                      00515  PUSH
0031   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0032   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0033   300A           00516  movlw .10 
                      00517  PUSH
0034   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0035   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00518  
                      00519  FAR_CALL printu,modu
0036   ????               M  pagesel modu
0037   2???               M  call modu
0038   ????               M  pagesel printu    ;This one restores the caller's code page
                      00520  POP
0039   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
003A   0384               M  decf FSR,f 
003B   3E30           00521  addlw '0' 
                      00522  PUSH
003C   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
003D   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00523  
                      00524  FAR_CALL printu,printch  
003E   ????               M  pagesel printch
003F   2???               M  call printch
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0040   ????               M  pagesel printu    ;This one restores the caller's code page
0041   0008           00525  return
                      00526 
                      00527 
                      00528 
                      00529 #undefine margpi
                      00530 
                      00531 
                      00532 
                      00533 
                      00534 
                      00535 
                      00536  
                      00537 
                      00538 
                      00539 hlog1a CODE
                      00540 
                      00541 
                      00542 
                      00543 #define margp2 hllblss00
                      00544 
                      00545 
0000                  00546 clearbit:  
                      00547 #ifdef HLLMULTITASK
                      00548 #ifdef HLLGUARDhllblss 
                      00549  movf in_isr,f  
                      00550  btfsc STATUS,Z
                      00551  
                      00552 
                      00553 
                      00554  goto clearbit0
                      00555 
                      00556  POP
                      00557  banksel margp2
                      00558  movwf margp2
                      00559  POP 
                      00560  xorlw .0
                      00561  btfss STATUS,Z
                      00562  goto tff00h
                      00563  
                      00564  movfw margp2
                      00565  andlw .255-.1
                      00566  goto tff99h
                      00567 tff00h: 
                      00568  
                      00569  xorlw .1
                      00570  btfss STATUS,Z
                      00571  goto tff01h
                      00572  
                      00573  movfw margp2
                      00574  andlw .255-.2
                      00575  goto tff99h
                      00576 tff01h: 
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00577  xorlw .1
                      00578  xorlw .2
                      00579  btfss STATUS,Z
                      00580  goto tff02h
                      00581  
                      00582  movfw margp2
                      00583  andlw .255-.4
                      00584  goto tff99h
                      00585 tff02h: 
                      00586  xorlw .2
                      00587  xorlw .3
                      00588  btfss STATUS,Z
                      00589  goto tff03h
                      00590  
                      00591  movfw margp2
                      00592  andlw .255-.8
                      00593  goto tff99h
                      00594 tff03h: 
                      00595  xorlw .3
                      00596  xorlw .4
                      00597  btfss STATUS,Z
                      00598  goto tff04h
                      00599  
                      00600  movfw margp2
                      00601  andlw .255-.16
                      00602  goto tff99h
                      00603 tff04h: 
                      00604  xorlw .4
                      00605  xorlw .5
                      00606  btfss STATUS,Z
                      00607  goto tff05h
                      00608  
                      00609  movfw margp2
                      00610  andlw .255-.32
                      00611  goto tff99h
                      00612 tff05h: 
                      00613  xorlw .5
                      00614  xorlw .6
                      00615  btfss STATUS,Z
                      00616  goto tff07h
                      00617  
                      00618  movfw margp2
                      00619  andlw .255-.64
                      00620  goto tff99h
                      00621 tff07h: 
                      00622  
                      00623  movfw margp2
                      00624  andlw .255-.128
                      00625 tff99h:  
                      00626  PUSH
                      00627  return
                      00628 
                      00629 
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00630 
                      00631 
                      00632 #undefine margp2
                      00633 
                      00634 
                      00635 #define margp2 hllblss00+1
                      00636 
                      00637 
                      00638 clearbit0:
                      00639 #endif
                      00640 #endif
                      00641 
                      00642  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   ???? ????      00643  banksel margp2
0004   00??           00644  movwf margp2
                      00645  POP 
0005   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0006   0384               M  decf FSR,f 
0007   3A00           00646  xorlw .0
0008   1D03           00647  btfss STATUS,Z
0009   2???           00648  goto hllAAAAA
                      00649  
000A   08??           00650  movfw margp2
000B   39FE           00651  andlw .255-.1
000C   2???           00652  goto hllHAAAA
000D                  00653 hllAAAAA: 
                      00654  
000D   3A01           00655  xorlw .1
000E   1D03           00656  btfss STATUS,Z
000F   2???           00657  goto hllBAAAA
                      00658  
0010   08??           00659  movfw margp2
0011   39FD           00660  andlw .255-.2
0012   2???           00661  goto hllHAAAA
0013                  00662 hllBAAAA: 
0013   3A01           00663  xorlw .1
0014   3A02           00664  xorlw .2
0015   1D03           00665  btfss STATUS,Z
0016   2???           00666  goto hllCAAAA
                      00667  
0017   08??           00668  movfw margp2
0018   39FB           00669  andlw .255-.4
0019   2???           00670  goto hllHAAAA
001A                  00671 hllCAAAA: 
001A   3A02           00672  xorlw .2
001B   3A03           00673  xorlw .3
001C   1D03           00674  btfss STATUS,Z
001D   2???           00675  goto hllDAAAA
                      00676  
001E   08??           00677  movfw margp2
001F   39F7           00678  andlw .255-.8
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0020   2???           00679  goto hllHAAAA
0021                  00680 hllDAAAA: 
0021   3A03           00681  xorlw .3
0022   3A04           00682  xorlw .4
0023   1D03           00683  btfss STATUS,Z
0024   2???           00684  goto hllEAAAA
                      00685  
0025   08??           00686  movfw margp2
0026   39EF           00687  andlw .255-.16
0027   2???           00688  goto hllHAAAA
0028                  00689 hllEAAAA: 
0028   3A04           00690  xorlw .4
0029   3A05           00691  xorlw .5
002A   1D03           00692  btfss STATUS,Z
002B   2???           00693  goto hllFAAAA
                      00694  
002C   08??           00695  movfw margp2
002D   39DF           00696  andlw .255-.32
002E   2???           00697  goto hllHAAAA
002F                  00698 hllFAAAA: 
002F   3A05           00699  xorlw .5
0030   3A06           00700  xorlw .6
0031   1D03           00701  btfss STATUS,Z
0032   2???           00702  goto hllGAAAA
                      00703  
0033   08??           00704  movfw margp2
0034   39BF           00705  andlw .255-.64
0035   2???           00706  goto hllHAAAA
0036                  00707 hllGAAAA: 
                      00708  
0036   08??           00709  movfw margp2
0037   397F           00710  andlw .255-.128
0038                  00711 hllHAAAA:  
                      00712  PUSH
0038   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0039   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
003A   0008           00713  return
                      00714 
                      00715 
                      00716 
                      00717 
                      00718 #undefine margp2
                      00719 
                      00720 
                      00721 
                      00722 
                      00723 
                      00724 
                      00725 
                      00726  
                      00727 
                      00728 ufstdv034 udata 
                      00729 
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00730 
                      00731 
                      00732 
                      00733 
0000                  00734 fstdvss00 res 1           
                      00735 #ifdef HLLMULTITASK
                      00736 #ifdef HLLGUARDfstdvss
                      00737 fstdvss00isr res 1      
                      00738 #endif
                      00739 #endif
                      00740 
0001                  00741 fstdvss01 res 1    
                      00742 #ifdef HLLMULTITASK
                      00743 #ifdef HLLGUARDfstdvss
                      00744 fstdvss01isr res 1      
                      00745 #endif
                      00746 #endif
                      00747 
0002                  00748 fstdvss02 res 1    
                      00749 #ifdef HLLMULTITASK
                      00750 #ifdef HLLGUARDfstdvss
                      00751 fstdvss02isr res 1      
                      00752 #endif
                      00753 #endif
                      00754   
0003                  00755 fstdvss03 res 1    
                      00756 #ifdef HLLMULTITASK
                      00757 #ifdef HLLGUARDfstdvss
                      00758 fstdvss03isr res 1      
                      00759 #endif
                      00760 #endif
                      00761     
0004                  00762 fstdvss04 res 1    
                      00763 #ifdef HLLMULTITASK
                      00764 #ifdef HLLGUARDfstdvss
                      00765 fstdvss04isr res 1      
                      00766 #endif
                      00767 #endif
                      00768     
0005                  00769 fstdvss05 res 1    
                      00770 #ifdef HLLMULTITASK
                      00771 #ifdef HLLGUARDfstdvss
                      00772 fstdvss05isr res 1      
                      00773 #endif
                      00774 #endif
                      00775     
                      00776 fstdvss CODE
                      00777 
                      00778 
                      00779 
                      00780 #define countrr fstdvss00
                      00781 
                      00782 
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00783 #define keepp fstdvss01
                      00784 
                      00785 
                      00786 #define pterm fstdvss02
                      00787 
                      00788 
                      00789 #define bterm fstdvss03
                      00790 
                      00791 
                      00792 #define aterm fstdvss04
                      00793 
                      00794 
0000                  00795 fastdivu:  
                      00796 #ifdef HLLMULTITASK
                      00797 #ifdef HLLGUARDfstdvss 
                      00798  movf in_isr,f  
                      00799  btfsc STATUS,Z
                      00800  
                      00801 
                      00802 
                      00803  goto fastdivu0
                      00804 
                      00805  banksel countrr
                      00806  clrf countrr
                      00807  POP
                      00808  banksel bterm 
                      00809  movwf bterm
                      00810  POP
                      00811  banksel aterm 
                      00812  movwf aterm
                      00813  clrf pterm
                      00814 lop55d:         
                      00815  movfw countrr
                      00816  xorlw .8
                      00817  btfsc STATUS,Z
                      00818  goto n2xx4s
                      00819  movfw aterm
                      00820  andlw .128
                      00821  movwf keepp
                      00822  bcf STATUS,C
                      00823  rlf pterm,f    
                      00824  bcf STATUS,C   
                      00825  rlf aterm,f    
                      00826  movfw keepp
                      00827  btfsc STATUS,Z
                      00828  goto n119ec
                      00829  incf pterm,f
                      00830 n119ec:
                      00831  movfw bterm
                      00832  subwf pterm,w
                      00833  btfss STATUS,C  
                      00834  goto n01cee
                      00835  movwf pterm  
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00836  movfw aterm  
                      00837  iorlw .1     
                      00838  movwf aterm  
                      00839 n01cee: 
                      00840  incf countrr,f
                      00841  goto lop55d  
                      00842 n2xx4s:
                      00843  movf aterm,w
                      00844  PUSH 
                      00845  return
                      00846 
                      00847 
                      00848 
                      00849 #undefine countrr
                      00850 
                      00851 
                      00852 #undefine keepp
                      00853 
                      00854 
                      00855 #undefine pterm
                      00856 
                      00857 
                      00858 #undefine bterm
                      00859 
                      00860 
                      00861 #undefine aterm
                      00862 
                      00863 
                      00864 #define countrr fstdvss00+1
                      00865 
                      00866 
                      00867 #define keepp fstdvss01+1
                      00868 
                      00869 
                      00870 #define pterm fstdvss02+1
                      00871 
                      00872 
                      00873 #define bterm fstdvss03+1
                      00874 
                      00875 
                      00876 #define aterm fstdvss04+1
                      00877 
                      00878 
                      00879 fastdivu0:
                      00880 #endif
                      00881 #endif
                      00882 
0000   ???? ????      00883  banksel countrr
0002   01??           00884  clrf countrr
                      00885  POP
0003   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0004   0384               M  decf FSR,f 
0005   ???? ????      00886  banksel bterm 
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0007   00??           00887  movwf bterm
                      00888  POP
0008   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0009   0384               M  decf FSR,f 
000A   ???? ????      00889  banksel aterm 
000C   00??           00890  movwf aterm
000D   01??           00891  clrf pterm
000E                  00892 hllIAAAA:         
000E   08??           00893  movfw countrr
000F   3A08           00894  xorlw .8
0010   1903           00895  btfsc STATUS,Z
0011   2???           00896  goto hllLAAAA
0012   08??           00897  movfw aterm
0013   3980           00898  andlw .128
0014   00??           00899  movwf keepp
0015   1003           00900  bcf STATUS,C
0016   0D??           00901  rlf pterm,f    
0017   1003           00902  bcf STATUS,C   
0018   0D??           00903  rlf aterm,f    
0019   08??           00904  movfw keepp
001A   1903           00905  btfsc STATUS,Z
001B   2???           00906  goto hllJAAAA
001C   0A??           00907  incf pterm,f
001D                  00908 hllJAAAA:
001D   08??           00909  movfw bterm
001E   02??           00910  subwf pterm,w
001F   1C03           00911  btfss STATUS,C  
0020   2???           00912  goto hllKAAAA
0021   00??           00913  movwf pterm  
0022   08??           00914  movfw aterm  
0023   3801           00915  iorlw .1     
0024   00??           00916  movwf aterm  
0025                  00917 hllKAAAA: 
0025   0A??           00918  incf countrr,f
0026   2???           00919  goto hllIAAAA  
0027                  00920 hllLAAAA:
0027   08??           00921  movf aterm,w
                      00922  PUSH 
0028   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0029   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
002A   0008           00923  return
                      00924 
                      00925 
                      00926 
                      00927 #undefine countrr
                      00928 
                      00929 
                      00930 #undefine keepp
                      00931 
                      00932 
                      00933 #undefine pterm
                      00934 
                      00935 
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00936 #undefine bterm
                      00937 
                      00938 
                      00939 #undefine aterm
                      00940 
                      00941 
                      00942 
                      00943 
                      00944 
                      00945 
                      00946 
                      00947  
                      00948 
                      00949 
                      00950 
                      00951 ukrnl2 UDATA
0000                  00952 stack res HLOE_STACK_SIZE
                      00953  
                      00954 ukrnl3 UDATA 
0000                  00955 alt_stack res HLOE_STACK2_SIZE
                      00956  
                      00957 
                      00958 
                      00959 ukernl udata 
                      00960 
                      00961 
                      00962 
                      00963 
                      00964 
0000                  00965 hllblss00 res 1           
                      00966 #ifdef HLLMULTITASK
                      00967 #ifdef HLLGUARDhllblss
                      00968 hllblss00isr res 1      
                      00969 #endif
                      00970 #endif
                      00971 
0001                  00972 hllblss01 res 1    
                      00973 #ifdef HLLMULTITASK
                      00974 #ifdef HLLGUARDhllblss
                      00975 hllblss01isr res 1      
                      00976 #endif
                      00977 #endif
                      00978 
0002                  00979 hllblss02 res 1    
                      00980 #ifdef HLLMULTITASK
                      00981 #ifdef HLLGUARDhllblss
                      00982 hllblss02isr res 1      
                      00983 #endif
                      00984 #endif
                      00985   
                      00986 ukrshr udata_shr
                      00987 
                      00988 
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000                  00989 softstack0 res 1                
                      00990 #ifdef HLLMULTITASK
                      00991 softstack0isr res 1
                      00992 #endif
                      00993 
0001                  00994 softstack1 res 1                
                      00995 #ifdef HLLMULTITASK
                      00996 softstack1isr res 1
                      00997 #endif
                      00998 
0002                  00999 softstack2 res 1                
                      01000 #ifdef HLLMULTITASK
                      01001 softstack2isr res 1
                      01002 #endif
                      01003 
0003                  01004 alt_fsr res 1
0004                  01005 W_Save res 1 
0005                  01006 STATUS_Save res 1
0006                  01007 FSR_Save res 1
0007                  01008 ALT_Save res 1
0008                  01009 in_isr res 1
                      01010 
                      01011 hllkrna00 CODE
                      01012 
                      01013  
                      01014 
                      01015 
                      01016 #define mterm hllblss00
                      01017 
                      01018 
0000                  01019 mul:  
                      01020 #ifdef HLLMULTITASK
                      01021 #ifdef HLLGUARDhllblss 
                      01022  movf in_isr,f  
                      01023  btfsc STATUS,Z
                      01024  
                      01025 
                      01026 
                      01027  goto mul0
                      01028 
                      01029  POP
                      01030  banksel mterm 
                      01031  movwf mterm
                      01032  clrw 
                      01033  addwf HLINDF,w 
                      01034  decf mterm,f 
                      01035  btfss STATUS,Z 
                      01036  goto $-3
                      01037  movwf HLINDF
                      01038  return
                      01039 
                      01040 
                      01041 
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01042 #undefine mterm
                      01043 
                      01044 
                      01045 #define mterm hllblss00+1
                      01046 
                      01047 
                      01048 mul0:
                      01049 #endif
                      01050 #endif
                      01051 
                      01052  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   ???? ????      01053  banksel mterm 
0004   00??           01054  movwf mterm
0005   0103           01055  clrw 
0006   0700           01056  addwf HLINDF,w 
0007   03??           01057  decf mterm,f 
0008   1D03           01058  btfss STATUS,Z 
0009   2???           01059  goto $-3
000A   0080           01060  movwf HLINDF
000B   0008           01061  return
                      01062 
                      01063 
                      01064 
                      01065 #undefine mterm
                      01066 hllkrna01 CODE
                      01067 
0000                  01068 add: 
                      01069  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   0700           01070  addwf HLINDF,w
0003   0384           01071  decf HLFSR,f 
                      01072  PUSH
0004   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0005   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0006   0008           01073  return
                      01074  
                      01075 hllkrna02 CODE 
                      01076 
0000                  01077 negti:  
0000   0980           01078  comf HLINDF,f
0001   0A80           01079  incf HLINDF,f
0002   0008           01080  return
                      01081  
                      01082 hllkrna03 CODE 
                      01083  
0000                  01084 printch:
                      01085  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
                      01086 #ifdef HLLMULTITASK 
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01087  
                      01088  banksel PIR1
                      01089  btfss PIR1,TXIF  
                      01090  goto $-1 
                      01091 #endif 
                      01092  
0002   1283 1303      01093  banksel TXREG
0004   0099           01094  movwf TXREG  
                      01095  
0005   1283 1303      01096  banksel PIR1
0007   1E0C           01097  btfss PIR1,TXIF  
0008   2???           01098  goto $-1  
0009   0008           01099  return  
                      01100 
                      01101 
                      01102 
                      01103 
                      01104 hllkrna04 CODE
                      01105  
                      01106 
                      01107 
                      01108 #define mterm hllblss00
                      01109 
                      01110 
                      01111 #define mdiv hllblss01
                      01112 
                      01113 
                      01114 #define mquot hllblss02
                      01115 
                      01116 
0000                  01117 modu:  
                      01118 #ifdef HLLMULTITASK
                      01119 #ifdef HLLGUARDhllblss 
                      01120  movf in_isr,f  
                      01121  btfsc STATUS,Z
                      01122  
                      01123 
                      01124 
                      01125  goto modu0
                      01126 
                      01127  banksel mquot 
                      01128  clrf mquot
                      01129  POP
                      01130  movwf mdiv
                      01131  POP
                      01132  movwf mterm
                      01133  movfw mdiv
                      01134  subwf mterm,f
                      01135  btfss STATUS,C 
                      01136  goto $+3
                      01137  incf mquot,f 
                      01138  goto $-4
                      01139  addwf mterm,w
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01140  PUSH
                      01141  return 
                      01142 
                      01143 
                      01144 
                      01145 #undefine mterm
                      01146 
                      01147 
                      01148 #undefine mdiv
                      01149 
                      01150 
                      01151 #undefine mquot
                      01152 
                      01153 
                      01154 #define mterm hllblss00+1
                      01155 
                      01156 
                      01157 #define mdiv hllblss01+1
                      01158 
                      01159 
                      01160 #define mquot hllblss02+1
                      01161 
                      01162 
                      01163 modu0:
                      01164 #endif
                      01165 #endif
                      01166 
0000   ???? ????      01167  banksel mquot 
0002   01??           01168  clrf mquot
                      01169  POP
0003   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0004   0384               M  decf FSR,f 
0005   00??           01170  movwf mdiv
                      01171  POP
0006   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0007   0384               M  decf FSR,f 
0008   00??           01172  movwf mterm
0009   08??           01173  movfw mdiv
000A   02??           01174  subwf mterm,f
000B   1C03           01175  btfss STATUS,C 
000C   2???           01176  goto $+3
000D   0A??           01177  incf mquot,f 
000E   2???           01178  goto $-4
000F   07??           01179  addwf mterm,w
                      01180  PUSH
0010   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0011   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0012   0008           01181  return 
                      01182 
                      01183 
                      01184 
                      01185 #undefine mterm
                      01186 
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01187 
                      01188 #undefine mdiv
                      01189 
                      01190 
                      01191 #undefine mquot
                      01192 hllkrna05 CODE
                      01193 
                      01194 
                      01195 
                      01196 #define mterm hllblss00
                      01197 
                      01198 
                      01199 #define mdiv hllblss01
                      01200 
                      01201 
                      01202 #define mquot hllblss02
                      01203 
                      01204 
0000                  01205 divu:  
                      01206 #ifdef HLLMULTITASK
                      01207 #ifdef HLLGUARDhllblss 
                      01208  movf in_isr,f  
                      01209  btfsc STATUS,Z
                      01210  
                      01211 
                      01212 
                      01213  goto divu0
                      01214 
                      01215  banksel mquot 
                      01216  clrf mquot
                      01217  POP
                      01218  movwf mdiv
                      01219  POP
                      01220  movwf mterm
                      01221  movfw mdiv
                      01222  subwf mterm,f
                      01223  btfss STATUS,C 
                      01224  goto $+3
                      01225  incf mquot,f 
                      01226  goto $-4
                      01227  movfw mquot
                      01228  PUSH
                      01229  return 
                      01230 
                      01231 
                      01232 
                      01233 #undefine mterm
                      01234 
                      01235 
                      01236 #undefine mdiv
                      01237 
                      01238 
                      01239 #undefine mquot
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01240 
                      01241 
                      01242 #define mterm hllblss00+1
                      01243 
                      01244 
                      01245 #define mdiv hllblss01+1
                      01246 
                      01247 
                      01248 #define mquot hllblss02+1
                      01249 
                      01250 
                      01251 divu0:
                      01252 #endif
                      01253 #endif
                      01254 
0000   ???? ????      01255  banksel mquot 
0002   01??           01256  clrf mquot
                      01257  POP
0003   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0004   0384               M  decf FSR,f 
0005   00??           01258  movwf mdiv
                      01259  POP
0006   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0007   0384               M  decf FSR,f 
0008   00??           01260  movwf mterm
0009   08??           01261  movfw mdiv
000A   02??           01262  subwf mterm,f
000B   1C03           01263  btfss STATUS,C 
000C   2???           01264  goto $+3
000D   0A??           01265  incf mquot,f 
000E   2???           01266  goto $-4
000F   08??           01267  movfw mquot
                      01268  PUSH
0010   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0011   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0012   0008           01269  return 
                      01270 
                      01271 
                      01272 
                      01273 #undefine mterm
                      01274 
                      01275 
                      01276 #undefine mdiv
                      01277 
                      01278 
                      01279 #undefine mquot
                      01280 hllkrna06 CODE
                      01281 
                      01282  
                      01283  
                      01284  
0000                  01285 getch:
0000   1283 1303      01286  banksel PIR1
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0002                  01287 geth2: 
0002   1E8C           01288  btfss PIR1,RCIF
0003   2???           01289  goto geth2
0004   1283 1303      01290  banksel RCREG
0006   081A           01291  movf RCREG,w
                      01292  PUSH 
0007   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0008   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0009   0008           01293  return
                      01294  
                      01295 hllkrna07 CODE 
                      01296  
0000                  01297 eq: 
                      01298  POP 
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   0600           01299  xorwf HLINDF,w
0003   3001           01300  movlw .1 
0004   1D03           01301  btfss STATUS,Z
0005   3000           01302  movlw .0 
0006   0384           01303  decf HLFSR,f 
                      01304  PUSH 
0007   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0008   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0009   0008           01305  return
                      01306  
                      01307  
                      01308  
                      01309 
                      01310 #define sstack0 softstack0 
                      01311 #define sstack1 softstack1 
                      01312 #define sstack2 softstack2 
                      01313 
                      01314 hllparmcore macro 
                      01315  movwf sstack2
                      01316  movfw HLFSR 
                      01317            
                      01318                    
                      01319  movwf sstack0
                      01320  movfw HLINDF
                      01321  
                      01322  subwf sstack2,w
                      01323  movwf HLFSR 
                      01324  movfw HLINDF 
                      01325  
                      01326  movwf sstack1
                      01327  
                      01328  movfw sstack0
                      01329  movwf HLFSR 
                      01330  clrf sstack0
                      01331  movfw sstack1 
                      01332  movwf HLINDF
                      01333  
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01334  movfw sstack2
                      01335  pagesel kpush
                      01336  goto kpush 
                      01337  endm
                      01338 
                      01339  
                      01340 hllkrna08 CODE  
0000                  01341 parm:
                      01342  KPOP 
0000   ????               M  bankisel alt_stack ;This is OK for interrupts... part of STATUS 
0001   08??               M  movf in_isr,f ;In shared RAM, no need for BANKSEL
0002   1903               M  btfsc STATUS,Z
0003   2???               M  goto $+0F
0004   0804               M  movfw FSR 
0005   00??               M  movwf softstack0+1 ;Save user stack ptr 
0006   08??               M  movfw alt_fsr ;Get second stack ptr 
0007   0084               M  movwf FSR 
0008   0800               M  movfw INDF ;Dereference it 
0009   0384               M  decf FSR,f ;Decrement it 
000A   00??               M  movwf softstack1+1  ;Save popped value for ret urn 
000B   0804               M  movfw FSR ;Save second stack ptr 
000C   00??               M  movwf alt_fsr 
000D   08??               M  movfw softstack0+1  ;Restore user stack ptr 
000E   0084               M  movwf FSR 
000F   01??               M  clrf softstack0+1
0010   08??               M  movfw softstack1+1  ;Bring back popped value for ret urn 
0011   2???               M  goto $+0E
0012   0804               M  movfw FSR 
0013   00??               M  movwf softstack0 ;Save user stack ptr 
0014   08??               M  movfw alt_fsr ;Get second stack ptr 
0015   0084               M  movwf FSR 
0016   0800               M  movfw INDF ;Dereference it 
0017   0384               M  decf FSR,f ;Decrement it 
0018   00??               M  movwf softstack1  ;Save popped value for ret urn 
0019   0804               M  movfw FSR ;Save second stack ptr 
001A   00??               M  movwf alt_fsr 
001B   08??               M  movfw softstack0  ;Restore user stack ptr 
001C   0084               M  movwf FSR 
001D   01??               M  clrf softstack0
001E   08??               M  movfw softstack1  ;Bring back popped value for ret urn 
001F   ????               M  bankisel stack
                      01343  
                      01344 #ifdef HLLMULTITASK 
                      01345  movf in_isr,f 
                      01346  btfss STATUS,Z
                      01347  goto parm4
                      01348  hllparmcore
                      01349 #undefine sstack0 
                      01350 #undefine sstack1
                      01351 #undefine sstack2 
                      01352 #define sstack0 softstack0+1
                      01353 #define sstack1 softstack1+1
                      01354 #define sstack2 softstack2+1
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01355 parm4:
                      01356 #endif 
                      01357  hllparmcore
0020   00??               M  movwf sstack2
0021   0804               M  movfw HLFSR 
                          M            
                          M                    
0022   00??               M  movwf sstack0
0023   0800               M  movfw HLINDF
                          M  
0024   02??               M  subwf sstack2,w
0025   0084               M  movwf HLFSR 
0026   0800               M  movfw HLINDF 
                          M  
0027   00??               M  movwf sstack1
                          M  
0028   08??               M  movfw sstack0
0029   0084               M  movwf HLFSR 
002A   01??               M  clrf sstack0
002B   08??               M  movfw sstack1 
002C   0080               M  movwf HLINDF
                          M  
002D   08??               M  movfw sstack2
002E   ????               M  pagesel kpush
002F   2???               M  goto kpush 
                      01358 #undefine sstack0 
                      01359 #undefine sstack1
                      01360 #undefine sstack2 
                      01361  
                      01362 hllkrna09 CODE  
0000                  01363 kpop: 
                      01364  KPOP
0000   ????               M  bankisel alt_stack ;This is OK for interrupts... part of STATUS 
0001   08??               M  movf in_isr,f ;In shared RAM, no need for BANKSEL
0002   1903               M  btfsc STATUS,Z
0003   2???               M  goto $+0F
0004   0804               M  movfw FSR 
0005   00??               M  movwf softstack0+1 ;Save user stack ptr 
0006   08??               M  movfw alt_fsr ;Get second stack ptr 
0007   0084               M  movwf FSR 
0008   0800               M  movfw INDF ;Dereference it 
0009   0384               M  decf FSR,f ;Decrement it 
000A   00??               M  movwf softstack1+1  ;Save popped value for ret urn 
000B   0804               M  movfw FSR ;Save second stack ptr 
000C   00??               M  movwf alt_fsr 
000D   08??               M  movfw softstack0+1  ;Restore user stack ptr 
000E   0084               M  movwf FSR 
000F   01??               M  clrf softstack0+1
0010   08??               M  movfw softstack1+1  ;Bring back popped value for ret urn 
0011   2???               M  goto $+0E
0012   0804               M  movfw FSR 
0013   00??               M  movwf softstack0 ;Save user stack ptr 
0014   08??               M  movfw alt_fsr ;Get second stack ptr 
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0015   0084               M  movwf FSR 
0016   0800               M  movfw INDF ;Dereference it 
0017   0384               M  decf FSR,f ;Decrement it 
0018   00??               M  movwf softstack1  ;Save popped value for ret urn 
0019   0804               M  movfw FSR ;Save second stack ptr 
001A   00??               M  movwf alt_fsr 
001B   08??               M  movfw softstack0  ;Restore user stack ptr 
001C   0084               M  movwf FSR 
001D   01??               M  clrf softstack0
001E   08??               M  movfw softstack1  ;Bring back popped value for ret urn 
001F   ????               M  bankisel stack
0020   0008           01365  return 
                      01366  
                      01367 hllkrna10 CODE   
0000                  01368 kpush: 
                      01369  KPUSH
0000   ????               M  bankisel alt_stack ;This is OK for interrupts... part of STATUS 
0001   08??               M  movf in_isr,f ;In shared RAM, no need for BANKSEL
0002   1903               M  btfsc STATUS,Z
0003   2???               M  goto $+0E
0004   00??               M  movwf softstack1+1 ;softstack1 holds parm value being pushed
0005   0804               M  movfw FSR  
0006   00??               M  movwf softstack0+1  ;softstack0 holds FSR
0007   08??               M  movfw alt_fsr 
0008   0084               M  movwf FSR 
0009   08??               M  movfw softstack1+1
000A   0A??               M  incf alt_fsr,f 
000B   0A84               M  incf FSR,f ;The actual kernel push... preincrement for interrupt safety
000C   0080               M  movwf INDF 
000D   08??               M  movfw softstack0+1
000E   0084               M  movwf FSR 
000F   01??               M  clrf softstack0+1 
0010   2???               M  goto $+0D
0011   00??               M  movwf softstack1 ;softstack1 holds parm value being pushed
0012   0804               M  movfw FSR  
0013   00??               M  movwf softstack0  ;softstack0 holds FSR
0014   08??               M  movfw alt_fsr 
0015   0084               M  movwf FSR 
0016   08??               M  movfw softstack1
0017   0A??               M  incf alt_fsr,f 
0018   0A84               M  incf FSR,f ;The actual kernel push... preincrement for interrupt safety
0019   0080               M  movwf INDF 
001A   08??               M  movfw softstack0
001B   0084               M  movwf FSR 
001C   01??               M  clrf softstack0
001D   ????               M  bankisel stack
001E   0008           01370  return
                      01371 
                      01372 hllkrna11 CODE   
0000                  01373 dispose:
                      01374  DISCARD
0000   0384               M  decf FSR,f 
0001   0008           01375  return 
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01376  
                      01377  
                      01378 
                      01379 
                      01380 
                      01381 
                      01382 
                      01383  
                      01384  
                      01385 
                      01386  
                      01387 hlog1b CODE
                      01388 
                      01389 
                      01390 #define margp2 hllblss00
                      01391 
                      01392 
0000                  01393 setbit:  
                      01394 #ifdef HLLMULTITASK
                      01395 #ifdef HLLGUARDhllblss 
                      01396  movf in_isr,f  
                      01397  btfsc STATUS,Z
                      01398  
                      01399 
                      01400 
                      01401  goto setbit0
                      01402 
                      01403  POP
                      01404  banksel margp2
                      01405  movwf  margp2
                      01406  POP
                      01407  xorlw .0
                      01408  btfss STATUS,Z
                      01409  goto tcf00h
                      01410  
                      01411  movfw  margp2
                      01412  iorlw .1
                      01413  goto tcf99h
                      01414 tcf00h: 
                      01415  
                      01416  xorlw .1
                      01417  btfss STATUS,Z
                      01418  goto tcf01h
                      01419  
                      01420  movfw  margp2
                      01421  iorlw .2
                      01422  goto tcf99h
                      01423 tcf01h: 
                      01424  xorlw .1
                      01425  xorlw .2
                      01426  btfss STATUS,Z
                      01427  goto tcf02h
                      01428  
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01429  movfw margp2
                      01430  iorlw .4
                      01431  goto tcf99h
                      01432 tcf02h: 
                      01433  xorlw .2
                      01434  xorlw .3
                      01435  btfss STATUS,Z
                      01436  goto tcf03h
                      01437  
                      01438  movfw margp2
                      01439  iorlw .8
                      01440  goto tcf99h
                      01441 tcf03h: 
                      01442  xorlw .3
                      01443  xorlw .4
                      01444  btfss STATUS,Z
                      01445  goto tcf04h
                      01446  
                      01447  movfw margp2
                      01448  iorlw .16
                      01449  goto tcf99h
                      01450 tcf04h: 
                      01451  xorlw .4
                      01452  xorlw .5
                      01453  btfss STATUS,Z
                      01454  goto tcf05h
                      01455  
                      01456  movfw margp2
                      01457  iorlw .32
                      01458  goto tcf99h
                      01459 tcf05h: 
                      01460  xorlw .5
                      01461  xorlw .6
                      01462  btfss STATUS,Z
                      01463  goto tcf07h
                      01464  
                      01465  movfw margp2
                      01466  iorlw .64
                      01467  goto tcf99h
                      01468 tcf07h: 
                      01469  
                      01470  movfw margp2
                      01471  iorlw .128 
                      01472 tcf99h:  
                      01473  PUSH 
                      01474  return
                      01475 
                      01476 
                      01477 
                      01478 
                      01479 #undefine margp2
                      01480 
                      01481 
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01482 #define margp2 hllblss00+1
                      01483 
                      01484 
                      01485 setbit0:
                      01486 #endif
                      01487 #endif
                      01488 
                      01489  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   ???? ????      01490  banksel margp2
0004   00??           01491  movwf  margp2
                      01492  POP
0005   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0006   0384               M  decf FSR,f 
0007   3A00           01493  xorlw .0
0008   1D03           01494  btfss STATUS,Z
0009   2???           01495  goto hllMAAAA
                      01496  
000A   08??           01497  movfw  margp2
000B   3801           01498  iorlw .1
000C   2???           01499  goto hllTAAAA
000D                  01500 hllMAAAA: 
                      01501  
000D   3A01           01502  xorlw .1
000E   1D03           01503  btfss STATUS,Z
000F   2???           01504  goto hllNAAAA
                      01505  
0010   08??           01506  movfw  margp2
0011   3802           01507  iorlw .2
0012   2???           01508  goto hllTAAAA
0013                  01509 hllNAAAA: 
0013   3A01           01510  xorlw .1
0014   3A02           01511  xorlw .2
0015   1D03           01512  btfss STATUS,Z
0016   2???           01513  goto hllOAAAA
                      01514  
0017   08??           01515  movfw margp2
0018   3804           01516  iorlw .4
0019   2???           01517  goto hllTAAAA
001A                  01518 hllOAAAA: 
001A   3A02           01519  xorlw .2
001B   3A03           01520  xorlw .3
001C   1D03           01521  btfss STATUS,Z
001D   2???           01522  goto hllPAAAA
                      01523  
001E   08??           01524  movfw margp2
001F   3808           01525  iorlw .8
0020   2???           01526  goto hllTAAAA
0021                  01527 hllPAAAA: 
0021   3A03           01528  xorlw .3
0022   3A04           01529  xorlw .4
0023   1D03           01530  btfss STATUS,Z
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0024   2???           01531  goto hllQAAAA
                      01532  
0025   08??           01533  movfw margp2
0026   3810           01534  iorlw .16
0027   2???           01535  goto hllTAAAA
0028                  01536 hllQAAAA: 
0028   3A04           01537  xorlw .4
0029   3A05           01538  xorlw .5
002A   1D03           01539  btfss STATUS,Z
002B   2???           01540  goto hllRAAAA
                      01541  
002C   08??           01542  movfw margp2
002D   3820           01543  iorlw .32
002E   2???           01544  goto hllTAAAA
002F                  01545 hllRAAAA: 
002F   3A05           01546  xorlw .5
0030   3A06           01547  xorlw .6
0031   1D03           01548  btfss STATUS,Z
0032   2???           01549  goto hllSAAAA
                      01550  
0033   08??           01551  movfw margp2
0034   3840           01552  iorlw .64
0035   2???           01553  goto hllTAAAA
0036                  01554 hllSAAAA: 
                      01555  
0036   08??           01556  movfw margp2
0037   3880           01557  iorlw .128 
0038                  01558 hllTAAAA:  
                      01559  PUSH 
0038   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0039   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
003A   0008           01560  return
                      01561 
                      01562 
                      01563 
                      01564 
                      01565 #undefine margp2
                      01566 
30C6                  01567  end
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 41


SYMBOL TABLE
  LABEL                             VALUE 

ABDEN                             00000000
ABDOVF                            00000007
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000004
ADCS1                             00000005
ADCS2                             00000006
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
ALT_Save                          00000007
ANS0                              00000000
ANS1                              00000001
ANS10                             00000002
ANS11                             00000003
ANS2                              00000002
ANS3                              00000003
ANS4                              00000004
ANS5                              00000005
ANS6                              00000006
ANS7                              00000007
ANS8                              00000000
ANS9                              00000001
ANSEL                             0000011E
ANSELH                            0000011F
BAUDCTL                           0000009B
BF                                00000000
BRG0                              00000000
BRG1                              00000001
BRG10                             00000002
BRG11                             00000003
BRG12                             00000004
BRG13                             00000005
BRG14                             00000006
BRG15                             00000007
BRG16                             00000003
BRG2                              00000002
BRG3                              00000003
BRG4                              00000004
BRG5                              00000005
BRG6                              00000006
BRG7                              00000007
BRG8                              00000000
BRG9                              00000001
BRGH                              00000002
C                                 00000000
C1CH0                             00000000
C1CH1                             00000001
C1IE                              00000005
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 42


SYMBOL TABLE
  LABEL                             VALUE 

C1IF                              00000005
C1OE                              00000005
C1ON                              00000007
C1OUT                             00000006
C1POL                             00000004
C1R                               00000002
C1SEN                             00000005
C1VREN                            00000007
C2CH0                             00000000
C2CH1                             00000001
C2IE                              00000006
C2IF                              00000006
C2OE                              00000005
C2ON                              00000007
C2OUT                             00000006
C2POL                             00000004
C2R                               00000002
C2REN                             00000004
C2SYNC                            00000000
C2VREN                            00000006
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCPR1H                            00000016
CCPR1L                            00000015
CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CKE                               00000006
CKP                               00000004
CM1CON0                           00000119
CM2CON0                           0000011A
CM2CON1                           0000011B
COPY                              
CREN                              00000004
CSRC                              00000007
D                                 00000005
DATA_ADDRESS                      00000005
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DISCARD                           
D_A                               00000005
ECCPAS                            0000001D
ECCPAS0                           00000004
ECCPAS1                           00000005
ECCPAS2                           00000006
ECCPASE                           00000007
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 43


SYMBOL TABLE
  LABEL                             VALUE 

EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDAT                             0000010C
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
F                                 00000001
FAR_CALL                          
FERR                              00000002
FSR                               00000004
FSR_Save                          00000006
GIE                               00000007
GO                                00000001
GO_DONE                           00000001
HALF_FAR_CALL                     
HLFSR                             FSR
HLINDF                            INDF
HLLGUARDhllblss                   
HLOE_STACK2_SIZE                  .20
HLOE_STACK_SIZE                   .80
HLTABLE                           
HTS                               00000002
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IOC                               00000096
IOC0                              00000000
IOC1                              00000001
IOC2                              00000002
IOC3                              00000003
IOC4                              00000004
IOC5                              00000005
IOCA                              00000096
IOCA0                             00000000
IOCA1                             00000001
IOCA2                             00000002
IOCA3                             00000003
IOCA4                             00000004
IOCA5                             00000005
IOCB                              00000116
IOCB4                             00000004
IOCB5                             00000005
IOCB6                             00000006
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 44


SYMBOL TABLE
  LABEL                             VALUE 

IOCB7                             00000007
IRCF0                             00000004
IRCF1                             00000005
IRCF2                             00000006
IRP                               00000007
KDISCARD                          
KPOP                              
KPUSH                             
LTS                               00000001
MC1OUT                            00000007
MC2OUT                            00000006
MSK                               00000093
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BOR                           00000000
NOT_DONE                          00000001
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RABPU                         00000007
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_W                             00000002
NOT_WRITE                         00000002
OERR                              00000001
OPTION_REG                        00000081
OSCCON                            0000008F
OSCTUNE                           00000090
OSFIE                             00000007
OSFIF                             00000007
OSTS                              00000003
P                                 00000004
P1M0                              00000006
P1M1                              00000007
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PC_Save                           00000001
PDC0                              00000000
PDC1                              00000001
PDC2                              00000002
PDC3                              00000003
PDC4                              00000004
PDC5                              00000005
PDC6                              00000006
PEIE                              00000006
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
POP                               
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 45


SYMBOL TABLE
  LABEL                             VALUE 

PR2                               00000092
PREEMPT                           
PRSEN                             00000007
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSSAC0                            00000002
PSSAC1                            00000003
PSSBD0                            00000000
PSSBD1                            00000001
PSTRCON                           0000019D
PULSR                             00000002
PULSS                             00000003
PUSH                              
PWM1CON                           0000001C
R                                 00000002
RABIE                             00000003
RABIF                             00000000
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
READ_WRITE                        00000002
RESUME                            
RP0                               00000005
RP1                               00000006
RX9                               00000006
RX9D                              00000000
R_W                               00000002
S                                 00000003
SBOREN                            00000004
SCKP                              00000004
SCS                               00000000
SENB                              00000003
SMP                               00000007
SPBRG                             00000099
SPBRGH                            0000009A
SPEN                              00000007
SR0                               00000006
SR1                               00000007
SRCON                             0000019E
SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 46


SYMBOL TABLE
  LABEL                             VALUE 

SSPM2                             00000002
SSPM3                             00000003
SSPMSK                            00000093
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
STATUS_Save                       00000005
STRA                              00000000
STRB                              00000001
STRC                              00000002
STRD                              00000003
STRSYNC                           00000004
SWDTEN                            00000000
SYNC                              00000004
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1GINV                            00000007
T1GSS                             00000001
T1IE                              00000000
T1IF                              00000000
T1OSCEN                           00000003
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
T2IE                              00000001
T2IF                              00000001
TMR0                              00000001
TMR1CS                            00000001
TMR1GE                            00000006
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 47


SYMBOL TABLE
  LABEL                             VALUE 

TRISA5                            00000005
TRISB                             00000086
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRMT                              00000001
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
TUN3                              00000003
TUN4                              00000004
TX9                               00000006
TX9D                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
UA                                00000001
ULPWUE                            00000005
VCFG                              00000006
VP6EN                             00000004
VR0                               00000000
VR1                               00000001
VR2                               00000002
VR3                               00000003
VRCON                             00000118
VRR                               00000005
W                                 00000000
WCOL                              00000007
WDTCON                            00000097
WDTPS0                            00000001
WDTPS1                            00000002
WDTPS2                            00000003
WDTPS3                            00000004
WPU                               00000095
WPUA                              00000095
WPUA0                             00000000
WPUA1                             00000001
WPUA2                             00000002
WPUA4                             00000004
WPUA5                             00000005
WPUB                              00000115
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 48


SYMBOL TABLE
  LABEL                             VALUE 

WPUB4                             00000004
WPUB5                             00000005
WPUB6                             00000006
WPUB7                             00000007
WR                                00000001
WREN                              00000002
WRERR                             00000003
WUE                               00000001
W_Save                            00000004
Z                                 00000002
_BOR_NSLEEP                       00003EFF
_BOR_OFF                          00003CFF
_BOR_ON                           00003FFF
_BOR_SBODEN                       00003DFF
_CPD_OFF                          00003FFF
_CPD_ON                           00003F7F
_CP_OFF                           00003FFF
_CP_ON                            00003FBF
_EC_OSC                           00003FFB
_EXTRC                            00003FFF
_EXTRCIO                          00003FFE
_EXTRC_OSC_CLKOUT                 00003FFF
_EXTRC_OSC_NOCLKOUT               00003FFE
_FCMEN_OFF                        000037FF
_FCMEN_ON                         00003FFF
_HS_OSC                           00003FFA
_IESO_OFF                         00003BFF
_IESO_ON                          00003FFF
_INTOSC                           00003FFD
_INTOSCIO                         00003FFC
_INTRC_OSC_CLKOUT                 00003FFD
_INTRC_OSC_NOCLKOUT               00003FFC
_LP_OSC                           00003FF8
_MCLRE_OFF                        00003FDF
_MCLRE_ON                         00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FEF
_WDT_OFF                          00003FF7
_WDT_ON                           00003FFF
_XT_OSC                           00003FF9
__16F690                          00000001
_hllkrna00_0009                   00000009
_hllkrna03_0008                   00000008
_hllkrna04_000C                   0000000C
_hllkrna04_000E                   0000000E
_hllkrna05_000C                   0000000C
_hllkrna05_000E                   0000000E
_hllkrna08_0003                   00000003
_hllkrna08_0011                   00000011
_hllkrna09_0003                   00000003
_hllkrna09_0011                   00000011
_hllkrna10_0003                   00000003
_hllkrna10_0010                   00000010
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 49


SYMBOL TABLE
  LABEL                             VALUE 

aart00                            00000000
aart01                            00000001
aart02                            00000002
aartpr00                          00000000
add                               00000000
alt_fsr                           00000003
alt_stack                         00000000
clearbit                          00000000
dispose                           00000000
divu                              00000000
eq                                00000000
fastdivu                          00000000
fstdvss00                         00000000
fstdvss01                         00000001
fstdvss02                         00000002
fstdvss03                         00000003
fstdvss04                         00000004
fstdvss05                         00000005
getch                             00000000
geth2                             00000002
hllAAAAA                          0000000D
hllBAAAA                          00000013
hllCAAAA                          0000001A
hllDAAAA                          00000021
hllEAAAA                          00000028
hllFAAAA                          0000002F
hllGAAAA                          00000036
hllHAAAA                          00000038
hllIAAAA                          0000000E
hllJAAAA                          0000001D
hllKAAAA                          00000025
hllLAAAA                          00000027
hllMAAAA                          0000000D
hllNAAAA                          00000013
hllOAAAA                          0000001A
hllPAAAA                          00000021
hllQAAAA                          00000028
hllRAAAA                          0000002F
hllSAAAA                          00000036
hllTAAAA                          00000038
hllblss00                         00000000
hllblss01                         00000001
hllblss02                         00000002
hllparmcore                       
hllprgen2                         000000D1
hllprogend                        000000D0
hlluserprog                       00000000
hloego                            00000000
in_isr                            00000008
kpop                              00000000
kpush                             00000000
modu                              00000000
mul                               00000000
MPASM  5.37                        TARGET.ASM   5-5-2015  21:23:23         PAGE 50


SYMBOL TABLE
  LABEL                             VALUE 

negti                             00000000
parm                              00000000
pbase                             00000000
printch                           00000000
printu                            00000000
setbit                            00000000
softstack0                        00000000
softstack1                        00000001
softstack2                        00000002
stack                             00000000

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     8 suppressed

