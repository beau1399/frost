MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 
                      00002 #include "hloe.inc"
                      00001 
                      00002 
                      00003 #define HLLGUARDhllblss
                      00004 
                      00005 
                      00006 #define HLOE_STACK_SIZE .80
                      00007 #define HLOE_STACK2_SIZE .20
                      00008 
                      00009 
                      00010 #include <p16f690.inc>
                      00001         LIST
                      00002 ; P16F690.INC  Standard Header File, Version 1.00    Microchip Technology, Inc.
                      00607         LIST
                      00011 #include "../frostcompiler/kernel.inc"
                      00001 PUSH macro ;Push to the main stack for the programmer's parms and dyn. data;
                      00002  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
                      00003  movwf INDF ; code of any sort will not overwrite the data. 
                      00004  endm 
                      00005  
                      00006 POP macro ;Pop from main stack; "decf" is the de-allocator and thus happens last to 
                      00007  movfw INDF ; preserve the safety of this code under interruptible conditions. 
                      00008  decf FSR,f 
                      00009  endm
                      00010  
                      00011 DISCARD macro ;Remove items from the main stack and throw them away w/o affecting W
                      00012  decf FSR,f 
                      00013  endm
                      00014  
                      00015 KDISCARD macro ;Remove items from stack 2 and throw them away w/o affecting W
                      00016  decf alt_fsr,f 
                      00017  endm
                      00018 
                      00019 COPY macro ;Duplicate stack top
                      00020  movfw INDF
                      00021  incf FSR,f 
                      00022  movwf INDF 
                      00023  endm
                      00024 
                      00025 #define HLFSR FSR
                      00026  
                      00027 #define HLINDF INDF
                      00028 
                      00029   
                      00030 FAR_CALL macro caller_os,func_os ;Call destination residing within a different code page
                      00031  pagesel func_os
                      00032  call func_os
                      00033  pagesel caller_os ;This one restores the caller's code page
                      00034  endm
                      00035 
                      00036 ;Call destination residing within a different code page... does not restore the caller's
                      00037 ; code page after return, which may be OK (e.g. if the next operation is another 'Far'
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00038 ; function call). 
                      00039 HALF_FAR_CALL macro func_os 
                      00040  pagesel func_os        
                      00041  call func_os
                      00042  endm
                      00043  
                      00044 KPOP macro
                      00045  bankisel alt_stack ;This is OK for interrupts... part of STATUS 
                      00046  movf in_isr,f ;In shared RAM, no need for BANKSEL
                      00047  btfsc STATUS,Z
                      00048  goto $+0F
                      00049  movfw FSR 
                      00050  movwf softstack0+1 ;Save user stack ptr 
                      00051  movfw alt_fsr ;Get second stack ptr 
                      00052  movwf FSR 
                      00053  movfw INDF ;Dereference it 
                      00054  decf FSR,f ;Decrement it 
                      00055  movwf softstack1+1  ;Save popped value for ret urn 
                      00056  movfw FSR ;Save second stack ptr 
                      00057  movwf alt_fsr 
                      00058  movfw softstack0+1  ;Restore user stack ptr 
                      00059  movwf FSR 
                      00060  clrf softstack0+1
                      00061  movfw softstack1+1  ;Bring back popped value for ret urn 
                      00062  goto $+0E
                      00063  movfw FSR 
                      00064  movwf softstack0 ;Save user stack ptr 
                      00065  movfw alt_fsr ;Get second stack ptr 
                      00066  movwf FSR 
                      00067  movfw INDF ;Dereference it 
                      00068  decf FSR,f ;Decrement it 
                      00069  movwf softstack1  ;Save popped value for ret urn 
                      00070  movfw FSR ;Save second stack ptr 
                      00071  movwf alt_fsr 
                      00072  movfw softstack0  ;Restore user stack ptr 
                      00073  movwf FSR 
                      00074  clrf softstack0
                      00075  movfw softstack1  ;Bring back popped value for ret urn 
                      00076  bankisel stack
                      00077  endm 
                      00078 
                      00079 KPUSH macro
                      00080  bankisel alt_stack ;This is OK for interrupts... part of STATUS 
                      00081  movf in_isr,f ;In shared RAM, no need for BANKSEL
                      00082  btfsc STATUS,Z
                      00083  goto $+0E
                      00084  movwf softstack1+1 ;softstack1 holds parm value being pushed
                      00085  movfw FSR  
                      00086  movwf softstack0+1  ;softstack0 holds FSR
                      00087  movfw alt_fsr 
                      00088  movwf FSR 
                      00089  movfw softstack1+1
                      00090  incf alt_fsr,f 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00091  incf FSR,f ;The actual kernel push... preincrement for interrupt safety
                      00092  movwf INDF 
                      00093  movfw softstack0+1
                      00094  movwf FSR 
                      00095  clrf softstack0+1 
                      00096  goto $+0D
                      00097  movwf softstack1 ;softstack1 holds parm value being pushed
                      00098  movfw FSR  
                      00099  movwf softstack0  ;softstack0 holds FSR
                      00100  movfw alt_fsr 
                      00101  movwf FSR 
                      00102  movfw softstack1
                      00103  incf alt_fsr,f 
                      00104  incf FSR,f ;The actual kernel push... preincrement for interrupt safety
                      00105  movwf INDF 
                      00106  movfw softstack0
                      00107  movwf FSR 
                      00108  clrf softstack0
                      00109  bankisel stack
                      00110  endm
                      00111  
                      00112 ;These are simple shifts, similar to << or >> in C, not rotates. Newer PICs include
                      00113 ; a native shift instruction that shifts in zeroes like << and >>. Older devices 
                      00114 ; can only rotate bits through the C register, requiring an extra instruction to
                      00115 ; clear C in cases where a simple shift is needed.
                      00116 LSHIFT macro file_reg
                      00117  bcf STATUS,C    ;RLF is a bit shift operation that's present on both the 16F690 (for example) and the 1
                            6F1827.
                      00118  rlf file_reg,f  ; It's a rotate, pulling from C for the necessary bottom-order bit       
                      00119  endm 
                      00120 
                      00121 RSHIFT macro file_reg
                      00122  bcf STATUS,C    ;RRF is a bit shift operation that's present on both the 16F690 (for example) and the 1
                            6F1827.
                      00123  rrf file_reg,f  ; It's a rotate, pulling from C for the necessary bottom-order bit       
                      00124  endm 
                      00125  
                      00126 PREEMPT macro
                      00127 #ifdef HLLMULTITASK 
                      00128  movwf W_Save ; save context- save W in "W_save" file reg.
                      00129  ;From datasheet... save STATUS properly
                      00130  swapf STATUS,W 
                      00131  movwf STATUS_Save 
                      00132  movf FSR,w 
                      00133  movwf FSR_Save 
                      00134  movf PCLATH,w ; save status in "STATUS_Save" file reg.
                      00135  movwf PC_Save 
                      00136  movf alt_fsr,w 
                      00137  movwf ALT_Save
                      00138  incf in_isr,f
                      00139  pagesel ISR
                      00140  bankisel stack 
                      00141  movf FSR,w           ;Restore "softstack" if main thread was using 2nd stack
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00142  movf softstack0,f        ; (coded to preserve constant interrupt latency)
                      00143  btfss STATUS,Z       
                      00144  movf softstack0,w  
                      00145  movwf FSR          
                      00146 #endif 
                      00147  endm
                      00148  
                      00149 RESUME macro
                      00150  
                      00151 #ifdef HLLMULTITASK 
                      00152  clrf in_isr
                      00153  movf ALT_Save,w
                      00154  movwf alt_fsr 
                      00155  movf PC_Save,w ; restore context (W and STATUS)
                      00156  movwf PCLATH
                      00157  movf FSR_Save,w 
                      00158  movwf FSR
                      00159  ;Per the datasheet...
                      00160  swapf STATUS_Save,W
                      00161  movwf STATUS ;Move W into Status reg
                      00162  swapf W_Save,F ;Swap W_TEMP
                      00163  swapf W_Save,W ;Swap W_TEMP into W
                      00164 #endif
                      00165 
                      00166  endm
                      00167  
                      00168 ; Table macro.. this followed by any series of RETLW calls
                      00169 ; transforms said call list into a function that takes an offset
                      00170 ; and returns that entry in the table (takes 1 byte, returns 1
                      00171 ; byte... this goes atop the HLL feature which allows generation 
                      00172 ; of tables. It can also go atop RETLW tables entered into assembly 
                      00173 ; files in a very basic fashion when doing assembly programming. In 
                      00174 ; either case, the overall result can be called exactly as if it were any 
                      00175 ; other HLOE function
                      00176 HLTABLE macro mmnme
                      00177 mmnme:
                      00178  movlw high mmnme#v(2) ; Necess. b/c writes to PCL take 5 bits fr. PCLATH
                      00179  movwf PCLATH ; and PAGESEL doesn't take care of all 5
                      00180  movlw low mmnme#v(2) ; Perform pointer arithmetic
                      00181  addwf INDF,w 
                      00182  decf FSR,f
                      00183  btfsc STATUS,C ; Necess. b/c writes to PCL take 5 bits fr. PCLATH
                      00184  incf PCLATH,f 
                      00185  movwf PCL 
                      00186 mmnme#v(2): 
                      00187  ;retlw K, retlw K, etc. go here
                      00188  endm
                      00189  
                      00003 
2007   33C4           00004  __config (_INTRC_OSC_NOCLKOUT & _WDT_OFF & _PWRTE_ON & _MCLRE_OFF & _CP_OFF & _BOR_ON & _IESO_OFF & _FC
                            MEN_OFF)
                      00005 
                      00006 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00007 
                      00008 
                      00009 Resetv code 0 
0000   138B           00010  bcf INTCON,GIE
0001   ????           00011  pagesel hloego
0002   2???           00012  goto hloego
                      00013  
                      00014 #ifdef HLLMULTITASK
                      00015 vectr code 4     ;Device specific
                      00016 ISR:
                      00017 
                      00018 
                      00019  PREEMPT
                      00020 #endif
                      00021 #ifdef HLLMULTITASK
                      00022 ExitISR:    
                      00023 
                      00024   RESUME
                      00025   
                      00026   
                      00027   retfie
                      00028 #endif
                      00029 
                      00030 mainvars udata_shr      
                      00031 #ifdef HLLMULTITASK
                      00032 pbase res .1                    ; Used for functions w/ numbered pass/return, to clean up parms/push arg
                            s
                      00033 pbaseisr res .1 
                      00034 #else
0000                  00035 pbase res .1
                      00036 #endif
                      00037 
0001                  00038 PC_Save res .1
                      00039 
                      00040 main code
0000                  00041 hloego:
                      00042 
                      00043  
0000   01??           00044   clrf in_isr
                      00045  
0001   30??           00046   movlw stack-1         ;Set up stack starting position based on literals det. by incremental linker
0002   0084           00047   movwf FSR 
0003   30??           00048   movlw alt_stack-1
0004   00??           00049   movwf alt_fsr 
                      00050   
                      00051   
0005   01??           00052   clrf softstack0
                      00053  
0006   ????           00054  bankisel stack
0007   ????           00055  pagesel hlluserprog
0008   2???           00056  goto hlluserprog
                      00057 hllupuser CODE
0000                  00058 hlluserprog: 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00059  
                      00060 
0000   3070           00061  movlw .112 
                      00062  PUSH 
0001   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0002   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00063 
0003   1683 1303      00064    banksel OSCCON
0005   080F           00065    movfw OSCCON
                      00066    
                      00067    
                      00068  PUSH 
0006   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0007   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00069 
                      00070 
                      00071  
                      00072  FAR_CALL hlluserprog,oru
0008   ????               M  pagesel oru
0009   2???               M  call oru
000A   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00073 
                      00074  POP
000B   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
000C   0384               M  decf FSR,f 
000D   1683 1303      00075  banksel OSCCON
000F   008F           00076  movwf OSCCON
                      00077  
                      00078 
                      00079 
0010   3011           00080  movlw .17 
                      00081  
0011   1683 1303      00082  banksel SPBRG
0013   0099           00083  movwf SPBRG
                      00084  
                      00085 
                      00086 
0014   3000           00087  movlw .0 
                      00088  
0015   1683 1303      00089  banksel SPBRGH
0017   009A           00090  movwf SPBRGH
                      00091  
                      00092 
                      00093 
0018   3004           00094  movlw SYNC
                      00095 
                      00096  PUSH 
0019   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
001A   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00097 
001B   1683 1303      00098    banksel TXSTA
001D   0818           00099    movfw TXSTA
                      00100    
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00101    
                      00102  PUSH 
001E   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
001F   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00103 
                      00104 
                      00105  
                      00106  FAR_CALL hlluserprog,clearbit
0020   ????               M  pagesel clearbit
0021   2???               M  call clearbit
0022   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00107 
                      00108  POP
0023   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0024   0384               M  decf FSR,f 
0025   1683 1303      00109  banksel TXSTA
0027   0098           00110  movwf TXSTA
                      00111  
                      00112 
                      00113 
0028   3004           00114  movlw CREN
                      00115 
                      00116  PUSH 
0029   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
002A   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00117 
002B   1283 1303      00118    banksel RCSTA
002D   0818           00119    movfw RCSTA
                      00120    
                      00121    
                      00122  PUSH 
002E   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
002F   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00123 
                      00124 
                      00125  
                      00126  FAR_CALL hlluserprog,clearbit
0030   ????               M  pagesel clearbit
0031   2???               M  call clearbit
0032   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00127 
                      00128  POP
0033   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0034   0384               M  decf FSR,f 
0035   1283 1303      00129  banksel RCSTA
0037   0098           00130  movwf RCSTA
                      00131  
                      00132 
                      00133 
0038   3004           00134  movlw CREN
                      00135 
                      00136  PUSH 
0039   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

003A   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00137 
003B   1283 1303      00138    banksel RCSTA
003D   0818           00139    movfw RCSTA
                      00140    
                      00141    
                      00142  PUSH 
003E   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
003F   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00143 
                      00144 
                      00145  
                      00146  FAR_CALL hlluserprog,setbit
0040   ????               M  pagesel setbit
0041   2???               M  call setbit
0042   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00147 
                      00148  POP
0043   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0044   0384               M  decf FSR,f 
0045   1283 1303      00149  banksel RCSTA
0047   0098           00150  movwf RCSTA
                      00151  
                      00152 
                      00153 
0048   3007           00154  movlw SPEN
                      00155 
                      00156  PUSH 
0049   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
004A   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00157 
004B   1283 1303      00158    banksel RCSTA
004D   0818           00159    movfw RCSTA
                      00160    
                      00161    
                      00162  PUSH 
004E   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
004F   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00163 
                      00164 
                      00165  
                      00166  FAR_CALL hlluserprog,setbit
0050   ????               M  pagesel setbit
0051   2???               M  call setbit
0052   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00167 
                      00168  POP
0053   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0054   0384               M  decf FSR,f 
0055   1283 1303      00169  banksel RCSTA
0057   0098           00170  movwf RCSTA
                      00171  
                      00172 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00173 
0058   3005           00174  movlw TXEN
                      00175 
                      00176  PUSH 
0059   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
005A   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00177 
                      00178 
005B   3006           00179  movlw TX9
                      00180 
                      00181  PUSH 
005C   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
005D   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00182 
                      00183 
005E   3002           00184  movlw BRGH
                      00185 
                      00186  PUSH 
005F   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0060   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00187 
0061   1683 1303      00188    banksel TXSTA
0063   0818           00189    movfw TXSTA
                      00190    
                      00191    
                      00192  PUSH 
0064   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0065   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00193 
                      00194 
                      00195  
                      00196  HALF_FAR_CALL setbit
0066   ????               M  pagesel setbit         
0067   2???               M  call setbit
                      00197 
                      00198 
                      00199  
                      00200  HALF_FAR_CALL clearbit
0068   ????               M  pagesel clearbit       
0069   2???               M  call clearbit
                      00201 
                      00202 
                      00203  
                      00204  FAR_CALL hlluserprog,setbit
006A   ????               M  pagesel setbit
006B   2???               M  call setbit
006C   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00205 
                      00206  POP
006D   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
006E   0384               M  decf FSR,f 
006F   1683 1303      00207  banksel TXSTA
0071   0098           00208  movwf TXSTA
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00209  
                      00210 
                      00211 
0072   3003           00212  movlw BRG16
                      00213 
                      00214  PUSH 
0073   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0074   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00215 
                      00216 
0075   3004           00217  movlw SCKP
                      00218 
                      00219  PUSH 
0076   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0077   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00220 
0078   1683 1303      00221    banksel BAUDCTL
007A   081B           00222    movfw BAUDCTL
                      00223    
                      00224    
                      00225  PUSH 
007B   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
007C   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00226 
                      00227 
                      00228  
                      00229  HALF_FAR_CALL setbit
007D   ????               M  pagesel setbit         
007E   2???               M  call setbit
                      00230 
                      00231 
                      00232  
                      00233  FAR_CALL hlluserprog,setbit
007F   ????               M  pagesel setbit
0080   2???               M  call setbit
0081   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00234 
                      00235  POP
0082   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0083   0384               M  decf FSR,f 
0084   1683 1303      00236  banksel BAUDCTL
0086   009B           00237  movwf BAUDCTL
                      00238  
                      00239 
                      00240 
0087   3000           00241  movlw .0 
                      00242  
0088   1283 1703      00243  banksel ANSELH
008A   009F           00244  movwf ANSELH
                      00245  
                      00246 
                      00247 
008B   3000           00248  movlw .0 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00249  
008C   1283 1703      00250  banksel ANSEL
008E   009E           00251  movwf ANSEL
                      00252  
                      00253 
                      00254 
008F   3005           00255  movlw RCIE
                      00256 
                      00257  PUSH 
0090   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0091   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00258 
                      00259 
0092   3004           00260  movlw TXIE
                      00261 
                      00262  PUSH 
0093   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0094   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00263 
0095   1683 1303      00264    banksel PIE1
0097   080C           00265    movfw PIE1
                      00266    
                      00267    
                      00268  PUSH 
0098   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0099   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00269 
                      00270 
                      00271  
                      00272  HALF_FAR_CALL clearbit
009A   ????               M  pagesel clearbit       
009B   2???               M  call clearbit
                      00273 
                      00274 
                      00275  
                      00276  FAR_CALL hlluserprog,clearbit
009C   ????               M  pagesel clearbit
009D   2???               M  call clearbit
009E   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00277 
                      00278  POP
009F   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
00A0   0384               M  decf FSR,f 
00A1   1683 1303      00279  banksel PIE1
00A3   008C           00280  movwf PIE1
                      00281  
                      00282 
                      00283 
00A4   3004           00284  movlw TXIE
                      00285 
                      00286  PUSH 
00A5   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00A6   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00287 
                      00288 
00A7   3005           00289  movlw RCIE
                      00290 
                      00291  PUSH 
00A8   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00A9   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00292 
00AA   1683 1303      00293    banksel PIE1
00AC   080C           00294    movfw PIE1
                      00295    
                      00296    
                      00297  PUSH 
00AD   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00AE   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00298 
                      00299 
                      00300  
                      00301  HALF_FAR_CALL clearbit
00AF   ????               M  pagesel clearbit       
00B0   2???               M  call clearbit
                      00302 
                      00303 
                      00304  
                      00305  FAR_CALL hlluserprog,clearbit
00B1   ????               M  pagesel clearbit
00B2   2???               M  call clearbit
00B3   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00306 
                      00307  POP
00B4   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
00B5   0384               M  decf FSR,f 
00B6   1683 1303      00308  banksel PIE1
00B8   008C           00309  movwf PIE1
                      00310  
                      00311 
                      00312 
00B9   3000           00313  movlw .0 
                      00314  
00BA   1283 1303      00315  banksel INTCON
00BC   008B           00316  movwf INTCON
                      00317  
                      00318 
                      00319 
                      00320  
                      00321  HALF_FAR_CALL cls
00BD   ????               M  pagesel cls            
00BE   2???               M  call cls
                      00322 
                      00323 
                      00324  
                      00325  FAR_CALL hlluserprog,longf
00BF   ????               M  pagesel longf
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00C0   2???               M  call longf
00C1   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00326 
                      00327     
00C2                  00328 hllprogend:
00C2   2???           00329  goto hllprogend
                      00330  
                      00331 
                      00332 hllt450 CODE
0000                  00333 longf:
0000   0804           00334  movf FSR,w
                      00335  
                      00336 
                      00337  
                      00338  FAR_CALL longf ,kpush
0001   ????               M  pagesel kpush
0002   2???               M  call kpush
0003   ????               M  pagesel longf     ;This one restores the caller's code page
                      00339 
                      00340 
0004   300A           00341  movlw .10 
                      00342  PUSH 
0005   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0006   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00343 
                      00344 
0007   300A           00345  movlw .10 
                      00346  PUSH 
0008   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0009   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00347 
                      00348 
000A   3041           00349  movlw .65
                      00350  PUSH 
000B   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
000C   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00351 
                      00352 
                      00353  
                      00354  FAR_CALL longf,wrapstringA
000D   ????               M  pagesel wrapstringA
000E   2???               M  call wrapstringA
000F   ????               M  pagesel longf     ;This one restores the caller's code page
                      00355 
                      00356  ;
                      00357  KDISCARD 
0010   03??               M  decf alt_fsr,f 
0011   2???           00358  goto longf
                      00359 
                      00360  
                      00361 
                      00362 hllt451 CODE
0000                  00363 makespaces:
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000   0804           00364  movf FSR,w
                      00365  
                      00366 
                      00367  
                      00368  FAR_CALL makespaces ,kpush
0001   ????               M  pagesel kpush
0002   2???               M  call kpush
0003   ????               M  pagesel makespaces ;This one restores the caller's code page
                      00369 
                      00370 
0004   30FF           00371  movlw -.1
                      00372  PUSH 
0005   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0006   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00373 
                      00374 
                      00375  
                      00376  HALF_FAR_CALL add
0007   ????               M  pagesel add            
0008   2???               M  call add
                      00377 
                      00378 
                      00379  
                      00380  HALF_FAR_CALL makespacesi
0009   ????               M  pagesel makespacesi    
000A   2???               M  call makespacesi
                      00381 
                      00382 
                      00383  
                      00384  FAR_CALL makespaces,kpop
000B   ????               M  pagesel kpop
000C   2???               M  call kpop
000D   ????               M  pagesel makespaces ;This one restores the caller's code page
                      00385 
                      00386 ;LOAD POINTER
000E   0084           00387  movwf FSR
                      00388  
                      00389 
                      00390  DISCARD
000F   0384               M  decf FSR,f 
                      00391 
                      00392 
0010   0008           00393  return
                      00394  
                      00395 
                      00396 hllt454 CODE
0000                  00397 makespacesi:
0000   0804           00398  movf FSR,w
                      00399  
                      00400 
                      00401  
                      00402  FAR_CALL makespacesi ,kpush
0001   ????               M  pagesel kpush
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0002   2???               M  call kpush
0003   ????               M  pagesel makespacesi ;This one restores the caller's code page
                      00403 
                      00404 
0004   3000           00405  movlw .0
                      00406  PUSH 
0005   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0006   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00407 
                      00408 
                      00409  
                      00410  FAR_CALL makespacesi,parm
0007   ????               M  pagesel parm
0008   2???               M  call parm
0009   ????               M  pagesel makespacesi ;This one restores the caller's code page
                      00411 
                      00412  POP
000A   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
000B   0384               M  decf FSR,f 
000C   3A00           00413  xorlw .0
000D   1903           00414  btfsc STATUS,Z
000E   2???           00415  goto hlllb51J2 
                      00416  
                      00417 
000F   3020           00418  movlw .32
                      00419  PUSH 
0010   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0011   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00420 
                      00421 
                      00422  
                      00423  FAR_CALL makespacesi,printch
0012   ????               M  pagesel printch
0013   2???               M  call printch
0014   ????               M  pagesel makespacesi ;This one restores the caller's code page
                      00424 
                      00425 
0015   30FF           00426  movlw -.1
                      00427  PUSH 
0016   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0017   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00428 
                      00429 
                      00430  
                      00431  FAR_CALL makespacesi,add
0018   ????               M  pagesel add
0019   2???               M  call add
001A   ????               M  pagesel makespacesi ;This one restores the caller's code page
                      00432 
                      00433  ;
                      00434 
                      00435 
                      00436  KDISCARD 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001B   03??               M  decf alt_fsr,f 
001C   2???           00437  goto makespacesi
001D                  00438 hlllb51J2:
001D                  00439 hlllb51J3:
                      00440 
                      00441  KDISCARD 
001D   03??               M  decf alt_fsr,f 
001E   0008           00442  return 
                      00443 
                      00444  
                      00445 
                      00446 hllt455 CODE
0000                  00447 wrapstringA:
0000   0804           00448  movf FSR,w
                      00449  
                      00450 
                      00451  
                      00452  FAR_CALL wrapstringA ,kpush
0001   ????               M  pagesel kpush
0002   2???               M  call kpush
0003   ????               M  pagesel wrapstringA ;This one restores the caller's code page
                      00453 
                      00454 
0004   3000           00455  movlw .0
                      00456  PUSH 
0005   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0006   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00457 
                      00458 
                      00459  
                      00460  FAR_CALL wrapstringA,stringA
0007   ????               M  pagesel stringA
0008   2???               M  call stringA
0009   ????               M  pagesel wrapstringA ;This one restores the caller's code page
                      00461 
                      00462  PUSH 
000A   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
000B   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00463 
                      00464 
000C   3002           00465  movlw .2
                      00466  PUSH 
000D   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
000E   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00467 
                      00468 
                      00469  
                      00470  FAR_CALL wrapstringA,parm
000F   ????               M  pagesel parm
0010   2???               M  call parm
0011   ????               M  pagesel wrapstringA ;This one restores the caller's code page
                      00471 
                      00472 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0012   3001           00473  movlw .1
                      00474  PUSH 
0013   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0014   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00475 
                      00476 
                      00477  
                      00478  HALF_FAR_CALL parm
0015   ????               M  pagesel parm           
0016   2???               M  call parm
                      00479 
                      00480 
                      00481  
                      00482  FAR_CALL wrapstringA,printchxy
0017   ????               M  pagesel printchxy
0018   2???               M  call printchxy
0019   ????               M  pagesel wrapstringA ;This one restores the caller's code page
                      00483 
                      00484 
001A   3002           00485  movlw .2
                      00486  PUSH 
001B   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
001C   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00487 
                      00488 
                      00489  
                      00490  FAR_CALL wrapstringA,parm
001D   ????               M  pagesel parm
001E   2???               M  call parm
001F   ????               M  pagesel wrapstringA ;This one restores the caller's code page
                      00491 
                      00492 
0020   3000           00493  movlw .0
                      00494  PUSH 
0021   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0022   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00495 
                      00496 
                      00497  
                      00498  FAR_CALL wrapstringA,parm
0023   ????               M  pagesel parm
0024   2???               M  call parm
0025   ????               M  pagesel wrapstringA ;This one restores the caller's code page
                      00499 
                      00500 
0026   3001           00501  movlw .1 
                      00502  PUSH 
0027   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0028   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00503 
                      00504 
0029   30FF           00505  movlw -.1
                      00506  PUSH 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

002A   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
002B   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00507 
                      00508 
002C   3000           00509  movlw .0
                      00510  PUSH 
002D   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
002E   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00511 
                      00512 
                      00513  
                      00514  HALF_FAR_CALL parm
002F   ????               M  pagesel parm           
0030   2???               M  call parm
                      00515 
                      00516 
                      00517  
                      00518  HALF_FAR_CALL add
0031   ????               M  pagesel add            
0032   2???               M  call add
                      00519 
                      00520 
                      00521  
                      00522  HALF_FAR_CALL wrapstringAi
0033   ????               M  pagesel wrapstringAi   
0034   2???               M  call wrapstringAi
                      00523 
                      00524 
                      00525  
                      00526  FAR_CALL wrapstringA,kpop
0035   ????               M  pagesel kpop
0036   2???               M  call kpop
0037   ????               M  pagesel wrapstringA ;This one restores the caller's code page
                      00527 
                      00528 ;LOAD POINTER
0038   0084           00529  movwf FSR
                      00530  
                      00531 
                      00532  DISCARD
0039   0384               M  decf FSR,f 
                      00533 
                      00534 
                      00535  DISCARD
003A   0384               M  decf FSR,f 
                      00536 
                      00537 
                      00538  DISCARD
003B   0384               M  decf FSR,f 
                      00539 
                      00540 
003C   0008           00541  return
                      00542  
                      00543 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00544 hllt456 CODE
0000                  00545 copy:
0000   0804           00546  movf FSR,w
                      00547  
                      00548 
                      00549  
                      00550  FAR_CALL copy ,kpush
0001   ????               M  pagesel kpush
0002   2???               M  call kpush
0003   ????               M  pagesel copy      ;This one restores the caller's code page
                      00551 
                      00552 
0004   3000           00553  movlw .0
                      00554  PUSH 
0005   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0006   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00555 
                      00556 
                      00557  
                      00558  FAR_CALL copy,parm
0007   ????               M  pagesel parm
0008   2???               M  call parm
0009   ????               M  pagesel copy      ;This one restores the caller's code page
                      00559 
                      00560 
000A   3000           00561  movlw .0
                      00562  PUSH 
000B   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
000C   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00563 
                      00564 
                      00565  
                      00566  HALF_FAR_CALL parm
000D   ????               M  pagesel parm           
000E   2???               M  call parm
                      00567 
                      00568 
                      00569  
                      00570  FAR_CALL copy,kpop
000F   ????               M  pagesel kpop
0010   2???               M  call kpop
0011   ????               M  pagesel copy      ;This one restores the caller's code page
                      00571  
                      00572 #ifdef HLLMULTITASK 
                      00573  movf in_isr,f ;In shared RAM, no need for BANKSEL
                      00574  btfsc STATUS,Z
                      00575  goto $+3
                      00576  movwf pbase+1 ;in_isr... the "in isr" clause comes first in all of these macros. This
                      00577  goto $+2      ; is because isr execution is preemptive, and returns only at the 
                      00578  movwf pbase   ; completion of all triggered routines. So, it can starve out the main
                      00579 #else          ; thread, and speeding up isr execution helps this problem. In most of
0012   00??           00580  movwf pbase   ; these macros, in-isr execution takes just 4 instruction cycles.
                      00581 #endif 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00582 
                      00583 
                      00584  POP
0013   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0014   0384               M  decf FSR,f 
                      00585  
                      00586  FAR_CALL copy ,kpush
0015   ????               M  pagesel kpush
0016   2???               M  call kpush
0017   ????               M  pagesel copy      ;This one restores the caller's code page
                      00587  
                      00588 
                      00589  POP
0018   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0019   0384               M  decf FSR,f 
                      00590  
                      00591  FAR_CALL copy ,kpush
001A   ????               M  pagesel kpush
001B   2???               M  call kpush
001C   ????               M  pagesel copy      ;This one restores the caller's code page
                      00592  
                      00593 #ifdef HLLMULTITASK 
                      00594  movf in_isr,f ;In shared RAM, no need for BANKSEL
                      00595  btfsc STATUS,Z
                      00596  goto $+3
                      00597  movf pbase+1,w                 ;in_isr
                      00598  goto $+2
                      00599  movf pbase,w   ;not in_isr
                      00600 #else
001D   08??           00601  movf pbase,w   
                      00602 #endif  
                      00603 
                      00604  
                      00605 ;LOAD POINTER
001E   0084           00606  movwf FSR
                      00607  
                      00608 
                      00609  DISCARD
001F   0384               M  decf FSR,f 
                      00610 
                      00611 
                      00612  
                      00613  FAR_CALL copy ,kpop
0020   ????               M  pagesel kpop
0021   2???               M  call kpop
0022   ????               M  pagesel copy      ;This one restores the caller's code page
                      00614 
                      00615  PUSH 
0023   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0024   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00616 
                      00617 
                      00618  
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00619  FAR_CALL copy ,kpop
0025   ????               M  pagesel kpop
0026   2???               M  call kpop
0027   ????               M  pagesel copy      ;This one restores the caller's code page
                      00620 
                      00621  PUSH 
0028   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0029   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00622 
                      00623 
002A   0008           00624  return
                      00625  
                      00626 
                      00627 hllt4519 CODE
0000                  00628 wrapstringAi:
0000   0804           00629  movf FSR,w
                      00630  
                      00631 
                      00632  
                      00633  FAR_CALL wrapstringAi ,kpush
0001   ????               M  pagesel kpush
0002   2???               M  call kpush
0003   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00634 
                      00635 
0004   3003           00636  movlw .3
                      00637  PUSH 
0005   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0006   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00638 
                      00639 
                      00640  
                      00641  FAR_CALL wrapstringAi,parm
0007   ????               M  pagesel parm
0008   2???               M  call parm
0009   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00642 
                      00643 
000A   3002           00644  movlw .2
                      00645  PUSH 
000B   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
000C   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00646 
                      00647 
                      00648  
                      00649  FAR_CALL wrapstringAi,parm
000D   ????               M  pagesel parm
000E   2???               M  call parm
000F   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00650 
                      00651 
0010   3001           00652  movlw .1
                      00653  PUSH 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0011   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0012   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00654 
                      00655 
                      00656  
                      00657  FAR_CALL wrapstringAi,parm
0013   ????               M  pagesel parm
0014   2???               M  call parm
0015   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00658 
                      00659 
0016   3000           00660  movlw .0
                      00661  PUSH 
0017   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0018   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00662 
                      00663 
                      00664  
                      00665  HALF_FAR_CALL parm
0019   ????               M  pagesel parm           
001A   2???               M  call parm
                      00666 
                      00667 
                      00668  
                      00669  FAR_CALL wrapstringAi,wrapstringAif
001B   ????               M  pagesel wrapstringAif
001C   2???               M  call wrapstringAif
001D   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00670 
                      00671  POP
001E   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
001F   0384               M  decf FSR,f 
0020   3A00           00672  xorlw .0
0021   1903           00673  btfsc STATUS,Z
0022   2???           00674  goto hlllb51J7 
                      00675  
                      00676 
                      00677  
                      00678  FAR_CALL wrapstringAi,eat
0023   ????               M  pagesel eat
0024   2???               M  call eat
0025   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00679 
                      00680 
0026   3002           00681  movlw .2
                      00682  PUSH 
0027   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0028   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00683 
                      00684 
                      00685  
                      00686  FAR_CALL wrapstringAi,parm
0029   ????               M  pagesel parm
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

002A   2???               M  call parm
002B   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00687 
                      00688  
002C   2???           00689  goto hlllb51J8
                      00690  
                      00691 
002D                  00692 hlllb51J7:
                      00693 
                      00694 
002D                  00695 hlllb51J8:
                      00696 
                      00697 
002D   3000           00698  movlw .0
                      00699  PUSH 
002E   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
002F   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00700 
                      00701 
                      00702  
                      00703  FAR_CALL wrapstringAi,parm
0030   ????               M  pagesel parm
0031   2???               M  call parm
0032   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00704 
                      00705 
0033   3001           00706  movlw .1
                      00707  PUSH 
0034   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0035   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00708 
                      00709 
                      00710  
                      00711  FAR_CALL wrapstringAi,eq
0036   ????               M  pagesel eq
0037   2???               M  call eq
0038   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00712 
                      00713  POP
0039   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
003A   0384               M  decf FSR,f 
003B   3A00           00714  xorlw .0
003C   1903           00715  btfsc STATUS,Z
003D   2???           00716  goto hlllb51J15 
                      00717  
                      00718 
003E   3001           00719  movlw .1
                      00720  PUSH 
003F   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0040   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00721 
                      00722 
                      00723  
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00724  HALF_FAR_CALL parm
0041   ????               M  pagesel parm           
0042   2???               M  call parm
                      00725 
                      00726 
                      00727  
                      00728  FAR_CALL wrapstringAi,stringA
0043   ????               M  pagesel stringA
0044   2???               M  call stringA
0045   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00729 
                      00730  PUSH 
0046   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0047   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00731 
                      00732 
0048   302F           00733  movlw .47
                      00734  PUSH 
0049   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
004A   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00735 
                      00736 
                      00737  
                      00738  FAR_CALL wrapstringAi,geu
004B   ????               M  pagesel geu
004C   2???               M  call geu
004D   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00739 
                      00740 
004E   303A           00741  movlw .58 
                      00742  PUSH 
004F   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0050   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00743 
                      00744 
0051   3001           00745  movlw .1
                      00746  PUSH 
0052   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0053   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00747 
                      00748 
                      00749  
                      00750  HALF_FAR_CALL parm
0054   ????               M  pagesel parm           
0055   2???               M  call parm
                      00751 
                      00752 
                      00753  
                      00754  FAR_CALL wrapstringAi,stringA
0056   ????               M  pagesel stringA
0057   2???               M  call stringA
0058   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00755 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00756  PUSH 
0059   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
005A   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00757 
                      00758 
                      00759  
                      00760  HALF_FAR_CALL geu
005B   ????               M  pagesel geu            
005C   2???               M  call geu
                      00761 
                      00762 
                      00763  
                      00764  FAR_CALL wrapstringAi,andb
005D   ????               M  pagesel andb
005E   2???               M  call andb
005F   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00765 
                      00766 
0060   3001           00767  movlw .1
                      00768  PUSH 
0061   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0062   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00769 
                      00770 
                      00771  
                      00772  HALF_FAR_CALL parm
0063   ????               M  pagesel parm           
0064   2???               M  call parm
                      00773 
                      00774 
                      00775  
                      00776  FAR_CALL wrapstringAi,stringA
0065   ????               M  pagesel stringA
0066   2???               M  call stringA
0067   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00777 
                      00778  PUSH 
0068   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0069   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00779 
                      00780 
006A   3040           00781  movlw .64
                      00782  PUSH 
006B   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
006C   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00783 
                      00784 
                      00785  
                      00786  FAR_CALL wrapstringAi,geu
006D   ????               M  pagesel geu
006E   2???               M  call geu
006F   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00787 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00788 
0070   309C           00789  movlw .156 
                      00790  PUSH 
0071   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0072   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00791 
                      00792 
0073   3001           00793  movlw .1
                      00794  PUSH 
0074   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0075   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00795 
                      00796 
                      00797  
                      00798  HALF_FAR_CALL parm
0076   ????               M  pagesel parm           
0077   2???               M  call parm
                      00799 
                      00800 
                      00801  
                      00802  FAR_CALL wrapstringAi,stringA
0078   ????               M  pagesel stringA
0079   2???               M  call stringA
007A   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00803 
                      00804  PUSH 
007B   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
007C   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00805 
                      00806 
                      00807  
                      00808  HALF_FAR_CALL geu
007D   ????               M  pagesel geu            
007E   2???               M  call geu
                      00809 
                      00810 
                      00811  
                      00812  HALF_FAR_CALL andb
007F   ????               M  pagesel andb           
0080   2???               M  call andb
                      00813 
                      00814 
                      00815  
                      00816  FAR_CALL wrapstringAi,orb
0081   ????               M  pagesel orb
0082   2???               M  call orb
0083   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00817 
                      00818  POP
0084   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0085   0384               M  decf FSR,f 
0086   3A00           00819  xorlw .0
0087   1903           00820  btfsc STATUS,Z
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0088   2???           00821  goto hlllb51J13 
                      00822  
                      00823 
0089   302D           00824  movlw .45
                      00825  PUSH 
008A   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
008B   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00826 
                      00827 
                      00828  
                      00829  FAR_CALL wrapstringAi,printch
008C   ????               M  pagesel printch
008D   2???               M  call printch
008E   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00830 
                      00831 
008F   300D           00832  movlw .13
                      00833  PUSH 
0090   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0091   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00834 
                      00835 
                      00836  
                      00837  FAR_CALL wrapstringAi,printch
0092   ????               M  pagesel printch
0093   2???               M  call printch
0094   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00838 
                      00839 
0095   300A           00840  movlw .10
                      00841  PUSH 
0096   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0097   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00842 
                      00843 
                      00844  
                      00845  FAR_CALL wrapstringAi,printch
0098   ????               M  pagesel printch
0099   2???               M  call printch
009A   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00846 
                      00847 
009B   3001           00848  movlw .1
                      00849  PUSH 
009C   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
009D   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00850 
                      00851 
                      00852  
                      00853  HALF_FAR_CALL parm
009E   ????               M  pagesel parm           
009F   2???               M  call parm
                      00854 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00855 
                      00856  
                      00857  FAR_CALL wrapstringAi,stringA
00A0   ????               M  pagesel stringA
00A1   2???               M  call stringA
00A2   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00858 
                      00859  PUSH 
00A3   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00A4   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00860 
                      00861 
00A5   3020           00862  movlw .32
                      00863  PUSH 
00A6   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00A7   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00864 
                      00865 
                      00866  
                      00867  FAR_CALL wrapstringAi,eq
00A8   ????               M  pagesel eq
00A9   2???               M  call eq
00AA   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00868 
                      00869  POP
00AB   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
00AC   0384               M  decf FSR,f 
00AD   3A00           00870  xorlw .0
00AE   1903           00871  btfsc STATUS,Z
00AF   2???           00872  goto hlllb51J9 
                      00873  
                      00874 
00B0   30FF           00875  movlw -.1
                      00876  PUSH 
00B1   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00B2   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00877 
                      00878 
00B3   3003           00879  movlw .3
                      00880  PUSH 
00B4   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00B5   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00881 
                      00882 
                      00883  
                      00884  HALF_FAR_CALL parm
00B6   ????               M  pagesel parm           
00B7   2???               M  call parm
                      00885 
                      00886 
                      00887  
                      00888  HALF_FAR_CALL add
00B8   ????               M  pagesel add            
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00B9   2???               M  call add
                      00889 
                      00890 
                      00891  
                      00892  FAR_CALL wrapstringAi,makespaces
00BA   ????               M  pagesel makespaces
00BB   2???               M  call makespaces
00BC   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00893 
                      00894  
00BD   2???           00895  goto hlllb51J10
                      00896  
                      00897 
00BE                  00898 hlllb51J9:
                      00899 
                      00900 
00BE   3003           00901  movlw .3
                      00902  PUSH 
00BF   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00C0   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00903 
                      00904 
                      00905  
                      00906  HALF_FAR_CALL parm
00C1   ????               M  pagesel parm           
00C2   2???               M  call parm
                      00907 
                      00908 
                      00909  
                      00910  FAR_CALL wrapstringAi,makespaces
00C3   ????               M  pagesel makespaces
00C4   2???               M  call makespaces
00C5   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00911 
                      00912 
00C6                  00913 hlllb51J10:
                      00914 
                      00915 
00C6   3001           00916  movlw .1
                      00917  PUSH 
00C7   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00C8   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00918 
                      00919 
                      00920  
                      00921  HALF_FAR_CALL parm
00C9   ????               M  pagesel parm           
00CA   2???               M  call parm
                      00922 
                      00923 
                      00924  
                      00925  FAR_CALL wrapstringAi,stringA
00CB   ????               M  pagesel stringA
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00CC   2???               M  call stringA
00CD   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00926 
                      00927  PUSH 
00CE   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00CF   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00928 
                      00929 
                      00930  
                      00931  HALF_FAR_CALL printch
00D0   ????               M  pagesel printch        
00D1   2???               M  call printch
                      00932 
                      00933 
                      00934  
                      00935  FAR_CALL wrapstringAi,eat
00D2   ????               M  pagesel eat
00D3   2???               M  call eat
00D4   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00936 
                      00937 
00D5   30FF           00938  movlw -.1
                      00939  PUSH 
00D6   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00D7   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00940 
                      00941 
00D8   3002           00942  movlw .2
                      00943  PUSH 
00D9   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00DA   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00944 
                      00945 
                      00946  
                      00947  HALF_FAR_CALL parm
00DB   ????               M  pagesel parm           
00DC   2???               M  call parm
                      00948 
                      00949 
                      00950  
                      00951  FAR_CALL wrapstringAi,add
00DD   ????               M  pagesel add
00DE   2???               M  call add
00DF   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00952 
                      00953  
00E0   2???           00954  goto hlllb51J14
                      00955  
                      00956 
00E1                  00957 hlllb51J13:
                      00958 
                      00959 
00E1   3001           00960  movlw .1
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00961  PUSH 
00E2   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00E3   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00962 
                      00963 
                      00964  
                      00965  HALF_FAR_CALL parm
00E4   ????               M  pagesel parm           
00E5   2???               M  call parm
                      00966 
                      00967 
                      00968  
                      00969  FAR_CALL wrapstringAi,stringA
00E6   ????               M  pagesel stringA
00E7   2???               M  call stringA
00E8   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00970 
                      00971  PUSH 
00E9   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00EA   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00972 
                      00973 
                      00974  
                      00975  FAR_CALL wrapstringAi,printch
00EB   ????               M  pagesel printch
00EC   2???               M  call printch
00ED   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00976 
                      00977 
00EE   300D           00978  movlw .13
                      00979  PUSH 
00EF   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00F0   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00980 
                      00981 
                      00982  
                      00983  FAR_CALL wrapstringAi,printch
00F1   ????               M  pagesel printch
00F2   2???               M  call printch
00F3   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      00984 
                      00985 
00F4   300A           00986  movlw .10
                      00987  PUSH 
00F5   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00F6   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00988 
                      00989 
                      00990  
                      00991  FAR_CALL wrapstringAi,printch
00F7   ????               M  pagesel printch
00F8   2???               M  call printch
00F9   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00992 
                      00993 
00FA   3001           00994  movlw .1 
                      00995  PUSH 
00FB   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00FC   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00996 
                      00997 
00FD   3001           00998  movlw .1
                      00999  PUSH 
00FE   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
00FF   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01000 
                      01001 
                      01002  
                      01003  HALF_FAR_CALL parm
0100   ????               M  pagesel parm           
0101   2???               M  call parm
                      01004 
                      01005 
                      01006  
                      01007  HALF_FAR_CALL add
0102   ????               M  pagesel add            
0103   2???               M  call add
                      01008 
                      01009 
                      01010  
                      01011  FAR_CALL wrapstringAi,stringA
0104   ????               M  pagesel stringA
0105   2???               M  call stringA
0106   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      01012 
                      01013  PUSH 
0107   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0108   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01014 
                      01015 
0109   3020           01016  movlw .32
                      01017  PUSH 
010A   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
010B   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01018 
                      01019 
                      01020  
                      01021  FAR_CALL wrapstringAi,eq
010C   ????               M  pagesel eq
010D   2???               M  call eq
010E   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      01022 
                      01023  POP
010F   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0110   0384               M  decf FSR,f 
0111   3A00           01024  xorlw .0
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0112   1903           01025  btfsc STATUS,Z
0113   2???           01026  goto hlllb51J11 
                      01027  
                      01028 
0114   30FF           01029  movlw -.1
                      01030  PUSH 
0115   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0116   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01031 
                      01032 
0117   3003           01033  movlw .3
                      01034  PUSH 
0118   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0119   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01035 
                      01036 
                      01037  
                      01038  HALF_FAR_CALL parm
011A   ????               M  pagesel parm           
011B   2???               M  call parm
                      01039 
                      01040 
                      01041  
                      01042  HALF_FAR_CALL add
011C   ????               M  pagesel add            
011D   2???               M  call add
                      01043 
                      01044 
                      01045  
                      01046  FAR_CALL wrapstringAi,makespaces
011E   ????               M  pagesel makespaces
011F   2???               M  call makespaces
0120   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      01047 
                      01048  
0121   2???           01049  goto hlllb51J12
                      01050  
                      01051 
0122                  01052 hlllb51J11:
                      01053 
                      01054 
0122   3003           01055  movlw .3
                      01056  PUSH 
0123   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0124   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01057 
                      01058 
                      01059  
                      01060  HALF_FAR_CALL parm
0125   ????               M  pagesel parm           
0126   2???               M  call parm
                      01061 
                      01062 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01063  
                      01064  FAR_CALL wrapstringAi,makespaces
0127   ????               M  pagesel makespaces
0128   2???               M  call makespaces
0129   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      01065 
                      01066 
012A                  01067 hlllb51J12:
                      01068 
                      01069 
                      01070  
                      01071  FAR_CALL wrapstringAi,eat
012A   ????               M  pagesel eat
012B   2???               M  call eat
012C   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      01072 
                      01073 
012D   3002           01074  movlw .2
                      01075  PUSH 
012E   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
012F   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01076 
                      01077 
                      01078  
                      01079  FAR_CALL wrapstringAi,parm
0130   ????               M  pagesel parm
0131   2???               M  call parm
0132   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      01080 
                      01081 
0133                  01082 hlllb51J14:
                      01083 
                      01084  
0133   2???           01085  goto hlllb51J16
                      01086  
                      01087 
0134                  01088 hlllb51J15:
                      01089 
                      01090 
0134   3001           01091  movlw .1
                      01092  PUSH 
0135   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0136   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01093 
                      01094 
                      01095  
                      01096  HALF_FAR_CALL parm
0137   ????               M  pagesel parm           
0138   2???               M  call parm
                      01097 
                      01098 
                      01099  
                      01100  FAR_CALL wrapstringAi,stringA
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0139   ????               M  pagesel stringA
013A   2???               M  call stringA
013B   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      01101 
                      01102  PUSH 
013C   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
013D   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01103 
                      01104 
                      01105  
                      01106  FAR_CALL wrapstringAi,printch
013E   ????               M  pagesel printch
013F   2???               M  call printch
0140   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      01107 
                      01108 
0141   30FF           01109  movlw -.1
                      01110  PUSH 
0142   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0143   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01111 
                      01112 
                      01113  
                      01114  FAR_CALL wrapstringAi,add
0144   ????               M  pagesel add
0145   2???               M  call add
0146   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      01115 
                      01116 
0147                  01117 hlllb51J16:
                      01118 
                      01119 
0147   3001           01120  movlw .1 
                      01121  PUSH 
0148   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0149   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01122 
                      01123 
014A   3001           01124  movlw .1
                      01125  PUSH 
014B   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
014C   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01126 
                      01127 
                      01128  
                      01129  HALF_FAR_CALL parm
014D   ????               M  pagesel parm           
014E   2???               M  call parm
                      01130 
                      01131 
                      01132  
                      01133  HALF_FAR_CALL add
014F   ????               M  pagesel add            
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0150   2???               M  call add
                      01134 
                      01135 
                      01136  
                      01137  FAR_CALL wrapstringAi,stringA
0151   ????               M  pagesel stringA
0152   2???               M  call stringA
0153   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      01138 
                      01139  
0154   3A00           01140  xorlw .0
0155   1903           01141  btfsc STATUS,Z
0156   2???           01142  goto hlllb51J17 
                      01143  
                      01144 
                      01145  
                      01146  FAR_CALL wrapstringAi,remove
0157   ????               M  pagesel remove
0158   2???               M  call remove
0159   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      01147 
                      01148 
015A   3001           01149  movlw .1
                      01150  PUSH 
015B   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
015C   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01151 
                      01152 
                      01153  
                      01154  HALF_FAR_CALL add
015D   ????               M  pagesel add            
015E   2???               M  call add
                      01155 
                      01156 
                      01157  
                      01158  FAR_CALL wrapstringAi,restore
015F   ????               M  pagesel restore
0160   2???               M  call restore
0161   ????               M  pagesel wrapstringAi ;This one restores the caller's code page
                      01159 
                      01160  ;
                      01161 
                      01162 
                      01163  KDISCARD 
0162   03??               M  decf alt_fsr,f 
0163   2???           01164  goto wrapstringAi
0164                  01165 hlllb51J17:
0164                  01166 hlllb51J18:
                      01167 
                      01168  KDISCARD 
0164   03??               M  decf alt_fsr,f 
0165   0008           01169  return 
                      01170 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01171  
                      01172 
                      01173 hllt4520 CODE
0000                  01174 eat:
0000   0804           01175  movf FSR,w
                      01176  
                      01177 
                      01178  
                      01179  HALF_FAR_CALL kpush
0001   ????               M  pagesel kpush          
0002   2???               M  call kpush
                      01180 
                      01181 
                      01182  
                      01183  FAR_CALL eat,kpop
0003   ????               M  pagesel kpop
0004   2???               M  call kpop
0005   ????               M  pagesel eat       ;This one restores the caller's code page
                      01184 
                      01185 ;LOAD POINTER
0006   0084           01186  movwf FSR
                      01187  
                      01188 
                      01189  DISCARD
0007   0384               M  decf FSR,f 
                      01190 
                      01191 
0008   0008           01192  return
                      01193  
                      01194 
                      01195 hllt4525 CODE
0000                  01196 wrapstringAif:
0000   0804           01197  movf FSR,w
                      01198  
                      01199 
                      01200  
                      01201  FAR_CALL wrapstringAif ,kpush
0001   ????               M  pagesel kpush
0002   2???               M  call kpush
0003   ????               M  pagesel wrapstringAif ;This one restores the caller's code page
                      01202 
                      01203 
0004   3002           01204  movlw .2
                      01205  PUSH 
0005   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0006   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01206 
                      01207 
                      01208  
                      01209  FAR_CALL wrapstringAif,parm
0007   ????               M  pagesel parm
0008   2???               M  call parm
0009   ????               M  pagesel wrapstringAif ;This one restores the caller's code page
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01210 
                      01211 
000A   3001           01212  movlw .1
                      01213  PUSH 
000B   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
000C   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01214 
                      01215 
                      01216  
                      01217  FAR_CALL wrapstringAif,parm
000D   ????               M  pagesel parm
000E   2???               M  call parm
000F   ????               M  pagesel wrapstringAif ;This one restores the caller's code page
                      01218 
                      01219 
0010   3000           01220  movlw .0
                      01221  PUSH 
0011   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0012   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01222 
                      01223 
                      01224  
                      01225  FAR_CALL wrapstringAif,wrapstringAifin
0013   ????               M  pagesel wrapstringAifin
0014   2???               M  call wrapstringAifin
0015   ????               M  pagesel wrapstringAif ;This one restores the caller's code page
                      01226 
                      01227 
0016   3001           01228  movlw .1 
                      01229  PUSH 
0017   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0018   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01230 
                      01231 
0019   3000           01232  movlw .0
                      01233  PUSH 
001A   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
001B   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01234 
                      01235 
                      01236  
                      01237  HALF_FAR_CALL parm
001C   ????               M  pagesel parm           
001D   2???               M  call parm
                      01238 
                      01239 
                      01240  
                      01241  HALF_FAR_CALL add
001E   ????               M  pagesel add            
001F   2???               M  call add
                      01242 
                      01243 
                      01244  
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01245  FAR_CALL wrapstringAif,geu
0020   ????               M  pagesel geu
0021   2???               M  call geu
0022   ????               M  pagesel wrapstringAif ;This one restores the caller's code page
                      01246 
                      01247 
0023   3000           01248  movlw .0 
                      01249  PUSH 
0024   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0025   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01250 
                      01251 
0026   3001           01252  movlw .1
                      01253  PUSH 
0027   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0028   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01254 
                      01255 
                      01256  
                      01257  HALF_FAR_CALL parm
0029   ????               M  pagesel parm           
002A   2???               M  call parm
                      01258 
                      01259 
                      01260  
                      01261  FAR_CALL wrapstringAif,eq
002B   ????               M  pagesel eq
002C   2???               M  call eq
002D   ????               M  pagesel wrapstringAif ;This one restores the caller's code page
                      01262 
                      01263  POP
002E   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
002F   0384               M  decf FSR,f 
0030   3A00           01264  xorlw .0
0031   1903           01265  btfsc STATUS,Z
0032   2???           01266  goto hlllb51J21 
                      01267  
                      01268 
0033   3000           01269  movlw .0
                      01270  PUSH 
0034   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0035   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01271 
                      01272  
0036   2???           01273  goto hlllb51J22
                      01274  
                      01275 
0037                  01276 hlllb51J21:
                      01277 
                      01278 
0037   30FF           01279  movlw -.1
                      01280  PUSH 
0038   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0039   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01281 
                      01282 
003A   3001           01283  movlw .1
                      01284  PUSH 
003B   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
003C   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01285 
                      01286 
                      01287  
                      01288  HALF_FAR_CALL parm
003D   ????               M  pagesel parm           
003E   2???               M  call parm
                      01289 
                      01290 
                      01291  
                      01292  FAR_CALL wrapstringAif,add
003F   ????               M  pagesel add
0040   2???               M  call add
0041   ????               M  pagesel wrapstringAif ;This one restores the caller's code page
                      01293 
                      01294 
0042                  01295 hlllb51J22:
                      01296 
                      01297 
                      01298  
                      01299  FAR_CALL wrapstringAif,stringA
0042   ????               M  pagesel stringA
0043   2???               M  call stringA
0044   ????               M  pagesel wrapstringAif ;This one restores the caller's code page
                      01300 
                      01301  PUSH 
0045   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0046   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01302 
                      01303 
0047   3020           01304  movlw .32
                      01305  PUSH 
0048   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0049   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01306 
                      01307 
                      01308  
                      01309  HALF_FAR_CALL eq
004A   ????               M  pagesel eq             
004B   2???               M  call eq
                      01310 
                      01311 
                      01312  
                      01313  FAR_CALL wrapstringAif,mul
004C   ????               M  pagesel mul
004D   2???               M  call mul
004E   ????               M  pagesel wrapstringAif ;This one restores the caller's code page
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01314 
                      01315  POP
004F   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0050   0384               M  decf FSR,f 
0051   3A00           01316  xorlw .0
0052   1903           01317  btfsc STATUS,Z
0053   2???           01318  goto hlllb51J23 
                      01319  
                      01320 
0054   300D           01321  movlw .13
                      01322  PUSH 
0055   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0056   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01323 
                      01324 
                      01325  
                      01326  FAR_CALL wrapstringAif,printch
0057   ????               M  pagesel printch
0058   2???               M  call printch
0059   ????               M  pagesel wrapstringAif ;This one restores the caller's code page
                      01327 
                      01328 
005A   300A           01329  movlw .10
                      01330  PUSH 
005B   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
005C   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01331 
                      01332 
                      01333  
                      01334  FAR_CALL wrapstringAif,printch
005D   ????               M  pagesel printch
005E   2???               M  call printch
005F   ????               M  pagesel wrapstringAif ;This one restores the caller's code page
                      01335 
                      01336 
0060   3003           01337  movlw .3
                      01338  PUSH 
0061   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0062   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01339 
                      01340 
                      01341  
                      01342  HALF_FAR_CALL parm
0063   ????               M  pagesel parm           
0064   2???               M  call parm
                      01343 
                      01344 
                      01345  
                      01346  FAR_CALL wrapstringAif,makespaces
0065   ????               M  pagesel makespaces
0066   2???               M  call makespaces
0067   ????               M  pagesel wrapstringAif ;This one restores the caller's code page
                      01347 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01348 
0068   3001           01349  movlw .1
                      01350           
                      01351  PUSH 
0069   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
006A   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01352 
                      01353  
006B   2???           01354  goto hlllb51J24
                      01355  
                      01356 
006C                  01357 hlllb51J23:
                      01358 
                      01359 
006C   3000           01360  movlw .0
                      01361  PUSH 
006D   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
006E   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01362 
                      01363 
006F                  01364 hlllb51J24:
                      01365 
                      01366 
                      01367  
                      01368  FAR_CALL wrapstringAif,kpop
006F   ????               M  pagesel kpop
0070   2???               M  call kpop
0071   ????               M  pagesel wrapstringAif ;This one restores the caller's code page
                      01369  
                      01370 #ifdef HLLMULTITASK 
                      01371  movf in_isr,f ;In shared RAM, no need for BANKSEL
                      01372  btfsc STATUS,Z
                      01373  goto $+3
                      01374  movwf pbase+1 ;in_isr... the "in isr" clause comes first in all of these macros. This
                      01375  goto $+2      ; is because isr execution is preemptive, and returns only at the 
                      01376  movwf pbase   ; completion of all triggered routines. So, it can starve out the main
                      01377 #else          ; thread, and speeding up isr execution helps this problem. In most of
0072   00??           01378  movwf pbase   ; these macros, in-isr execution takes just 4 instruction cycles.
                      01379 #endif 
                      01380 
                      01381 
                      01382  POP
0073   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0074   0384               M  decf FSR,f 
                      01383  
                      01384  FAR_CALL wrapstringAif ,kpush
0075   ????               M  pagesel kpush
0076   2???               M  call kpush
0077   ????               M  pagesel wrapstringAif ;This one restores the caller's code page
                      01385  
                      01386 #ifdef HLLMULTITASK 
                      01387  movf in_isr,f ;In shared RAM, no need for BANKSEL
                      01388  btfsc STATUS,Z
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01389  goto $+3
                      01390  movf pbase+1,w                 ;in_isr
                      01391  goto $+2
                      01392  movf pbase,w   ;not in_isr
                      01393 #else
0078   08??           01394  movf pbase,w   
                      01395 #endif  
                      01396 
                      01397  
                      01398 ;LOAD POINTER
0079   0084           01399  movwf FSR
                      01400  
                      01401 
                      01402  DISCARD
007A   0384               M  decf FSR,f 
                      01403 
                      01404 
                      01405  DISCARD
007B   0384               M  decf FSR,f 
                      01406 
                      01407 
                      01408  DISCARD
007C   0384               M  decf FSR,f 
                      01409 
                      01410 
                      01411  DISCARD
007D   0384               M  decf FSR,f 
                      01412 
                      01413 
                      01414  
                      01415  FAR_CALL wrapstringAif ,kpop
007E   ????               M  pagesel kpop
007F   2???               M  call kpop
0080   ????               M  pagesel wrapstringAif ;This one restores the caller's code page
                      01416 
                      01417  PUSH 
0081   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0082   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01418 
                      01419 
0083   0008           01420  return
                      01421  
                      01422 
                      01423 hllt4528 CODE
0000                  01424 wrapstringAifin:
0000   0804           01425  movf FSR,w
                      01426  
                      01427 
                      01428  
                      01429  FAR_CALL wrapstringAifin ,kpush
0001   ????               M  pagesel kpush
0002   2???               M  call kpush
0003   ????               M  pagesel wrapstringAifin ;This one restores the caller's code page
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01430 
                      01431 
0004   3000           01432  movlw .0
                      01433  PUSH 
0005   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0006   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01434 
                      01435 
                      01436  
                      01437  FAR_CALL wrapstringAifin,parm
0007   ????               M  pagesel parm
0008   2???               M  call parm
0009   ????               M  pagesel wrapstringAifin ;This one restores the caller's code page
                      01438 
                      01439 
000A   3001           01440  movlw .1
                      01441  PUSH 
000B   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
000C   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01442 
                      01443 
                      01444  
                      01445  HALF_FAR_CALL parm
000D   ????               M  pagesel parm           
000E   2???               M  call parm
                      01446 
                      01447 
                      01448  
                      01449  HALF_FAR_CALL add
000F   ????               M  pagesel add            
0010   2???               M  call add
                      01450 
                      01451 
                      01452  
                      01453  FAR_CALL wrapstringAifin,stringA
0011   ????               M  pagesel stringA
0012   2???               M  call stringA
0013   ????               M  pagesel wrapstringAifin ;This one restores the caller's code page
                      01454 
                      01455  PUSH 
0014   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0015   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01456 
                      01457 
0016   3020           01458  movlw .32
                      01459  PUSH 
0017   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0018   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01460 
                      01461 
                      01462  
                      01463  FAR_CALL wrapstringAifin,eq
0019   ????               M  pagesel eq
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001A   2???               M  call eq
001B   ????               M  pagesel wrapstringAifin ;This one restores the caller's code page
                      01464 
                      01465 
001C   3000           01466  movlw .0
                      01467  PUSH 
001D   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
001E   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01468 
                      01469 
                      01470  
                      01471  FAR_CALL wrapstringAifin,parm
001F   ????               M  pagesel parm
0020   2???               M  call parm
0021   ????               M  pagesel wrapstringAifin ;This one restores the caller's code page
                      01472 
                      01473 
0022   3001           01474  movlw .1
                      01475  PUSH 
0023   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0024   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01476 
                      01477 
                      01478  
                      01479  HALF_FAR_CALL parm
0025   ????               M  pagesel parm           
0026   2???               M  call parm
                      01480 
                      01481 
                      01482  
                      01483  HALF_FAR_CALL add
0027   ????               M  pagesel add            
0028   2???               M  call add
                      01484 
                      01485 
                      01486  
                      01487  FAR_CALL wrapstringAifin,stringA
0029   ????               M  pagesel stringA
002A   2???               M  call stringA
002B   ????               M  pagesel wrapstringAifin ;This one restores the caller's code page
                      01488 
                      01489  PUSH 
002C   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
002D   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01490 
                      01491 
002E   3000           01492  movlw .0
                      01493  PUSH 
002F   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0030   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01494 
                      01495 
                      01496  
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01497  HALF_FAR_CALL eq
0031   ????               M  pagesel eq             
0032   2???               M  call eq
                      01498 
                      01499 
                      01500  
                      01501  FAR_CALL wrapstringAifin,add
0033   ????               M  pagesel add
0034   2???               M  call add
0035   ????               M  pagesel wrapstringAifin ;This one restores the caller's code page
                      01502 
                      01503  POP
0036   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0037   0384               M  decf FSR,f 
0038   3A00           01504  xorlw .0
0039   1903           01505  btfsc STATUS,Z
003A   2???           01506  goto hlllb51J26 
                      01507  
                      01508 
003B   3000           01509  movlw .0
                      01510  PUSH 
003C   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
003D   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01511 
                      01512 
                      01513  
                      01514  FAR_CALL wrapstringAifin,parm
003E   ????               M  pagesel parm
003F   2???               M  call parm
0040   ????               M  pagesel wrapstringAifin ;This one restores the caller's code page
                      01515 
                      01516  
0041   2???           01517  goto hlllb51J27
                      01518  
                      01519 
0042                  01520 hlllb51J26:
                      01521 
                      01522 
0042   3001           01523  movlw .1
                      01524  PUSH 
0043   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0044   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01525 
                      01526 
                      01527  
                      01528  FAR_CALL wrapstringAifin,add
0045   ????               M  pagesel add
0046   2???               M  call add
0047   ????               M  pagesel wrapstringAifin ;This one restores the caller's code page
                      01529 
                      01530  ;
                      01531 
                      01532  KDISCARD 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0048   03??               M  decf alt_fsr,f 
0049   2???           01533  goto wrapstringAifin
004A                  01534 hlllb51J27:
                      01535 
                      01536  KDISCARD 
004A   03??               M  decf alt_fsr,f 
004B   0008           01537  return 
                      01538 
                      01539  
                      01540 
                      01541 hllt4529 CODE
0000                  01542 eqresult:
0000   0804           01543  movf FSR,w
                      01544  
                      01545 
                      01546  
                      01547  FAR_CALL eqresult ,kpush
0001   ????               M  pagesel kpush
0002   2???               M  call kpush
0003   ????               M  pagesel eqresult  ;This one restores the caller's code page
                      01548 
                      01549 
0004   3000           01550  movlw .0
                      01551  PUSH 
0005   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0006   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01552 
                      01553 
                      01554  
                      01555  FAR_CALL eqresult,parm
0007   ????               M  pagesel parm
0008   2???               M  call parm
0009   ????               M  pagesel eqresult  ;This one restores the caller's code page
                      01556 
                      01557 
000A   3002           01558  movlw .2
                      01559  PUSH 
000B   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
000C   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01560 
                      01561 
                      01562  
                      01563  FAR_CALL eqresult,geu
000D   ????               M  pagesel geu
000E   2???               M  call geu
000F   ????               M  pagesel eqresult  ;This one restores the caller's code page
                      01564 
                      01565 
0010   3001           01566  movlw .1
                      01567  PUSH 
0011   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0012   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01568 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01569 
                      01570  
                      01571  FAR_CALL eqresult,parm
0013   ????               M  pagesel parm
0014   2???               M  call parm
0015   ????               M  pagesel eqresult  ;This one restores the caller's code page
                      01572 
                      01573 
0016   3002           01574  movlw .2
                      01575  PUSH 
0017   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0018   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01576 
                      01577 
                      01578  
                      01579  HALF_FAR_CALL geu
0019   ????               M  pagesel geu            
001A   2???               M  call geu
                      01580 
                      01581 
                      01582  
                      01583  HALF_FAR_CALL eq
001B   ????               M  pagesel eq             
001C   2???               M  call eq
                      01584 
                      01585 
                      01586  
                      01587  FAR_CALL eqresult,kpop
001D   ????               M  pagesel kpop
001E   2???               M  call kpop
001F   ????               M  pagesel eqresult  ;This one restores the caller's code page
                      01588  
                      01589 #ifdef HLLMULTITASK 
                      01590  movf in_isr,f ;In shared RAM, no need for BANKSEL
                      01591  btfsc STATUS,Z
                      01592  goto $+3
                      01593  movwf pbase+1 ;in_isr... the "in isr" clause comes first in all of these macros. This
                      01594  goto $+2      ; is because isr execution is preemptive, and returns only at the 
                      01595  movwf pbase   ; completion of all triggered routines. So, it can starve out the main
                      01596 #else          ; thread, and speeding up isr execution helps this problem. In most of
0020   00??           01597  movwf pbase   ; these macros, in-isr execution takes just 4 instruction cycles.
                      01598 #endif 
                      01599 
                      01600 
                      01601  POP
0021   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0022   0384               M  decf FSR,f 
                      01602  
                      01603  FAR_CALL eqresult ,kpush
0023   ????               M  pagesel kpush
0024   2???               M  call kpush
0025   ????               M  pagesel eqresult  ;This one restores the caller's code page
                      01604  
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01605 #ifdef HLLMULTITASK 
                      01606  movf in_isr,f ;In shared RAM, no need for BANKSEL
                      01607  btfsc STATUS,Z
                      01608  goto $+3
                      01609  movf pbase+1,w                 ;in_isr
                      01610  goto $+2
                      01611  movf pbase,w   ;not in_isr
                      01612 #else
0026   08??           01613  movf pbase,w   
                      01614 #endif  
                      01615 
                      01616  
                      01617 ;LOAD POINTER
0027   0084           01618  movwf FSR
                      01619  
                      01620 
                      01621  DISCARD
0028   0384               M  decf FSR,f 
                      01622 
                      01623 
                      01624  DISCARD
0029   0384               M  decf FSR,f 
                      01625 
                      01626 
                      01627  
                      01628  FAR_CALL eqresult ,kpop
002A   ????               M  pagesel kpop
002B   2???               M  call kpop
002C   ????               M  pagesel eqresult  ;This one restores the caller's code page
                      01629 
                      01630  PUSH 
002D   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
002E   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      01631 
                      01632 
002F   0008           01633  return
                      01634  
                      01635 
                      01636 hllt4530 CODE
                      01637  HLTABLE  stringA
0000                      M stringA:
0000   30??               M  movlw high stringA2   ; Necess. b/c writes to PCL take 5 bits fr. PCLATH
0001   008A               M  movwf PCLATH ; and PAGESEL doesn't take care of all 5
0002   30??               M  movlw low stringA2   ; Perform pointer arithmetic
0003   0700               M  addwf INDF,w 
0004   0384               M  decf FSR,f
0005   1803               M  btfsc STATUS,C ; Necess. b/c writes to PCL take 5 bits fr. PCLATH
0006   0A8A               M  incf PCLATH,f 
0007   0082               M  movwf PCL 
0008                      M stringA2:   
                          M  ;retlw K, retlw K, etc. go here
                      01638 
                      01639 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0008   344F           01640  retlw .79
                      01641  
                      01642 
0009   3453           01643  retlw .83
                      01644  
                      01645 
000A   3439           01646  retlw .57
                      01647  
                      01648 
000B   3420           01649  retlw .32
                      01650  
                      01651 
000C   3427           01652  retlw .39
                      01653  
                      01654 
000D   3427           01655  retlw .39
                      01656  
                      01657 
000E   3436           01658  retlw .54
                      01659  
                      01660 
000F   3438           01661  retlw .56
                      01662  
                      01663 
0010   3430           01664  retlw .48
                      01665  
                      01666 
0011   3439           01667  retlw .57
                      01668  
                      01669 
0012   3427           01670  retlw .39
                      01671  
                      01672 
0013   3427           01673  retlw .39
                      01674  
                      01675 
0014   3420           01676  retlw .32
                      01677  
                      01678 
0015   3472           01679  retlw .114
                      01680  
                      01681 
0016   3461           01682  retlw .97
                      01683  
                      01684 
0017   346E           01685  retlw .110
                      01686  
                      01687 
0018   3420           01688  retlw .32
                      01689  
                      01690 
0019   346F           01691  retlw .111
                      01692  
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01693 
001A   346E           01694  retlw .110
                      01695  
                      01696 
001B   3420           01697  retlw .32
                      01698  
                      01699 
001C   344D           01700  retlw .77
                      01701  
                      01702 
001D   346F           01703  retlw .111
                      01704  
                      01705 
001E   3474           01706  retlw .116
                      01707  
                      01708 
001F   346F           01709  retlw .111
                      01710  
                      01711 
0020   3472           01712  retlw .114
                      01713  
                      01714 
0021   346F           01715  retlw .111
                      01716  
                      01717 
0022   346C           01718  retlw .108
                      01719  
                      01720 
0023   3461           01721  retlw .97
                      01722  
                      01723 
0024   3420           01724  retlw .32
                      01725  
                      01726 
0025   3445           01727  retlw .69
                      01728  
                      01729 
0026   3458           01730  retlw .88
                      01731  
                      01732 
0027   344F           01733  retlw .79
                      01734  
                      01735 
0028   3452           01736  retlw .82
                      01737  
                      01738 
0029   3462           01739  retlw .98
                      01740  
                      01741 
002A   3475           01742  retlw .117
                      01743  
                      01744 
002B   3473           01745  retlw .115
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01746  
                      01747 
002C   3420           01748  retlw .32
                      01749  
                      01750 
002D   3473           01751  retlw .115
                      01752  
                      01753 
002E   3479           01754  retlw .121
                      01755  
                      01756 
002F   3473           01757  retlw .115
                      01758  
                      01759 
0030   3474           01760  retlw .116
                      01761  
                      01762 
0031   3465           01763  retlw .101
                      01764  
                      01765 
0032   346D           01766  retlw .109
                      01767  
                      01768 
0033   3473           01769  retlw .115
                      01770  
                      01771 
0034   3420           01772  retlw .32
                      01773  
                      01774 
0035   3475           01775  retlw .117
                      01776  
                      01777 
0036   3473           01778  retlw .115
                      01779  
                      01780 
0037   3469           01781  retlw .105
                      01782  
                      01783 
0038   346E           01784  retlw .110
                      01785  
                      01786 
0039   3467           01787  retlw .103
                      01788  
                      01789 
003A   3420           01790  retlw .32
                      01791  
                      01792 
003B   3474           01793  retlw .116
                      01794  
                      01795 
003C   3468           01796  retlw .104
                      01797  
                      01798 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

003D   3465           01799  retlw .101
                      01800  
                      01801 
003E   3420           01802  retlw .32
                      01803  
                      01804 
003F   344D           01805  retlw .77
                      01806  
                      01807 
0040   346F           01808  retlw .111
                      01809  
                      01810 
0041   3474           01811  retlw .116
                      01812  
                      01813 
0042   346F           01814  retlw .111
                      01815  
                      01816 
0043   3472           01817  retlw .114
                      01818  
                      01819 
0044   346F           01820  retlw .111
                      01821  
                      01822 
0045   346C           01823  retlw .108
                      01824  
                      01825 
0046   3461           01826  retlw .97
                      01827  
                      01828 
0047   3420           01829  retlw .32
                      01830  
                      01831 
0048   3436           01832  retlw .54
                      01833  
                      01834 
0049   3438           01835  retlw .56
                      01836  
                      01837 
004A   3430           01838  retlw .48
                      01839  
                      01840 
004B   3439           01841  retlw .57
                      01842  
                      01843 
004C   342C           01844  retlw .44
                      01845  
                      01846 
004D   3420           01847  retlw .32
                      01848  
                      01849 
004E   3453           01850  retlw .83
                      01851  
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01852 
004F   3453           01853  retlw .83
                      01854  
                      01855 
0050   3435           01856  retlw .53
                      01857  
                      01858 
0051   3430           01859  retlw .48
                      01860  
                      01861 
0052   3420           01862  retlw .32
                      01863  
                      01864 
0053   3442           01865  retlw .66
                      01866  
                      01867 
0054   3475           01868  retlw .117
                      01869  
                      01870 
0055   3473           01871  retlw .115
                      01872  
                      01873 
0056   3420           01874  retlw .32
                      01875  
                      01876 
0057   3461           01877  retlw .97
                      01878  
                      01879 
0058   346E           01880  retlw .110
                      01881  
                      01882 
0059   3464           01883  retlw .100
                      01884  
                      01885 
005A   3420           01886  retlw .32
                      01887  
                      01888 
005B   3453           01889  retlw .83
                      01890  
                      01891 
005C   3453           01892  retlw .83
                      01893  
                      01894 
005D   342D           01895  retlw .45
                      01896  
                      01897 
005E   3435           01898  retlw .53
                      01899  
                      01900 
005F   3430           01901  retlw .48
                      01902  
                      01903 
0060   3443           01904  retlw .67
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01905  
                      01906 
0061   3420           01907  retlw .32
                      01908  
                      01909 
0062   3462           01910  retlw .98
                      01911  
                      01912 
0063   3475           01913  retlw .117
                      01914  
                      01915 
0064   3473           01916  retlw .115
                      01917  
                      01918 
0065   3420           01919  retlw .32
                      01920  
                      01921 
0066   3473           01922  retlw .115
                      01923  
                      01924 
0067   3479           01925  retlw .121
                      01926  
                      01927 
0068   3473           01928  retlw .115
                      01929  
                      01930 
0069   3474           01931  retlw .116
                      01932  
                      01933 
006A   3465           01934  retlw .101
                      01935  
                      01936 
006B   346D           01937  retlw .109
                      01938  
                      01939 
006C   3473           01940  retlw .115
                      01941  
                      01942 
006D   3420           01943  retlw .32
                      01944  
                      01945 
006E   3466           01946  retlw .102
                      01947  
                      01948 
006F   3472           01949  retlw .114
                      01950  
                      01951 
0070   346F           01952  retlw .111
                      01953  
                      01954 
0071   346D           01955  retlw .109
                      01956  
                      01957 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0072   3420           01958  retlw .32
                      01959  
                      01960 
0073   3463           01961  retlw .99
                      01962  
                      01963 
0074   346F           01964  retlw .111
                      01965  
                      01966 
0075   346D           01967  retlw .109
                      01968  
                      01969 
0076   3470           01970  retlw .112
                      01971  
                      01972 
0077   3461           01973  retlw .97
                      01974  
                      01975 
0078   346E           01976  retlw .110
                      01977  
                      01978 
0079   3469           01979  retlw .105
                      01980  
                      01981 
007A   3465           01982  retlw .101
                      01983  
                      01984 
007B   3473           01985  retlw .115
                      01986  
                      01987 
007C   3420           01988  retlw .32
                      01989  
                      01990 
007D   3473           01991  retlw .115
                      01992  
                      01993 
007E   3475           01994  retlw .117
                      01995  
                      01996 
007F   3463           01997  retlw .99
                      01998  
                      01999 
0080   3468           02000  retlw .104
                      02001  
                      02002 
0081   3420           02003  retlw .32
                      02004  
                      02005 
0082   3461           02006  retlw .97
                      02007  
                      02008 
0083   3473           02009  retlw .115
                      02010  
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02011 
0084   3420           02012  retlw .32
                      02013  
                      02014 
0085   3453           02015  retlw .83
                      02016  
                      02017 
0086   3457           02018  retlw .87
                      02019  
                      02020 
0087   3454           02021  retlw .84
                      02022  
                      02023 
0088   3450           02024  retlw .80
                      02025  
                      02026 
0089   3443           02027  retlw .67
                      02028  
                      02029 
008A   342C           02030  retlw .44
                      02031  
                      02032 
008B   3420           02033  retlw .32
                      02034  
                      02035 
008C   3454           02036  retlw .84
                      02037  
                      02038 
008D   3461           02039  retlw .97
                      02040  
                      02041 
008E   346E           02042  retlw .110
                      02043  
                      02044 
008F   346F           02045  retlw .111
                      02046  
                      02047 
0090   342C           02048  retlw .44
                      02049  
                      02050 
0091   3420           02051  retlw .32
                      02052  
                      02053 
0092   3447           02054  retlw .71
                      02055  
                      02056 
0093   3469           02057  retlw .105
                      02058  
                      02059 
0094   346D           02060  retlw .109
                      02061  
                      02062 
0095   3469           02063  retlw .105
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02064  
                      02065 
0096   3478           02066  retlw .120
                      02067  
                      02068 
0097   342C           02069  retlw .44
                      02070  
                      02071 
0098   3420           02072  retlw .32
                      02073  
                      02074 
0099   344D           02075  retlw .77
                      02076  
                      02077 
009A   3469           02078  retlw .105
                      02079  
                      02080 
009B   3464           02081  retlw .100
                      02082  
                      02083 
009C   3477           02084  retlw .119
                      02085  
                      02086 
009D   3465           02087  retlw .101
                      02088  
                      02089 
009E   3473           02090  retlw .115
                      02091  
                      02092 
009F   3474           02093  retlw .116
                      02094  
                      02095 
00A0   3420           02096  retlw .32
                      02097  
                      02098 
00A1   3453           02099  retlw .83
                      02100  
                      02101 
00A2   3463           02102  retlw .99
                      02103  
                      02104 
00A3   3469           02105  retlw .105
                      02106  
                      02107 
00A4   3465           02108  retlw .101
                      02109  
                      02110 
00A5   346E           02111  retlw .110
                      02112  
                      02113 
00A6   3474           02114  retlw .116
                      02115  
                      02116 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 59


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00A7   3469           02117  retlw .105
                      02118  
                      02119 
00A8   3466           02120  retlw .102
                      02121  
                      02122 
00A9   3469           02123  retlw .105
                      02124  
                      02125 
00AA   3463           02126  retlw .99
                      02127  
                      02128 
00AB   342C           02129  retlw .44
                      02130  
                      02131 
00AC   3420           02132  retlw .32
                      02133  
                      02134 
00AD   3461           02135  retlw .97
                      02136  
                      02137 
00AE   346E           02138  retlw .110
                      02139  
                      02140 
00AF   3464           02141  retlw .100
                      02142  
                      02143 
00B0   3420           02144  retlw .32
                      02145  
                      02146 
00B1   3453           02147  retlw .83
                      02148  
                      02149 
00B2   346D           02150  retlw .109
                      02151  
                      02152 
00B3   346F           02153  retlw .111
                      02154  
                      02155 
00B4   346B           02156  retlw .107
                      02157  
                      02158 
00B5   3465           02159  retlw .101
                      02160  
                      02161 
00B6   3420           02162  retlw .32
                      02163  
                      02164 
00B7   3453           02165  retlw .83
                      02166  
                      02167 
00B8   3469           02168  retlw .105
                      02169  
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 60


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02170 
00B9   3467           02171  retlw .103
                      02172  
                      02173 
00BA   346E           02174  retlw .110
                      02175  
                      02176 
00BB   3461           02177  retlw .97
                      02178  
                      02179 
00BC   346C           02180  retlw .108
                      02181  
                      02182 
00BD   3420           02183  retlw .32
                      02184  
                      02185 
00BE   3442           02186  retlw .66
                      02187  
                      02188 
00BF   3472           02189  retlw .114
                      02190  
                      02191 
00C0   346F           02192  retlw .111
                      02193  
                      02194 
00C1   3461           02195  retlw .97
                      02196  
                      02197 
00C2   3464           02198  retlw .100
                      02199  
                      02200 
00C3   3463           02201  retlw .99
                      02202  
                      02203 
00C4   3461           02204  retlw .97
                      02205  
                      02206 
00C5   3473           02207  retlw .115
                      02208  
                      02209 
00C6   3474           02210  retlw .116
                      02211  
                      02212 
00C7   3469           02213  retlw .105
                      02214  
                      02215 
00C8   346E           02216  retlw .110
                      02217  
                      02218 
00C9   3467           02219  retlw .103
                      02220  
                      02221 
00CA   342C           02222  retlw .44
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 61


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02223  
                      02224 
00CB   3420           02225  retlw .32
                      02226  
                      02227 
00CC   3461           02228  retlw .97
                      02229  
                      02230 
00CD   346E           02231  retlw .110
                      02232  
                      02233 
00CE   3464           02234  retlw .100
                      02235  
                      02236 
00CF   3420           02237  retlw .32
                      02238  
                      02239 
00D0   3453           02240  retlw .83
                      02241  
                      02242 
00D1   3454           02243  retlw .84
                      02244  
                      02245 
00D2   3444           02246  retlw .68
                      02247  
                      02248 
00D3   342D           02249  retlw .45
                      02250  
                      02251 
00D4   3462           02252  retlw .98
                      02253  
                      02254 
00D5   3475           02255  retlw .117
                      02256  
                      02257 
00D6   3473           02258  retlw .115
                      02259  
                      02260 
00D7   3420           02261  retlw .32
                      02262  
                      02263 
00D8   3436           02264  retlw .54
                      02265  
                      02266 
00D9   3438           02267  retlw .56
                      02268  
                      02269 
00DA   3430           02270  retlw .48
                      02271  
                      02272 
00DB   3439           02273  retlw .57
                      02274  
                      02275 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 62


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00DC   3420           02276  retlw .32
                      02277  
                      02278 
00DD   3473           02279  retlw .115
                      02280  
                      02281 
00DE   3479           02282  retlw .121
                      02283  
                      02284 
00DF   3473           02285  retlw .115
                      02286  
                      02287 
00E0   3474           02288  retlw .116
                      02289  
                      02290 
00E1   3465           02291  retlw .101
                      02292  
                      02293 
00E2   346D           02294  retlw .109
                      02295  
                      02296 
00E3   3473           02297  retlw .115
                      02298  
                      02299 
00E4   3420           02300  retlw .32
                      02301  
                      02302 
00E5   3466           02303  retlw .102
                      02304  
                      02305 
00E6   3472           02306  retlw .114
                      02307  
                      02308 
00E7   346F           02309  retlw .111
                      02310  
                      02311 
00E8   346D           02312  retlw .109
                      02313  
                      02314 
00E9   3420           02315  retlw .32
                      02316  
                      02317 
00EA   3473           02318  retlw .115
                      02319  
                      02320 
00EB   3465           02321  retlw .101
                      02322  
                      02323 
00EC   3476           02324  retlw .118
                      02325  
                      02326 
00ED   3465           02327  retlw .101
                      02328  
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 63


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02329 
00EE   3472           02330  retlw .114
                      02331  
                      02332 
00EF   3461           02333  retlw .97
                      02334  
                      02335 
00F0   346C           02336  retlw .108
                      02337  
                      02338 
00F1   3420           02339  retlw .32
                      02340  
                      02341 
00F2   3473           02342  retlw .115
                      02343  
                      02344 
00F3   3475           02345  retlw .117
                      02346  
                      02347 
00F4   3470           02348  retlw .112
                      02349  
                      02350 
00F5   3470           02351  retlw .112
                      02352  
                      02353 
00F6   346C           02354  retlw .108
                      02355  
                      02356 
00F7   3469           02357  retlw .105
                      02358  
                      02359 
00F8   3465           02360  retlw .101
                      02361  
                      02362 
00F9   3472           02363  retlw .114
                      02364  
                      02365 
00FA   3473           02366  retlw .115
                      02367  
                      02368 
00FB   342E           02369  retlw .46
                      02370  
                      02371 
00FC   3400           02372  retlw .0
00FD                  02373 hllprgen2:
00FD   2???           02374  goto hllprgen2
                      02375  
                      02376 
                      02377 
                      02378 
                      02379 
                      02380 
                      02381  
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 64


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02382 
                      02383 
                      02384  
                      02385 hlog1g CODE
                      02386  
0000                  02387 andb: 
0000   ????           02388  pagesel mul
0001   2???           02389  goto mul
                      02390 
                      02391  
                      02392 
                      02393 
                      02394 
                      02395 
                      02396 
                      02397  
                      02398  
                      02399 
                      02400  
                      02401 
                      02402 
                      02403 ansiadt udata
0000                  02404 aart00 RES .1
                      02405 #ifdef HLLMULTITASK
                      02406 #ifdef HLLGUARDaart
                      02407 aart00isr RES .1
                      02408 #endif 
                      02409 #endif 
0001                  02410 aart01 RES .1
                      02411 #ifdef HLLMULTITASK
                      02412 #ifdef HLLGUARDaart
                      02413 aart01isr RES .1
                      02414 #endif 
                      02415 #endif 
0002                  02416 aart02 RES .1
                      02417 #ifdef HLLMULTITASK
                      02418 #ifdef HLLGUARDaart
                      02419 aart02isr RES .1
                      02420 #endif 
                      02421 #endif 
                      02422 
                      02423  
                      02424 ansiara CODE
                      02425 
                      02426 ansiadu udata
0000                  02427 aartpr00 RES .1
                      02428 #ifdef HLLMULTITASK
                      02429 #ifdef HLLGUARDaartpr
                      02430 aart00prisr RES .1
                      02431 #endif 
                      02432 #endif 
                      02433 
                      02434 cprntuc CODE
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 65


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02435 
                      02436 
                      02437 
                      02438 #define margpi aartpr00
                      02439 
                      02440 
0000                  02441 printu:  
                      02442 #ifdef HLLMULTITASK
                      02443 #ifdef HLLGUARDaartpr 
                      02444  movf in_isr,f  
                      02445  btfsc STATUS,Z
                      02446  
                      02447 
                      02448 
                      02449  goto printu0
                      02450 
                      02451  POP
                      02452  banksel margpi
                      02453  movwf margpi
                      02454  PUSH
                      02455  movlw .100 
                      02456  PUSH
                      02457  
                      02458  FAR_CALL printu,divu
                      02459  POP
                      02460  addlw '0' 
                      02461  PUSH
                      02462  
                      02463  FAR_CALL printu,printch
                      02464  banksel margpi 
                      02465  movfw margpi
                      02466  PUSH
                      02467  movlw .100 
                      02468  PUSH
                      02469  
                      02470  FAR_CALL printu,modu
                      02471  movlw .10
                      02472  PUSH
                      02473  
                      02474  FAR_CALL printu,divu
                      02475  POP
                      02476  addlw '0' 
                      02477  PUSH
                      02478  
                      02479  FAR_CALL printu,printch
                      02480  banksel margpi
                      02481  movfw margpi
                      02482  PUSH
                      02483  movlw .10 
                      02484  PUSH
                      02485  
                      02486  FAR_CALL printu,modu
                      02487  POP
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 66


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02488  addlw '0' 
                      02489  PUSH
                      02490  
                      02491  FAR_CALL printu,printch  
                      02492  return
                      02493 
                      02494 
                      02495 
                      02496 #undefine margpi
                      02497 
                      02498 
                      02499 #define margpi aartpr00+1
                      02500 
                      02501 
                      02502 printu0:
                      02503 #endif
                      02504 #endif
                      02505 
                      02506  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   ???? ????      02507  banksel margpi
0004   00??           02508  movwf margpi
                      02509  PUSH
0005   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0006   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0007   3064           02510  movlw .100 
                      02511  PUSH
0008   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0009   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02512  
                      02513  FAR_CALL printu,divu
000A   ????               M  pagesel divu
000B   2???               M  call divu
000C   ????               M  pagesel printu    ;This one restores the caller's code page
                      02514  POP
000D   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
000E   0384               M  decf FSR,f 
000F   3E30           02515  addlw '0' 
                      02516  PUSH
0010   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0011   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02517  
                      02518  FAR_CALL printu,printch
0012   ????               M  pagesel printch
0013   2???               M  call printch
0014   ????               M  pagesel printu    ;This one restores the caller's code page
0015   ???? ????      02519  banksel margpi 
0017   08??           02520  movfw margpi
                      02521  PUSH
0018   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0019   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
001A   3064           02522  movlw .100 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 67


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02523  PUSH
001B   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
001C   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02524  
                      02525  FAR_CALL printu,modu
001D   ????               M  pagesel modu
001E   2???               M  call modu
001F   ????               M  pagesel printu    ;This one restores the caller's code page
0020   300A           02526  movlw .10
                      02527  PUSH
0021   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0022   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02528  
                      02529  FAR_CALL printu,divu
0023   ????               M  pagesel divu
0024   2???               M  call divu
0025   ????               M  pagesel printu    ;This one restores the caller's code page
                      02530  POP
0026   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0027   0384               M  decf FSR,f 
0028   3E30           02531  addlw '0' 
                      02532  PUSH
0029   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
002A   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02533  
                      02534  FAR_CALL printu,printch
002B   ????               M  pagesel printch
002C   2???               M  call printch
002D   ????               M  pagesel printu    ;This one restores the caller's code page
002E   ???? ????      02535  banksel margpi
0030   08??           02536  movfw margpi
                      02537  PUSH
0031   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0032   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0033   300A           02538  movlw .10 
                      02539  PUSH
0034   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0035   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02540  
                      02541  FAR_CALL printu,modu
0036   ????               M  pagesel modu
0037   2???               M  call modu
0038   ????               M  pagesel printu    ;This one restores the caller's code page
                      02542  POP
0039   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
003A   0384               M  decf FSR,f 
003B   3E30           02543  addlw '0' 
                      02544  PUSH
003C   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
003D   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02545  
                      02546  FAR_CALL printu,printch  
003E   ????               M  pagesel printch
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 68


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

003F   2???               M  call printch
0040   ????               M  pagesel printu    ;This one restores the caller's code page
0041   0008           02547  return
                      02548 
                      02549 
                      02550 
                      02551 #undefine margpi
                      02552 
                      02553 
                      02554 
                      02555 
                      02556  
                      02557  
                      02558 ansiarh CODE
                      02559  
0000                  02560 printchxy: 
                      02561  
0000   301B           02562  movlw 0x1b
                      02563  PUSH
0001   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0002   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02564  
                      02565  FAR_CALL printchxy,printch
0003   ????               M  pagesel printch
0004   2???               M  call printch
0005   ????               M  pagesel printchxy ;This one restores the caller's code page
0006   305B           02566  movlw '['
                      02567  PUSH
0007   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0008   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02568  
                      02569  HALF_FAR_CALL printch
0009   ????               M  pagesel printch        
000A   2???               M  call printch
                      02570  
                      02571  FAR_CALL printchxy,printu
000B   ????               M  pagesel printu
000C   2???               M  call printu
000D   ????               M  pagesel printchxy ;This one restores the caller's code page
000E   303B           02572  movlw ';'
                      02573  PUSH
000F   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0010   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02574  
                      02575  HALF_FAR_CALL printch
0011   ????               M  pagesel printch        
0012   2???               M  call printch
                      02576  
                      02577  FAR_CALL printchxy,printu
0013   ????               M  pagesel printu
0014   2???               M  call printu
0015   ????               M  pagesel printchxy ;This one restores the caller's code page
0016   3048           02578  movlw 'H'
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 69


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02579  PUSH
0017   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0018   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02580  
                      02581  HALF_FAR_CALL printch
0019   ????               M  pagesel printch        
001A   2???               M  call printch
                      02582  
                      02583  FAR_CALL printchxy,printch
001B   ????               M  pagesel printch
001C   2???               M  call printch
001D   ????               M  pagesel printchxy ;This one restores the caller's code page
001E   0008           02584  return
                      02585  
                      02586 
                      02587 
                      02588 
                      02589 
                      02590 
                      02591  
                      02592 
                      02593 
                      02594 hlog1a CODE
                      02595 
                      02596 
                      02597 
                      02598 #define margp2 hllblss00
                      02599 
                      02600 
0000                  02601 clearbit:  
                      02602 #ifdef HLLMULTITASK
                      02603 #ifdef HLLGUARDhllblss 
                      02604  movf in_isr,f  
                      02605  btfsc STATUS,Z
                      02606  
                      02607 
                      02608 
                      02609  goto clearbit0
                      02610 
                      02611  POP
                      02612  banksel margp2
                      02613  movwf margp2
                      02614  POP 
                      02615  xorlw .0
                      02616  btfss STATUS,Z
                      02617  goto tff00h
                      02618  
                      02619  movfw margp2
                      02620  andlw .255-.1
                      02621  goto tff99h
                      02622 tff00h: 
                      02623  
                      02624  xorlw .1
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 70


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02625  btfss STATUS,Z
                      02626  goto tff01h
                      02627  
                      02628  movfw margp2
                      02629  andlw .255-.2
                      02630  goto tff99h
                      02631 tff01h: 
                      02632  xorlw .1
                      02633  xorlw .2
                      02634  btfss STATUS,Z
                      02635  goto tff02h
                      02636  
                      02637  movfw margp2
                      02638  andlw .255-.4
                      02639  goto tff99h
                      02640 tff02h: 
                      02641  xorlw .2
                      02642  xorlw .3
                      02643  btfss STATUS,Z
                      02644  goto tff03h
                      02645  
                      02646  movfw margp2
                      02647  andlw .255-.8
                      02648  goto tff99h
                      02649 tff03h: 
                      02650  xorlw .3
                      02651  xorlw .4
                      02652  btfss STATUS,Z
                      02653  goto tff04h
                      02654  
                      02655  movfw margp2
                      02656  andlw .255-.16
                      02657  goto tff99h
                      02658 tff04h: 
                      02659  xorlw .4
                      02660  xorlw .5
                      02661  btfss STATUS,Z
                      02662  goto tff05h
                      02663  
                      02664  movfw margp2
                      02665  andlw .255-.32
                      02666  goto tff99h
                      02667 tff05h: 
                      02668  xorlw .5
                      02669  xorlw .6
                      02670  btfss STATUS,Z
                      02671  goto tff07h
                      02672  
                      02673  movfw margp2
                      02674  andlw .255-.64
                      02675  goto tff99h
                      02676 tff07h: 
                      02677  
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 71


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02678  movfw margp2
                      02679  andlw .255-.128
                      02680 tff99h:  
                      02681  PUSH
                      02682  return
                      02683 
                      02684 
                      02685 
                      02686 
                      02687 #undefine margp2
                      02688 
                      02689 
                      02690 #define margp2 hllblss00+1
                      02691 
                      02692 
                      02693 clearbit0:
                      02694 #endif
                      02695 #endif
                      02696 
                      02697  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   ???? ????      02698  banksel margp2
0004   00??           02699  movwf margp2
                      02700  POP 
0005   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0006   0384               M  decf FSR,f 
0007   3A00           02701  xorlw .0
0008   1D03           02702  btfss STATUS,Z
0009   2???           02703  goto hllAAAAA
                      02704  
000A   08??           02705  movfw margp2
000B   39FE           02706  andlw .255-.1
000C   2???           02707  goto hllHAAAA
000D                  02708 hllAAAAA: 
                      02709  
000D   3A01           02710  xorlw .1
000E   1D03           02711  btfss STATUS,Z
000F   2???           02712  goto hllBAAAA
                      02713  
0010   08??           02714  movfw margp2
0011   39FD           02715  andlw .255-.2
0012   2???           02716  goto hllHAAAA
0013                  02717 hllBAAAA: 
0013   3A01           02718  xorlw .1
0014   3A02           02719  xorlw .2
0015   1D03           02720  btfss STATUS,Z
0016   2???           02721  goto hllCAAAA
                      02722  
0017   08??           02723  movfw margp2
0018   39FB           02724  andlw .255-.4
0019   2???           02725  goto hllHAAAA
001A                  02726 hllCAAAA: 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 72


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001A   3A02           02727  xorlw .2
001B   3A03           02728  xorlw .3
001C   1D03           02729  btfss STATUS,Z
001D   2???           02730  goto hllDAAAA
                      02731  
001E   08??           02732  movfw margp2
001F   39F7           02733  andlw .255-.8
0020   2???           02734  goto hllHAAAA
0021                  02735 hllDAAAA: 
0021   3A03           02736  xorlw .3
0022   3A04           02737  xorlw .4
0023   1D03           02738  btfss STATUS,Z
0024   2???           02739  goto hllEAAAA
                      02740  
0025   08??           02741  movfw margp2
0026   39EF           02742  andlw .255-.16
0027   2???           02743  goto hllHAAAA
0028                  02744 hllEAAAA: 
0028   3A04           02745  xorlw .4
0029   3A05           02746  xorlw .5
002A   1D03           02747  btfss STATUS,Z
002B   2???           02748  goto hllFAAAA
                      02749  
002C   08??           02750  movfw margp2
002D   39DF           02751  andlw .255-.32
002E   2???           02752  goto hllHAAAA
002F                  02753 hllFAAAA: 
002F   3A05           02754  xorlw .5
0030   3A06           02755  xorlw .6
0031   1D03           02756  btfss STATUS,Z
0032   2???           02757  goto hllGAAAA
                      02758  
0033   08??           02759  movfw margp2
0034   39BF           02760  andlw .255-.64
0035   2???           02761  goto hllHAAAA
0036                  02762 hllGAAAA: 
                      02763  
0036   08??           02764  movfw margp2
0037   397F           02765  andlw .255-.128
0038                  02766 hllHAAAA:  
                      02767  PUSH
0038   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0039   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
003A   0008           02768  return
                      02769 
                      02770 
                      02771 
                      02772 
                      02773 #undefine margp2
                      02774 
                      02775 
                      02776 
                      02777 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 73


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02778 
                      02779 
                      02780  
                      02781 
                      02782  
                      02783 ansiarb CODE
                      02784  
                      02785  
0000                  02786 cls:
                      02787  
0000   301B           02788  movlw 0x1b
                      02789  PUSH
0001   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0002   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02790  
                      02791  FAR_CALL cls,printch
0003   ????               M  pagesel printch
0004   2???               M  call printch
0005   ????               M  pagesel cls       ;This one restores the caller's code page
0006   305B           02792  movlw '['
                      02793  PUSH
0007   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0008   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02794  
                      02795  FAR_CALL cls,printch
0009   ????               M  pagesel printch
000A   2???               M  call printch
000B   ????               M  pagesel cls       ;This one restores the caller's code page
000C   3032           02796  movlw '2'
                      02797  PUSH
000D   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
000E   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02798  
                      02799  FAR_CALL cls,printch
000F   ????               M  pagesel printch
0010   2???               M  call printch
0011   ????               M  pagesel cls       ;This one restores the caller's code page
0012   304B           02800  movlw 'K'
                      02801  PUSH
0013   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0014   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02802  
                      02803  FAR_CALL cls,printch
0015   ????               M  pagesel printch
0016   2???               M  call printch
0017   ????               M  pagesel cls       ;This one restores the caller's code page
                      02804 
                      02805 
0018   301B           02806  movlw 0x1b
                      02807  PUSH
0019   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
001A   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02808  
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 74


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02809  FAR_CALL cls,printch
001B   ????               M  pagesel printch
001C   2???               M  call printch
001D   ????               M  pagesel cls       ;This one restores the caller's code page
001E   305B           02810  movlw '['
                      02811  PUSH
001F   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0020   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02812  
                      02813  FAR_CALL cls,printch
0021   ????               M  pagesel printch
0022   2???               M  call printch
0023   ????               M  pagesel cls       ;This one restores the caller's code page
0024   304A           02814  movlw 'J'
                      02815  PUSH
0025   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0026   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02816  
                      02817  FAR_CALL cls,printch
0027   ????               M  pagesel printch
0028   2???               M  call printch
0029   ????               M  pagesel cls       ;This one restores the caller's code page
                      02818  
                      02819  
                      02820  
002A   301B           02821  movlw 0x1b
                      02822  PUSH
002B   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
002C   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02823  
                      02824  FAR_CALL cls,printch
002D   ????               M  pagesel printch
002E   2???               M  call printch
002F   ????               M  pagesel cls       ;This one restores the caller's code page
0030   305B           02825  movlw '['
                      02826  PUSH
0031   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0032   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02827  
                      02828  FAR_CALL cls,printch
0033   ????               M  pagesel printch
0034   2???               M  call printch
0035   ????               M  pagesel cls       ;This one restores the caller's code page
0036   3031           02829  movlw '1'
                      02830  PUSH
0037   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0038   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02831  
                      02832  FAR_CALL cls,printch
0039   ????               M  pagesel printch
003A   2???               M  call printch
003B   ????               M  pagesel cls       ;This one restores the caller's code page
003C   304A           02833  movlw 'J'
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 75


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02834  PUSH
003D   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
003E   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02835  
                      02836  FAR_CALL cls,printch
003F   ????               M  pagesel printch
0040   2???               M  call printch
0041   ????               M  pagesel cls       ;This one restores the caller's code page
                      02837 
                      02838 
0042   301B           02839  movlw 0x1b
                      02840  PUSH
0043   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0044   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02841  
                      02842  FAR_CALL cls,printch
0045   ????               M  pagesel printch
0046   2???               M  call printch
0047   ????               M  pagesel cls       ;This one restores the caller's code page
0048   305B           02843  movlw '['
                      02844  PUSH
0049   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
004A   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02845  
                      02846  FAR_CALL cls,printch
004B   ????               M  pagesel printch
004C   2???               M  call printch
004D   ????               M  pagesel cls       ;This one restores the caller's code page
004E   3032           02847  movlw '2'
                      02848  PUSH
004F   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0050   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02849  
                      02850  FAR_CALL cls,printch
0051   ????               M  pagesel printch
0052   2???               M  call printch
0053   ????               M  pagesel cls       ;This one restores the caller's code page
0054   304B           02851  movlw 'K'
                      02852  PUSH
0055   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0056   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02853  
                      02854  FAR_CALL cls,printch
0057   ????               M  pagesel printch
0058   2???               M  call printch
0059   ????               M  pagesel cls       ;This one restores the caller's code page
                      02855 
                      02856 
005A   301B           02857  movlw 0x1b
                      02858  PUSH
005B   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
005C   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02859  
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 76


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02860  FAR_CALL cls,printch
005D   ????               M  pagesel printch
005E   2???               M  call printch
005F   ????               M  pagesel cls       ;This one restores the caller's code page
0060   305B           02861  movlw '['
                      02862  PUSH
0061   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0062   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02863  
                      02864  FAR_CALL cls,printch
0063   ????               M  pagesel printch
0064   2???               M  call printch
0065   ????               M  pagesel cls       ;This one restores the caller's code page
0066   304A           02865  movlw 'J'
                      02866  PUSH
0067   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0068   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02867  
                      02868  FAR_CALL cls,printch
0069   ????               M  pagesel printch
006A   2???               M  call printch
006B   ????               M  pagesel cls       ;This one restores the caller's code page
                      02869  
                      02870  
                      02871  
006C   301B           02872  movlw 0x1b
                      02873  PUSH
006D   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
006E   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02874  
                      02875  FAR_CALL cls,printch
006F   ????               M  pagesel printch
0070   2???               M  call printch
0071   ????               M  pagesel cls       ;This one restores the caller's code page
0072   305B           02876  movlw '['
                      02877  PUSH
0073   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0074   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02878  
                      02879  FAR_CALL cls,printch
0075   ????               M  pagesel printch
0076   2???               M  call printch
0077   ????               M  pagesel cls       ;This one restores the caller's code page
0078   3031           02880  movlw '1'
                      02881  PUSH
0079   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
007A   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02882  
                      02883  FAR_CALL cls,printch
007B   ????               M  pagesel printch
007C   2???               M  call printch
007D   ????               M  pagesel cls       ;This one restores the caller's code page
007E   304A           02884  movlw 'J'
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 77


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02885  PUSH
007F   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0080   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02886  
                      02887  FAR_CALL cls,printch
0081   ????               M  pagesel printch
0082   2???               M  call printch
0083   ????               M  pagesel cls       ;This one restores the caller's code page
                      02888 
0084   0008           02889  return
                      02890 
                      02891  
                      02892 
                      02893 
                      02894 
                      02895 
                      02896  
                      02897  
                      02898 
                      02899 hllcmppic CODE
                      02900 
                      02901 
                      02902 
                      02903 #define mkarg1 hllblss00
                      02904 
                      02905 
0000                  02906 geu:  
                      02907 #ifdef HLLMULTITASK
                      02908 #ifdef HLLGUARDhllblss 
                      02909  movf in_isr,f  
                      02910  btfsc STATUS,Z
                      02911  
                      02912 
                      02913 
                      02914  goto geu0
                      02915 
                      02916 
                      02917  POP
                      02918  banksel mkarg1
                      02919  movwf mkarg1    
                      02920  POP
                      02921  subwf mkarg1,w
                      02922  btfsc STATUS,Z
                      02923  goto mxhbl
                      02924  btfsc STATUS,C
                      02925  goto mxhbm
                      02926 mxhbl:
                      02927  movlw .1
                      02928  PUSH
                      02929  
                      02930  return
                      02931 mxhbm:
                      02932  movlw .0
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 78


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02933  PUSH
                      02934  
                      02935  return
                      02936 
                      02937 
                      02938 
                      02939 #undefine mkarg1
                      02940 
                      02941 
                      02942 #define mkarg1 hllblss00+1
                      02943 
                      02944 
                      02945 geu0:
                      02946 #endif
                      02947 #endif
                      02948 
                      02949 
                      02950  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   ???? ????      02951  banksel mkarg1
0004   00??           02952  movwf mkarg1    
                      02953  POP
0005   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0006   0384               M  decf FSR,f 
0007   02??           02954  subwf mkarg1,w
0008   1903           02955  btfsc STATUS,Z
0009   2???           02956  goto hllIAAAA
000A   1803           02957  btfsc STATUS,C
000B   2???           02958  goto hllJAAAA
000C                  02959 hllIAAAA:
000C   3001           02960  movlw .1
                      02961  PUSH
000D   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
000E   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02962  
000F   0008           02963  return
0010                  02964 hllJAAAA:
0010   3000           02965  movlw .0
                      02966  PUSH
0011   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0012   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      02967  
0013   0008           02968  return
                      02969 
                      02970 
                      02971 
                      02972 #undefine mkarg1
                      02973 
                      02974 
                      02975 
                      02976 
                      02977 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 79


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02978 
                      02979 
                      02980  
                      02981 
                      02982 
                      02983 
                      02984 ukrnl2 UDATA
0000                  02985 stack res HLOE_STACK_SIZE
                      02986  
                      02987 ukrnl3 UDATA 
0000                  02988 alt_stack res HLOE_STACK2_SIZE
                      02989  
                      02990 
                      02991 
                      02992 ukernl udata 
                      02993 
                      02994 
                      02995 
                      02996 
                      02997 
0000                  02998 hllblss00 res 1           
                      02999 #ifdef HLLMULTITASK
                      03000 #ifdef HLLGUARDhllblss
                      03001 hllblss00isr res 1      
                      03002 #endif
                      03003 #endif
                      03004 
0001                  03005 hllblss01 res 1    
                      03006 #ifdef HLLMULTITASK
                      03007 #ifdef HLLGUARDhllblss
                      03008 hllblss01isr res 1      
                      03009 #endif
                      03010 #endif
                      03011 
0002                  03012 hllblss02 res 1    
                      03013 #ifdef HLLMULTITASK
                      03014 #ifdef HLLGUARDhllblss
                      03015 hllblss02isr res 1      
                      03016 #endif
                      03017 #endif
                      03018   
                      03019 ukrshr udata_shr
                      03020 
                      03021 
0000                  03022 softstack0 res 1                
                      03023 #ifdef HLLMULTITASK
                      03024 softstack0isr res 1
                      03025 #endif
                      03026 
0001                  03027 softstack1 res 1                
                      03028 #ifdef HLLMULTITASK
                      03029 softstack1isr res 1
                      03030 #endif
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 80


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03031 
0002                  03032 softstack2 res 1                
                      03033 #ifdef HLLMULTITASK
                      03034 softstack2isr res 1
                      03035 #endif
                      03036 
0003                  03037 alt_fsr res 1
0004                  03038 W_Save res 1 
0005                  03039 STATUS_Save res 1
0006                  03040 FSR_Save res 1
0007                  03041 ALT_Save res 1
0008                  03042 in_isr res 1
                      03043 
                      03044 hllkrna00 CODE
                      03045 
                      03046  
                      03047 
                      03048 
                      03049 #define mterm hllblss00
                      03050 
                      03051 
0000                  03052 mul:  
                      03053 #ifdef HLLMULTITASK
                      03054 #ifdef HLLGUARDhllblss 
                      03055  movf in_isr,f  
                      03056  btfsc STATUS,Z
                      03057  
                      03058 
                      03059 
                      03060  goto mul0
                      03061 
                      03062  POP
                      03063  banksel mterm 
                      03064  movwf mterm
                      03065  clrw 
                      03066  addwf HLINDF,w 
                      03067  decf mterm,f 
                      03068  btfss STATUS,Z 
                      03069  goto $-3
                      03070  movwf HLINDF
                      03071  return
                      03072 
                      03073 
                      03074 
                      03075 #undefine mterm
                      03076 
                      03077 
                      03078 #define mterm hllblss00+1
                      03079 
                      03080 
                      03081 mul0:
                      03082 #endif
                      03083 #endif
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 81


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03084 
                      03085  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   ???? ????      03086  banksel mterm 
0004   00??           03087  movwf mterm
0005   0103           03088  clrw 
0006   0700           03089  addwf HLINDF,w 
0007   03??           03090  decf mterm,f 
0008   1D03           03091  btfss STATUS,Z 
0009   2???           03092  goto $-3
000A   0080           03093  movwf HLINDF
000B   0008           03094  return
                      03095 
                      03096 
                      03097 
                      03098 #undefine mterm
                      03099 hllkrna01 CODE
                      03100 
0000                  03101 add: 
                      03102  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   0700           03103  addwf HLINDF,w
0003   0384           03104  decf HLFSR,f 
                      03105  PUSH
0004   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0005   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0006   0008           03106  return
                      03107  
                      03108 hllkrna02 CODE 
                      03109 
0000                  03110 negti:  
0000   0980           03111  comf HLINDF,f
0001   0A80           03112  incf HLINDF,f
0002   0008           03113  return
                      03114  
                      03115 hllkrna03 CODE 
                      03116  
0000                  03117 printch:
                      03118  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
                      03119 #ifdef HLLMULTITASK 
                      03120  
                      03121  banksel PIR1
                      03122  btfss PIR1,TXIF  
                      03123  goto $-1 
                      03124 #endif 
                      03125  
0002   1283 1303      03126  banksel TXREG
0004   0099           03127  movwf TXREG  
                      03128  
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 82


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0005   1283 1303      03129  banksel PIR1
0007   1E0C           03130  btfss PIR1,TXIF  
0008   2???           03131  goto $-1  
0009   0008           03132  return  
                      03133 
                      03134 
                      03135 
                      03136 
                      03137 hllkrna04 CODE
                      03138  
                      03139 
                      03140 
                      03141 #define mterm hllblss00
                      03142 
                      03143 
                      03144 #define mdiv hllblss01
                      03145 
                      03146 
                      03147 #define mquot hllblss02
                      03148 
                      03149 
0000                  03150 modu:  
                      03151 #ifdef HLLMULTITASK
                      03152 #ifdef HLLGUARDhllblss 
                      03153  movf in_isr,f  
                      03154  btfsc STATUS,Z
                      03155  
                      03156 
                      03157 
                      03158  goto modu0
                      03159 
                      03160  banksel mquot 
                      03161  clrf mquot
                      03162  POP
                      03163  movwf mdiv
                      03164  POP
                      03165  movwf mterm
                      03166  movfw mdiv
                      03167  subwf mterm,f
                      03168  btfss STATUS,C 
                      03169  goto $+3
                      03170  incf mquot,f 
                      03171  goto $-4
                      03172  addwf mterm,w
                      03173  PUSH
                      03174  return 
                      03175 
                      03176 
                      03177 
                      03178 #undefine mterm
                      03179 
                      03180 
                      03181 #undefine mdiv
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 83


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03182 
                      03183 
                      03184 #undefine mquot
                      03185 
                      03186 
                      03187 #define mterm hllblss00+1
                      03188 
                      03189 
                      03190 #define mdiv hllblss01+1
                      03191 
                      03192 
                      03193 #define mquot hllblss02+1
                      03194 
                      03195 
                      03196 modu0:
                      03197 #endif
                      03198 #endif
                      03199 
0000   ???? ????      03200  banksel mquot 
0002   01??           03201  clrf mquot
                      03202  POP
0003   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0004   0384               M  decf FSR,f 
0005   00??           03203  movwf mdiv
                      03204  POP
0006   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0007   0384               M  decf FSR,f 
0008   00??           03205  movwf mterm
0009   08??           03206  movfw mdiv
000A   02??           03207  subwf mterm,f
000B   1C03           03208  btfss STATUS,C 
000C   2???           03209  goto $+3
000D   0A??           03210  incf mquot,f 
000E   2???           03211  goto $-4
000F   07??           03212  addwf mterm,w
                      03213  PUSH
0010   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0011   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0012   0008           03214  return 
                      03215 
                      03216 
                      03217 
                      03218 #undefine mterm
                      03219 
                      03220 
                      03221 #undefine mdiv
                      03222 
                      03223 
                      03224 #undefine mquot
                      03225 hllkrna05 CODE
                      03226 
                      03227 
                      03228 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 84


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03229 #define mterm hllblss00
                      03230 
                      03231 
                      03232 #define mdiv hllblss01
                      03233 
                      03234 
                      03235 #define mquot hllblss02
                      03236 
                      03237 
0000                  03238 divu:  
                      03239 #ifdef HLLMULTITASK
                      03240 #ifdef HLLGUARDhllblss 
                      03241  movf in_isr,f  
                      03242  btfsc STATUS,Z
                      03243  
                      03244 
                      03245 
                      03246  goto divu0
                      03247 
                      03248  banksel mquot 
                      03249  clrf mquot
                      03250  POP
                      03251  movwf mdiv
                      03252  POP
                      03253  movwf mterm
                      03254  movfw mdiv
                      03255  subwf mterm,f
                      03256  btfss STATUS,C 
                      03257  goto $+3
                      03258  incf mquot,f 
                      03259  goto $-4
                      03260  movfw mquot
                      03261  PUSH
                      03262  return 
                      03263 
                      03264 
                      03265 
                      03266 #undefine mterm
                      03267 
                      03268 
                      03269 #undefine mdiv
                      03270 
                      03271 
                      03272 #undefine mquot
                      03273 
                      03274 
                      03275 #define mterm hllblss00+1
                      03276 
                      03277 
                      03278 #define mdiv hllblss01+1
                      03279 
                      03280 
                      03281 #define mquot hllblss02+1
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 85


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03282 
                      03283 
                      03284 divu0:
                      03285 #endif
                      03286 #endif
                      03287 
0000   ???? ????      03288  banksel mquot 
0002   01??           03289  clrf mquot
                      03290  POP
0003   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0004   0384               M  decf FSR,f 
0005   00??           03291  movwf mdiv
                      03292  POP
0006   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0007   0384               M  decf FSR,f 
0008   00??           03293  movwf mterm
0009   08??           03294  movfw mdiv
000A   02??           03295  subwf mterm,f
000B   1C03           03296  btfss STATUS,C 
000C   2???           03297  goto $+3
000D   0A??           03298  incf mquot,f 
000E   2???           03299  goto $-4
000F   08??           03300  movfw mquot
                      03301  PUSH
0010   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0011   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0012   0008           03302  return 
                      03303 
                      03304 
                      03305 
                      03306 #undefine mterm
                      03307 
                      03308 
                      03309 #undefine mdiv
                      03310 
                      03311 
                      03312 #undefine mquot
                      03313 hllkrna06 CODE
                      03314 
                      03315  
                      03316  
                      03317  
0000                  03318 getch:
0000   1283 1303      03319  banksel PIR1
0002                  03320 geth2: 
0002   1E8C           03321  btfss PIR1,RCIF
0003   2???           03322  goto geth2
0004   1283 1303      03323  banksel RCREG
0006   081A           03324  movf RCREG,w
                      03325  PUSH 
0007   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0008   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0009   0008           03326  return
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 86


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03327  
                      03328 hllkrna07 CODE 
                      03329  
0000                  03330 eq: 
                      03331  POP 
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   0600           03332  xorwf HLINDF,w
0003   3001           03333  movlw .1 
0004   1D03           03334  btfss STATUS,Z
0005   3000           03335  movlw .0 
0006   0384           03336  decf HLFSR,f 
                      03337  PUSH 
0007   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0008   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0009   0008           03338  return
                      03339  
                      03340  
                      03341  
                      03342 
                      03343 #define sstack0 softstack0 
                      03344 #define sstack1 softstack1 
                      03345 #define sstack2 softstack2 
                      03346 
                      03347 hllparmcore macro 
                      03348  movwf sstack2
                      03349  movfw HLFSR 
                      03350            
                      03351                    
                      03352  movwf sstack0
                      03353  movfw HLINDF
                      03354  
                      03355  subwf sstack2,w
                      03356  movwf HLFSR 
                      03357  movfw HLINDF 
                      03358  
                      03359  movwf sstack1
                      03360  
                      03361  movfw sstack0
                      03362  movwf HLFSR 
                      03363  clrf sstack0
                      03364  movfw sstack1 
                      03365  movwf HLINDF
                      03366  
                      03367  movfw sstack2
                      03368  pagesel kpush
                      03369  goto kpush 
                      03370  endm
                      03371 
                      03372  
                      03373 hllkrna08 CODE  
0000                  03374 parm:
                      03375  KPOP 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 87


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000   ????               M  bankisel alt_stack ;This is OK for interrupts... part of STATUS 
0001   08??               M  movf in_isr,f ;In shared RAM, no need for BANKSEL
0002   1903               M  btfsc STATUS,Z
0003   2???               M  goto $+0F
0004   0804               M  movfw FSR 
0005   00??               M  movwf softstack0+1 ;Save user stack ptr 
0006   08??               M  movfw alt_fsr ;Get second stack ptr 
0007   0084               M  movwf FSR 
0008   0800               M  movfw INDF ;Dereference it 
0009   0384               M  decf FSR,f ;Decrement it 
000A   00??               M  movwf softstack1+1  ;Save popped value for ret urn 
000B   0804               M  movfw FSR ;Save second stack ptr 
000C   00??               M  movwf alt_fsr 
000D   08??               M  movfw softstack0+1  ;Restore user stack ptr 
000E   0084               M  movwf FSR 
000F   01??               M  clrf softstack0+1
0010   08??               M  movfw softstack1+1  ;Bring back popped value for ret urn 
0011   2???               M  goto $+0E
0012   0804               M  movfw FSR 
0013   00??               M  movwf softstack0 ;Save user stack ptr 
0014   08??               M  movfw alt_fsr ;Get second stack ptr 
0015   0084               M  movwf FSR 
0016   0800               M  movfw INDF ;Dereference it 
0017   0384               M  decf FSR,f ;Decrement it 
0018   00??               M  movwf softstack1  ;Save popped value for ret urn 
0019   0804               M  movfw FSR ;Save second stack ptr 
001A   00??               M  movwf alt_fsr 
001B   08??               M  movfw softstack0  ;Restore user stack ptr 
001C   0084               M  movwf FSR 
001D   01??               M  clrf softstack0
001E   08??               M  movfw softstack1  ;Bring back popped value for ret urn 
001F   ????               M  bankisel stack
                      03376  
                      03377 #ifdef HLLMULTITASK 
                      03378  movf in_isr,f 
                      03379  btfss STATUS,Z
                      03380  goto parm4
                      03381  hllparmcore
                      03382 #undefine sstack0 
                      03383 #undefine sstack1
                      03384 #undefine sstack2 
                      03385 #define sstack0 softstack0+1
                      03386 #define sstack1 softstack1+1
                      03387 #define sstack2 softstack2+1
                      03388 parm4:
                      03389 #endif 
                      03390  hllparmcore
0020   00??               M  movwf sstack2
0021   0804               M  movfw HLFSR 
                          M            
                          M                    
0022   00??               M  movwf sstack0
0023   0800               M  movfw HLINDF
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 88


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M  
0024   02??               M  subwf sstack2,w
0025   0084               M  movwf HLFSR 
0026   0800               M  movfw HLINDF 
                          M  
0027   00??               M  movwf sstack1
                          M  
0028   08??               M  movfw sstack0
0029   0084               M  movwf HLFSR 
002A   01??               M  clrf sstack0
002B   08??               M  movfw sstack1 
002C   0080               M  movwf HLINDF
                          M  
002D   08??               M  movfw sstack2
002E   ????               M  pagesel kpush
002F   2???               M  goto kpush 
                      03391 #undefine sstack0 
                      03392 #undefine sstack1
                      03393 #undefine sstack2 
                      03394  
                      03395 hllkrna09 CODE  
0000                  03396 kpop: 
                      03397  KPOP
0000   ????               M  bankisel alt_stack ;This is OK for interrupts... part of STATUS 
0001   08??               M  movf in_isr,f ;In shared RAM, no need for BANKSEL
0002   1903               M  btfsc STATUS,Z
0003   2???               M  goto $+0F
0004   0804               M  movfw FSR 
0005   00??               M  movwf softstack0+1 ;Save user stack ptr 
0006   08??               M  movfw alt_fsr ;Get second stack ptr 
0007   0084               M  movwf FSR 
0008   0800               M  movfw INDF ;Dereference it 
0009   0384               M  decf FSR,f ;Decrement it 
000A   00??               M  movwf softstack1+1  ;Save popped value for ret urn 
000B   0804               M  movfw FSR ;Save second stack ptr 
000C   00??               M  movwf alt_fsr 
000D   08??               M  movfw softstack0+1  ;Restore user stack ptr 
000E   0084               M  movwf FSR 
000F   01??               M  clrf softstack0+1
0010   08??               M  movfw softstack1+1  ;Bring back popped value for ret urn 
0011   2???               M  goto $+0E
0012   0804               M  movfw FSR 
0013   00??               M  movwf softstack0 ;Save user stack ptr 
0014   08??               M  movfw alt_fsr ;Get second stack ptr 
0015   0084               M  movwf FSR 
0016   0800               M  movfw INDF ;Dereference it 
0017   0384               M  decf FSR,f ;Decrement it 
0018   00??               M  movwf softstack1  ;Save popped value for ret urn 
0019   0804               M  movfw FSR ;Save second stack ptr 
001A   00??               M  movwf alt_fsr 
001B   08??               M  movfw softstack0  ;Restore user stack ptr 
001C   0084               M  movwf FSR 
001D   01??               M  clrf softstack0
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 89


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001E   08??               M  movfw softstack1  ;Bring back popped value for ret urn 
001F   ????               M  bankisel stack
0020   0008           03398  return 
                      03399  
                      03400 hllkrna10 CODE   
0000                  03401 kpush: 
                      03402  KPUSH
0000   ????               M  bankisel alt_stack ;This is OK for interrupts... part of STATUS 
0001   08??               M  movf in_isr,f ;In shared RAM, no need for BANKSEL
0002   1903               M  btfsc STATUS,Z
0003   2???               M  goto $+0E
0004   00??               M  movwf softstack1+1 ;softstack1 holds parm value being pushed
0005   0804               M  movfw FSR  
0006   00??               M  movwf softstack0+1  ;softstack0 holds FSR
0007   08??               M  movfw alt_fsr 
0008   0084               M  movwf FSR 
0009   08??               M  movfw softstack1+1
000A   0A??               M  incf alt_fsr,f 
000B   0A84               M  incf FSR,f ;The actual kernel push... preincrement for interrupt safety
000C   0080               M  movwf INDF 
000D   08??               M  movfw softstack0+1
000E   0084               M  movwf FSR 
000F   01??               M  clrf softstack0+1 
0010   2???               M  goto $+0D
0011   00??               M  movwf softstack1 ;softstack1 holds parm value being pushed
0012   0804               M  movfw FSR  
0013   00??               M  movwf softstack0  ;softstack0 holds FSR
0014   08??               M  movfw alt_fsr 
0015   0084               M  movwf FSR 
0016   08??               M  movfw softstack1
0017   0A??               M  incf alt_fsr,f 
0018   0A84               M  incf FSR,f ;The actual kernel push... preincrement for interrupt safety
0019   0080               M  movwf INDF 
001A   08??               M  movfw softstack0
001B   0084               M  movwf FSR 
001C   01??               M  clrf softstack0
001D   ????               M  bankisel stack
001E   0008           03403  return
                      03404 
                      03405 hllkrna11 CODE   
0000                  03406 dispose:
                      03407  DISCARD
0000   0384               M  decf FSR,f 
0001   0008           03408  return 
                      03409  
                      03410  
                      03411 
                      03412 
                      03413 
                      03414 
                      03415 
                      03416 
                      03417  
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 90


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03418 
                      03419 
                      03420  
                      03421 hlog1e CODE
                      03422  
                      03423 
0000                  03424 orb: 
                      03425  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   3A00           03426  xorlw .0
0003   1903           03427  btfsc STATUS,Z
0004   2???           03428  goto zzorz1
0005   3001           03429  movlw .1
0006   0080           03430  movwf HLINDF
0007   0008           03431  return
0008                  03432 zzorz1: 
                      03433  POP
0008   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0009   0384               M  decf FSR,f 
000A   3A00           03434  xorlw .0
000B   1903           03435  btfsc STATUS,Z
000C   2???           03436  goto zzorz2
000D   3001           03437  movlw .1
                      03438  PUSH
000E   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
000F   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0010   0008           03439  return
0011                  03440 zzorz2: 
0011   3000           03441  movlw .0
                      03442  PUSH
0012   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0013   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0014   0008           03443  return
                      03444 
                      03445  
                      03446 
                      03447 
                      03448 
                      03449 
                      03450 
                      03451  
                      03452  
                      03453 
                      03454  
                      03455 hlog1d CODE
                      03456 
0000                  03457 oru: 
                      03458  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   0400           03459  iorwf HLINDF,w
0003   0384           03460  decf HLFSR,f 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 91


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03461  PUSH
0004   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0005   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0006   0008           03462  return
                      03463 
                      03464  
                      03465 
                      03466 
                      03467 
                      03468 
                      03469 
                      03470 
                      03471 
                      03472 
                      03473 
                      03474  
                      03475 
                      03476 
                      03477 a1tsssck CODE
                      03478 
0000                  03479 remove:
                      03480  POP 
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
                      03481  KPUSH 
0002   ????               M  bankisel alt_stack ;This is OK for interrupts... part of STATUS 
0003   08??               M  movf in_isr,f ;In shared RAM, no need for BANKSEL
0004   1903               M  btfsc STATUS,Z
0005   2???               M  goto $+0E
0006   00??               M  movwf softstack1+1 ;softstack1 holds parm value being pushed
0007   0804               M  movfw FSR  
0008   00??               M  movwf softstack0+1  ;softstack0 holds FSR
0009   08??               M  movfw alt_fsr 
000A   0084               M  movwf FSR 
000B   08??               M  movfw softstack1+1
000C   0A??               M  incf alt_fsr,f 
000D   0A84               M  incf FSR,f ;The actual kernel push... preincrement for interrupt safety
000E   0080               M  movwf INDF 
000F   08??               M  movfw softstack0+1
0010   0084               M  movwf FSR 
0011   01??               M  clrf softstack0+1 
0012   2???               M  goto $+0D
0013   00??               M  movwf softstack1 ;softstack1 holds parm value being pushed
0014   0804               M  movfw FSR  
0015   00??               M  movwf softstack0  ;softstack0 holds FSR
0016   08??               M  movfw alt_fsr 
0017   0084               M  movwf FSR 
0018   08??               M  movfw softstack1
0019   0A??               M  incf alt_fsr,f 
001A   0A84               M  incf FSR,f ;The actual kernel push... preincrement for interrupt safety
001B   0080               M  movwf INDF 
001C   08??               M  movfw softstack0
001D   0084               M  movwf FSR 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 92


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001E   01??               M  clrf softstack0
001F   ????               M  bankisel stack
0020   0008           03482  return
                      03483 
                      03484 
                      03485  
                      03486 
                      03487 
                      03488 
                      03489 
                      03490 
                      03491 
                      03492 
                      03493 
                      03494  
                      03495 
                      03496 
                      03497 altstall CODE
                      03498 
0000                  03499 restore:
                      03500  KPOP 
0000   ????               M  bankisel alt_stack ;This is OK for interrupts... part of STATUS 
0001   08??               M  movf in_isr,f ;In shared RAM, no need for BANKSEL
0002   1903               M  btfsc STATUS,Z
0003   2???               M  goto $+0F
0004   0804               M  movfw FSR 
0005   00??               M  movwf softstack0+1 ;Save user stack ptr 
0006   08??               M  movfw alt_fsr ;Get second stack ptr 
0007   0084               M  movwf FSR 
0008   0800               M  movfw INDF ;Dereference it 
0009   0384               M  decf FSR,f ;Decrement it 
000A   00??               M  movwf softstack1+1  ;Save popped value for ret urn 
000B   0804               M  movfw FSR ;Save second stack ptr 
000C   00??               M  movwf alt_fsr 
000D   08??               M  movfw softstack0+1  ;Restore user stack ptr 
000E   0084               M  movwf FSR 
000F   01??               M  clrf softstack0+1
0010   08??               M  movfw softstack1+1  ;Bring back popped value for ret urn 
0011   2???               M  goto $+0E
0012   0804               M  movfw FSR 
0013   00??               M  movwf softstack0 ;Save user stack ptr 
0014   08??               M  movfw alt_fsr ;Get second stack ptr 
0015   0084               M  movwf FSR 
0016   0800               M  movfw INDF ;Dereference it 
0017   0384               M  decf FSR,f ;Decrement it 
0018   00??               M  movwf softstack1  ;Save popped value for ret urn 
0019   0804               M  movfw FSR ;Save second stack ptr 
001A   00??               M  movwf alt_fsr 
001B   08??               M  movfw softstack0  ;Restore user stack ptr 
001C   0084               M  movwf FSR 
001D   01??               M  clrf softstack0
001E   08??               M  movfw softstack1  ;Bring back popped value for ret urn 
001F   ????               M  bankisel stack
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 93


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03501  PUSH 
0020   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0021   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0022   0008           03502  return 
                      03503 
                      03504  
                      03505 
                      03506 
                      03507 
                      03508 
                      03509  
                      03510  
                      03511 
                      03512  
                      03513 hlog1b CODE
                      03514 
                      03515 
                      03516 #define margp2 hllblss00
                      03517 
                      03518 
0000                  03519 setbit:  
                      03520 #ifdef HLLMULTITASK
                      03521 #ifdef HLLGUARDhllblss 
                      03522  movf in_isr,f  
                      03523  btfsc STATUS,Z
                      03524  
                      03525 
                      03526 
                      03527  goto setbit0
                      03528 
                      03529  POP
                      03530  banksel margp2
                      03531  movwf  margp2
                      03532  POP
                      03533  xorlw .0
                      03534  btfss STATUS,Z
                      03535  goto tcf00h
                      03536  
                      03537  movfw  margp2
                      03538  iorlw .1
                      03539  goto tcf99h
                      03540 tcf00h: 
                      03541  
                      03542  xorlw .1
                      03543  btfss STATUS,Z
                      03544  goto tcf01h
                      03545  
                      03546  movfw  margp2
                      03547  iorlw .2
                      03548  goto tcf99h
                      03549 tcf01h: 
                      03550  xorlw .1
                      03551  xorlw .2
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 94


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03552  btfss STATUS,Z
                      03553  goto tcf02h
                      03554  
                      03555  movfw margp2
                      03556  iorlw .4
                      03557  goto tcf99h
                      03558 tcf02h: 
                      03559  xorlw .2
                      03560  xorlw .3
                      03561  btfss STATUS,Z
                      03562  goto tcf03h
                      03563  
                      03564  movfw margp2
                      03565  iorlw .8
                      03566  goto tcf99h
                      03567 tcf03h: 
                      03568  xorlw .3
                      03569  xorlw .4
                      03570  btfss STATUS,Z
                      03571  goto tcf04h
                      03572  
                      03573  movfw margp2
                      03574  iorlw .16
                      03575  goto tcf99h
                      03576 tcf04h: 
                      03577  xorlw .4
                      03578  xorlw .5
                      03579  btfss STATUS,Z
                      03580  goto tcf05h
                      03581  
                      03582  movfw margp2
                      03583  iorlw .32
                      03584  goto tcf99h
                      03585 tcf05h: 
                      03586  xorlw .5
                      03587  xorlw .6
                      03588  btfss STATUS,Z
                      03589  goto tcf07h
                      03590  
                      03591  movfw margp2
                      03592  iorlw .64
                      03593  goto tcf99h
                      03594 tcf07h: 
                      03595  
                      03596  movfw margp2
                      03597  iorlw .128 
                      03598 tcf99h:  
                      03599  PUSH 
                      03600  return
                      03601 
                      03602 
                      03603 
                      03604 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 95


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03605 #undefine margp2
                      03606 
                      03607 
                      03608 #define margp2 hllblss00+1
                      03609 
                      03610 
                      03611 setbit0:
                      03612 #endif
                      03613 #endif
                      03614 
                      03615  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   ???? ????      03616  banksel margp2
0004   00??           03617  movwf  margp2
                      03618  POP
0005   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0006   0384               M  decf FSR,f 
0007   3A00           03619  xorlw .0
0008   1D03           03620  btfss STATUS,Z
0009   2???           03621  goto hllKAAAA
                      03622  
000A   08??           03623  movfw  margp2
000B   3801           03624  iorlw .1
000C   2???           03625  goto hllRAAAA
000D                  03626 hllKAAAA: 
                      03627  
000D   3A01           03628  xorlw .1
000E   1D03           03629  btfss STATUS,Z
000F   2???           03630  goto hllLAAAA
                      03631  
0010   08??           03632  movfw  margp2
0011   3802           03633  iorlw .2
0012   2???           03634  goto hllRAAAA
0013                  03635 hllLAAAA: 
0013   3A01           03636  xorlw .1
0014   3A02           03637  xorlw .2
0015   1D03           03638  btfss STATUS,Z
0016   2???           03639  goto hllMAAAA
                      03640  
0017   08??           03641  movfw margp2
0018   3804           03642  iorlw .4
0019   2???           03643  goto hllRAAAA
001A                  03644 hllMAAAA: 
001A   3A02           03645  xorlw .2
001B   3A03           03646  xorlw .3
001C   1D03           03647  btfss STATUS,Z
001D   2???           03648  goto hllNAAAA
                      03649  
001E   08??           03650  movfw margp2
001F   3808           03651  iorlw .8
0020   2???           03652  goto hllRAAAA
0021                  03653 hllNAAAA: 
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 96


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0021   3A03           03654  xorlw .3
0022   3A04           03655  xorlw .4
0023   1D03           03656  btfss STATUS,Z
0024   2???           03657  goto hllOAAAA
                      03658  
0025   08??           03659  movfw margp2
0026   3810           03660  iorlw .16
0027   2???           03661  goto hllRAAAA
0028                  03662 hllOAAAA: 
0028   3A04           03663  xorlw .4
0029   3A05           03664  xorlw .5
002A   1D03           03665  btfss STATUS,Z
002B   2???           03666  goto hllPAAAA
                      03667  
002C   08??           03668  movfw margp2
002D   3820           03669  iorlw .32
002E   2???           03670  goto hllRAAAA
002F                  03671 hllPAAAA: 
002F   3A05           03672  xorlw .5
0030   3A06           03673  xorlw .6
0031   1D03           03674  btfss STATUS,Z
0032   2???           03675  goto hllQAAAA
                      03676  
0033   08??           03677  movfw margp2
0034   3840           03678  iorlw .64
0035   2???           03679  goto hllRAAAA
0036                  03680 hllQAAAA: 
                      03681  
0036   08??           03682  movfw margp2
0037   3880           03683  iorlw .128 
0038                  03684 hllRAAAA:  
                      03685  PUSH 
0038   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0039   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
003A   0008           03686  return
                      03687 
                      03688 
                      03689 
                      03690 
                      03691 #undefine margp2
                      03692 
33C4                  03693  end
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 97


SYMBOL TABLE
  LABEL                             VALUE 

ABDEN                             00000000
ABDOVF                            00000007
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000004
ADCS1                             00000005
ADCS2                             00000006
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
ALT_Save                          00000007
ANS0                              00000000
ANS1                              00000001
ANS10                             00000002
ANS11                             00000003
ANS2                              00000002
ANS3                              00000003
ANS4                              00000004
ANS5                              00000005
ANS6                              00000006
ANS7                              00000007
ANS8                              00000000
ANS9                              00000001
ANSEL                             0000011E
ANSELH                            0000011F
BAUDCTL                           0000009B
BF                                00000000
BRG0                              00000000
BRG1                              00000001
BRG10                             00000002
BRG11                             00000003
BRG12                             00000004
BRG13                             00000005
BRG14                             00000006
BRG15                             00000007
BRG16                             00000003
BRG2                              00000002
BRG3                              00000003
BRG4                              00000004
BRG5                              00000005
BRG6                              00000006
BRG7                              00000007
BRG8                              00000000
BRG9                              00000001
BRGH                              00000002
C                                 00000000
C1CH0                             00000000
C1CH1                             00000001
C1IE                              00000005
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 98


SYMBOL TABLE
  LABEL                             VALUE 

C1IF                              00000005
C1OE                              00000005
C1ON                              00000007
C1OUT                             00000006
C1POL                             00000004
C1R                               00000002
C1SEN                             00000005
C1VREN                            00000007
C2CH0                             00000000
C2CH1                             00000001
C2IE                              00000006
C2IF                              00000006
C2OE                              00000005
C2ON                              00000007
C2OUT                             00000006
C2POL                             00000004
C2R                               00000002
C2REN                             00000004
C2SYNC                            00000000
C2VREN                            00000006
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCPR1H                            00000016
CCPR1L                            00000015
CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CKE                               00000006
CKP                               00000004
CM1CON0                           00000119
CM2CON0                           0000011A
CM2CON1                           0000011B
COPY                              
CREN                              00000004
CSRC                              00000007
D                                 00000005
DATA_ADDRESS                      00000005
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DISCARD                           
D_A                               00000005
ECCPAS                            0000001D
ECCPAS0                           00000004
ECCPAS1                           00000005
ECCPAS2                           00000006
ECCPASE                           00000007
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 99


SYMBOL TABLE
  LABEL                             VALUE 

EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDAT                             0000010C
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
F                                 00000001
FAR_CALL                          
FERR                              00000002
FSR                               00000004
FSR_Save                          00000006
GIE                               00000007
GO                                00000001
GO_DONE                           00000001
HALF_FAR_CALL                     
HLFSR                             FSR
HLINDF                            INDF
HLLGUARDhllblss                   
HLOE_STACK2_SIZE                  .20
HLOE_STACK_SIZE                   .80
HLTABLE                           
HTS                               00000002
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IOC                               00000096
IOC0                              00000000
IOC1                              00000001
IOC2                              00000002
IOC3                              00000003
IOC4                              00000004
IOC5                              00000005
IOCA                              00000096
IOCA0                             00000000
IOCA1                             00000001
IOCA2                             00000002
IOCA3                             00000003
IOCA4                             00000004
IOCA5                             00000005
IOCB                              00000116
IOCB4                             00000004
IOCB5                             00000005
IOCB6                             00000006
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 100


SYMBOL TABLE
  LABEL                             VALUE 

IOCB7                             00000007
IRCF0                             00000004
IRCF1                             00000005
IRCF2                             00000006
IRP                               00000007
KDISCARD                          
KPOP                              
KPUSH                             
LSHIFT                            
LTS                               00000001
MC1OUT                            00000007
MC2OUT                            00000006
MSK                               00000093
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BOR                           00000000
NOT_DONE                          00000001
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RABPU                         00000007
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_W                             00000002
NOT_WRITE                         00000002
OERR                              00000001
OPTION_REG                        00000081
OSCCON                            0000008F
OSCTUNE                           00000090
OSFIE                             00000007
OSFIF                             00000007
OSTS                              00000003
P                                 00000004
P1M0                              00000006
P1M1                              00000007
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PC_Save                           00000001
PDC0                              00000000
PDC1                              00000001
PDC2                              00000002
PDC3                              00000003
PDC4                              00000004
PDC5                              00000005
PDC6                              00000006
PEIE                              00000006
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
POP                               
PORTA                             00000005
PORTB                             00000006
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 101


SYMBOL TABLE
  LABEL                             VALUE 

PORTC                             00000007
PR2                               00000092
PREEMPT                           
PRSEN                             00000007
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSSAC0                            00000002
PSSAC1                            00000003
PSSBD0                            00000000
PSSBD1                            00000001
PSTRCON                           0000019D
PULSR                             00000002
PULSS                             00000003
PUSH                              
PWM1CON                           0000001C
R                                 00000002
RABIE                             00000003
RABIF                             00000000
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
READ_WRITE                        00000002
RESUME                            
RP0                               00000005
RP1                               00000006
RSHIFT                            
RX9                               00000006
RX9D                              00000000
R_W                               00000002
S                                 00000003
SBOREN                            00000004
SCKP                              00000004
SCS                               00000000
SENB                              00000003
SMP                               00000007
SPBRG                             00000099
SPBRGH                            0000009A
SPEN                              00000007
SR0                               00000006
SR1                               00000007
SRCON                             0000019E
SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 102


SYMBOL TABLE
  LABEL                             VALUE 

SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPMSK                            00000093
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
STATUS_Save                       00000005
STRA                              00000000
STRB                              00000001
STRC                              00000002
STRD                              00000003
STRSYNC                           00000004
SWDTEN                            00000000
SYNC                              00000004
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1GINV                            00000007
T1GSS                             00000001
T1IE                              00000000
T1IF                              00000000
T1OSCEN                           00000003
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
T2IE                              00000001
T2IF                              00000001
TMR0                              00000001
TMR1CS                            00000001
TMR1GE                            00000006
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 103


SYMBOL TABLE
  LABEL                             VALUE 

TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000086
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRMT                              00000001
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
TUN3                              00000003
TUN4                              00000004
TX9                               00000006
TX9D                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
UA                                00000001
ULPWUE                            00000005
VCFG                              00000006
VP6EN                             00000004
VR0                               00000000
VR1                               00000001
VR2                               00000002
VR3                               00000003
VRCON                             00000118
VRR                               00000005
W                                 00000000
WCOL                              00000007
WDTCON                            00000097
WDTPS0                            00000001
WDTPS1                            00000002
WDTPS2                            00000003
WDTPS3                            00000004
WPU                               00000095
WPUA                              00000095
WPUA0                             00000000
WPUA1                             00000001
WPUA2                             00000002
WPUA4                             00000004
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 104


SYMBOL TABLE
  LABEL                             VALUE 

WPUA5                             00000005
WPUB                              00000115
WPUB4                             00000004
WPUB5                             00000005
WPUB6                             00000006
WPUB7                             00000007
WR                                00000001
WREN                              00000002
WRERR                             00000003
WUE                               00000001
W_Save                            00000004
Z                                 00000002
_BOR_NSLEEP                       00003EFF
_BOR_OFF                          00003CFF
_BOR_ON                           00003FFF
_BOR_SBODEN                       00003DFF
_CPD_OFF                          00003FFF
_CPD_ON                           00003F7F
_CP_OFF                           00003FFF
_CP_ON                            00003FBF
_EC_OSC                           00003FFB
_EXTRC                            00003FFF
_EXTRCIO                          00003FFE
_EXTRC_OSC_CLKOUT                 00003FFF
_EXTRC_OSC_NOCLKOUT               00003FFE
_FCMEN_OFF                        000037FF
_FCMEN_ON                         00003FFF
_HS_OSC                           00003FFA
_IESO_OFF                         00003BFF
_IESO_ON                          00003FFF
_INTOSC                           00003FFD
_INTOSCIO                         00003FFC
_INTRC_OSC_CLKOUT                 00003FFD
_INTRC_OSC_NOCLKOUT               00003FFC
_LP_OSC                           00003FF8
_MCLRE_OFF                        00003FDF
_MCLRE_ON                         00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FEF
_WDT_OFF                          00003FF7
_WDT_ON                           00003FFF
_XT_OSC                           00003FF9
__16F690                          00000001
_a1tsssck_0005                    00000005
_a1tsssck_0012                    00000012
_altstall_0003                    00000003
_altstall_0011                    00000011
_hllkrna00_0009                   00000009
_hllkrna03_0008                   00000008
_hllkrna04_000C                   0000000C
_hllkrna04_000E                   0000000E
_hllkrna05_000C                   0000000C
_hllkrna05_000E                   0000000E
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 105


SYMBOL TABLE
  LABEL                             VALUE 

_hllkrna08_0003                   00000003
_hllkrna08_0011                   00000011
_hllkrna09_0003                   00000003
_hllkrna09_0011                   00000011
_hllkrna10_0003                   00000003
_hllkrna10_0010                   00000010
aart00                            00000000
aart01                            00000001
aart02                            00000002
aartpr00                          00000000
add                               00000000
alt_fsr                           00000003
alt_stack                         00000000
andb                              00000000
clearbit                          00000000
cls                               00000000
copy                              00000000
dispose                           00000000
divu                              00000000
eat                               00000000
eq                                00000000
eqresult                          00000000
getch                             00000000
geth2                             00000002
geu                               00000000
hllAAAAA                          0000000D
hllBAAAA                          00000013
hllCAAAA                          0000001A
hllDAAAA                          00000021
hllEAAAA                          00000028
hllFAAAA                          0000002F
hllGAAAA                          00000036
hllHAAAA                          00000038
hllIAAAA                          0000000C
hllJAAAA                          00000010
hllKAAAA                          0000000D
hllLAAAA                          00000013
hllMAAAA                          0000001A
hllNAAAA                          00000021
hllOAAAA                          00000028
hllPAAAA                          0000002F
hllQAAAA                          00000036
hllRAAAA                          00000038
hllblss00                         00000000
hllblss01                         00000001
hllblss02                         00000002
hlllb51J10                        000000C6
hlllb51J11                        00000122
hlllb51J12                        0000012A
hlllb51J13                        000000E1
hlllb51J14                        00000133
hlllb51J15                        00000134
hlllb51J16                        00000147
MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 106


SYMBOL TABLE
  LABEL                             VALUE 

hlllb51J17                        00000164
hlllb51J18                        00000164
hlllb51J2                         0000001D
hlllb51J21                        00000037
hlllb51J22                        00000042
hlllb51J23                        0000006C
hlllb51J24                        0000006F
hlllb51J26                        00000042
hlllb51J27                        0000004A
hlllb51J3                         0000001D
hlllb51J7                         0000002D
hlllb51J8                         0000002D
hlllb51J9                         000000BE
hllparmcore                       
hllprgen2                         000000FD
hllprogend                        000000C2
hlluserprog                       00000000
hloego                            00000000
in_isr                            00000008
kpop                              00000000
kpush                             00000000
longf                             00000000
makespaces                        00000000
makespacesi                       00000000
modu                              00000000
mul                               00000000
negti                             00000000
orb                               00000000
oru                               00000000
parm                              00000000
pbase                             00000000
printch                           00000000
printchxy                         00000000
printu                            00000000
remove                            00000000
restore                           00000000
setbit                            00000000
softstack0                        00000000
softstack1                        00000001
softstack2                        00000002
stack                             00000000
stringA                           00000000
stringA2                          00000008
wrapstringA                       00000000
wrapstringAi                      00000000
wrapstringAif                     00000000
wrapstringAifin                   00000000
zzorz1                            00000008
zzorz2                            00000011

MPASM  5.35                        TARGET.ASM   7-9-2019  0:00:55         PAGE 107





Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,    16 suppressed

