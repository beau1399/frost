
#include "hloe.inc"

 __config (_INTRC_OSC_NOCLKOUT & _WDT_OFF & _PWRTE_ON & _MCLRE_OFF & _CP_OFF & _BOR_ON & _IESO_OFF & _FCMEN_OFF)




Resetv code 0 
 bcf INTCON,GIE
 pagesel hloego
 goto hloego
 
#ifdef HLLMULTITASK
vectr code 4	 ;Device specific
ISR:


 PREEMPT
#endif
#ifdef HLLMULTITASK
ExitISR:    

  RESUME
  
  
  retfie
#endif

mainvars udata_shr	
#ifdef HLLMULTITASK
pbase res .1			; Used for functions w/ numbered pass/return, to clean up parms/push args
pbaseisr res .1	
#else
pbase res .1
#endif

PC_Save res .1

main code
hloego:

 
  clrf in_isr
 
  movlw stack-1		;Set up stack starting position based on literals det. by incremental linker
  movwf FSR 
  movlw alt_stack-1
  movwf alt_fsr 
  
  
  clrf softstack0
 
 bankisel stack
 pagesel hlluserprog
 goto hlluserprog
hllupuser CODE
hlluserprog: 
 

 movlw .112

   FAR_CALL hlluserprog , safepush

   banksel OSCCON
   movfw OSCCON
   
   

   FAR_CALL hlluserprog , safepush


 FAR_CALL hlluserprog,oru

 POP
 banksel OSCCON
 movwf OSCCON
 


 movlw .17

   FAR_CALL hlluserprog , safepush

 POP
 banksel SPBRG
 movwf SPBRG
 


 movlw .0

   FAR_CALL hlluserprog , safepush

 POP
 banksel SPBRGH
 movwf SPBRGH
 


 movlw SYNC


   FAR_CALL hlluserprog , safepush

   banksel TXSTA
   movfw TXSTA
   
   

   FAR_CALL hlluserprog , safepush


 FAR_CALL hlluserprog,clearbit

 POP
 banksel TXSTA
 movwf TXSTA
 


 movlw CREN


   FAR_CALL hlluserprog , safepush

   banksel RCSTA
   movfw RCSTA
   
   

   FAR_CALL hlluserprog , safepush


 FAR_CALL hlluserprog,clearbit

 POP
 banksel RCSTA
 movwf RCSTA
 


 movlw CREN


   FAR_CALL hlluserprog , safepush

   banksel RCSTA
   movfw RCSTA
   
   

   FAR_CALL hlluserprog , safepush


 FAR_CALL hlluserprog,setbit

 POP
 banksel RCSTA
 movwf RCSTA
 


 movlw SPEN


   FAR_CALL hlluserprog , safepush

   banksel RCSTA
   movfw RCSTA
   
   

   FAR_CALL hlluserprog , safepush


 FAR_CALL hlluserprog,setbit

 POP
 banksel RCSTA
 movwf RCSTA
 


 movlw TXEN


   FAR_CALL hlluserprog , safepush


 movlw TX9


   FAR_CALL hlluserprog , safepush


 movlw BRGH


   FAR_CALL hlluserprog , safepush

   banksel TXSTA
   movfw TXSTA
   
   

   FAR_CALL hlluserprog , safepush


 FAR_CALL hlluserprog,setbit


 FAR_CALL hlluserprog,clearbit


 FAR_CALL hlluserprog,setbit

 POP
 banksel TXSTA
 movwf TXSTA
 


 movlw BRG16


   FAR_CALL hlluserprog , safepush


 movlw SCKP


   FAR_CALL hlluserprog , safepush

   banksel BAUDCTL
   movfw BAUDCTL
   
   

   FAR_CALL hlluserprog , safepush


 FAR_CALL hlluserprog,setbit


 FAR_CALL hlluserprog,setbit

 POP
 banksel BAUDCTL
 movwf BAUDCTL
 


 movlw .0

   FAR_CALL hlluserprog , safepush

 POP
 banksel ANSELH
 movwf ANSELH
 


 movlw .0

   FAR_CALL hlluserprog , safepush

 POP
 banksel ANSEL
 movwf ANSEL
 


 movlw RCIE


   FAR_CALL hlluserprog , safepush


 movlw TXIE


   FAR_CALL hlluserprog , safepush

   banksel PIE1
   movfw PIE1
   
   

   FAR_CALL hlluserprog , safepush


 FAR_CALL hlluserprog,clearbit


 FAR_CALL hlluserprog,clearbit

 POP
 banksel PIE1
 movwf PIE1
 


 movlw .4

   FAR_CALL hlluserprog , safepush


 movlw .3

   FAR_CALL hlluserprog , safepush


 FAR_CALL hlluserprog,subtr


 FAR_CALL hlluserprog,printu

    
hllprogend:
 goto hllprogend
 

hllt450 CODE
subtr:
 movf FSR,w
 

 FAR_CALL subtr , kpush


 movlw .1

   FAR_CALL subtr , safepush


 FAR_CALL subtr,parm


 movlw .0

   FAR_CALL subtr , safepush


 FAR_CALL subtr,parm


 FAR_CALL subtr,negti


 FAR_CALL subtr,add


 FAR_CALL subtr,kpop
 
#ifdef HLLMULTITASK 
 movf in_isr,f ;In shared RAM, no need for BANKSEL
 btfsc STATUS,Z
 goto $+3
 movwf pbase+1 ;in_isr... the "in isr" clause comes first in all of these macros. This
 goto $+2      ; is because isr execution is preemptive, and returns only at the 
 movwf pbase   ; completion of all triggered routines. So, it can starve out the main
#else          ; thread, and speeding up isr execution helps this problem. In most of
 movwf pbase   ; these macros, in-isr execution takes just 4 instruction cycles.
#endif 


 POP
 FAR_CALL subtr , kpush
 
#ifdef HLLMULTITASK 
 movf in_isr,f ;In shared RAM, no need for BANKSEL
 btfsc STATUS,Z
 goto $+3
 movf pbase+1,w			;in_isr
 goto $+2
 movf pbase,w	;not in_isr
#else
 movf pbase,w	
#endif  

 
;LOAD POINTER
 movwf FSR
 

 DISCARD


 DISCARD


 FAR_CALL subtr , kpop


 FAR_CALL subtr , safepush
 

 return
 