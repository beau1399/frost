MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 
                      00002 #include "hloe.inc"
                      00001 
                      00002 
                      00003 #define HLLGUARDhllblss
                      00004 
                      00005 
                      00006 #define HLOE_STACK_SIZE .80
                      00007 #define HLOE_STACK2_SIZE .20
                      00008 
                      00009 
                      00010 #include <p16f690.inc>
                      00001         LIST
                      00002 ; P16F690.INC  Standard Header File, Version 1.00    Microchip Technology, Inc.
                      00607         LIST
                      00011 #include "../frostcompiler/kernel.inc"
                      00001 PUSH macro ;Push to the main stack for the programmer's parms and dyn. data;
                      00002  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
                      00003  movwf INDF ; code of any sort will not overwrite the data. 
                      00004  endm 
                      00005  
                      00006 POP macro ;Pop from main stack; "decf" is the de-allocator and thus happens last to 
                      00007  movfw INDF ; preserve the safety of this code under interruptible conditions. 
                      00008  decf FSR,f 
                      00009  endm
                      00010  
                      00011 DISCARD macro ;Remove items from the main stack and throw them away w/o affecting W
                      00012  decf FSR,f 
                      00013  endm
                      00014  
                      00015 KDISCARD macro ;Remove items from stack 2 and throw them away w/o affecting W
                      00016  decf alt_fsr,f 
                      00017  endm
                      00018 
                      00019 COPY macro ;Duplicate stack top
                      00020  movfw INDF
                      00021  incf FSR,f 
                      00022  movwf INDF 
                      00023  endm
                      00024 
                      00025 #define HLFSR FSR
                      00026  
                      00027 #define HLINDF INDF
                      00028 
                      00029   
                      00030 FAR_CALL macro caller_os,func_os ;Call destination residing within a different code page
                      00031  pagesel func_os
                      00032  call func_os
                      00033  pagesel caller_os ;This one restores the caller's code page
                      00034  endm
                      00035 
                      00036 ;Call destination residing within a different code page... does not restore the caller's
                      00037 ; code page after return, which may be OK (e.g. if the next operation is another 'Far'
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00038 ; function call). 
                      00039 HALF_FAR_CALL macro func_os 
                      00040  pagesel func_os        
                      00041  call func_os
                      00042  endm
                      00043  
                      00044 KPOP macro
                      00045  bankisel alt_stack ;This is OK for interrupts... part of STATUS 
                      00046  movf in_isr,f ;In shared RAM, no need for BANKSEL
                      00047  btfsc STATUS,Z
                      00048  goto $+0F
                      00049  movfw FSR 
                      00050  movwf softstack0+1 ;Save user stack ptr 
                      00051  movfw alt_fsr ;Get second stack ptr 
                      00052  movwf FSR 
                      00053  movfw INDF ;Dereference it 
                      00054  decf FSR,f ;Decrement it 
                      00055  movwf softstack1+1  ;Save popped value for ret urn 
                      00056  movfw FSR ;Save second stack ptr 
                      00057  movwf alt_fsr 
                      00058  movfw softstack0+1  ;Restore user stack ptr 
                      00059  movwf FSR 
                      00060  clrf softstack0+1
                      00061  movfw softstack1+1  ;Bring back popped value for ret urn 
                      00062  goto $+0E
                      00063  movfw FSR 
                      00064  movwf softstack0 ;Save user stack ptr 
                      00065  movfw alt_fsr ;Get second stack ptr 
                      00066  movwf FSR 
                      00067  movfw INDF ;Dereference it 
                      00068  decf FSR,f ;Decrement it 
                      00069  movwf softstack1  ;Save popped value for ret urn 
                      00070  movfw FSR ;Save second stack ptr 
                      00071  movwf alt_fsr 
                      00072  movfw softstack0  ;Restore user stack ptr 
                      00073  movwf FSR 
                      00074  clrf softstack0
                      00075  movfw softstack1  ;Bring back popped value for ret urn 
                      00076  bankisel stack
                      00077  endm 
                      00078 
                      00079 KPUSH macro
                      00080  bankisel alt_stack ;This is OK for interrupts... part of STATUS 
                      00081  movf in_isr,f ;In shared RAM, no need for BANKSEL
                      00082  btfsc STATUS,Z
                      00083  goto $+0E
                      00084  movwf softstack1+1 ;softstack1 holds parm value being pushed
                      00085  movfw FSR  
                      00086  movwf softstack0+1  ;softstack0 holds FSR
                      00087  movfw alt_fsr 
                      00088  movwf FSR 
                      00089  movfw softstack1+1
                      00090  incf alt_fsr,f 
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00091  incf FSR,f ;The actual kernel push... preincrement for interrupt safety
                      00092  movwf INDF 
                      00093  movfw softstack0+1
                      00094  movwf FSR 
                      00095  clrf softstack0+1 
                      00096  goto $+0D
                      00097  movwf softstack1 ;softstack1 holds parm value being pushed
                      00098  movfw FSR  
                      00099  movwf softstack0  ;softstack0 holds FSR
                      00100  movfw alt_fsr 
                      00101  movwf FSR 
                      00102  movfw softstack1
                      00103  incf alt_fsr,f 
                      00104  incf FSR,f ;The actual kernel push... preincrement for interrupt safety
                      00105  movwf INDF 
                      00106  movfw softstack0
                      00107  movwf FSR 
                      00108  clrf softstack0
                      00109  bankisel stack
                      00110  endm
                      00111  
                      00112 ;These are simple shifts, similar to << or >> in C, not rotates. Newer PICs include
                      00113 ; a native shift instruction that shifts in zeroes like << and >>. Older devices 
                      00114 ; can only rotate bits through the C register, requiring an extra instruction to
                      00115 ; clear C in cases where a simple shift is needed.
                      00116 LSHIFT macro file_reg
                      00117  bcf STATUS,C    ;RLF is a bit shift operation that's present on both the 16F690 (for example) and the 1
                            6F1827.
                      00118  rlf file_reg,f  ; It's a rotate, pulling from C for the necessary bottom-order bit       
                      00119  endm 
                      00120 
                      00121 RSHIFT macro file_reg
                      00122  bcf STATUS,C    ;RRF is a bit shift operation that's present on both the 16F690 (for example) and the 1
                            6F1827.
                      00123  rrf file_reg,f  ; It's a rotate, pulling from C for the necessary bottom-order bit       
                      00124  endm 
                      00125  
                      00126 PREEMPT macro
                      00127 #ifdef HLLMULTITASK 
                      00128  movwf W_Save ; save context- save W in "W_save" file reg.
                      00129  ;From datasheet... save STATUS properly
                      00130  swapf STATUS,W 
                      00131  movwf STATUS_Save 
                      00132  movf FSR,w 
                      00133  movwf FSR_Save 
                      00134  movf PCLATH,w ; save status in "STATUS_Save" file reg.
                      00135  movwf PC_Save 
                      00136  movf alt_fsr,w 
                      00137  movwf ALT_Save
                      00138  incf in_isr,f
                      00139  pagesel ISR
                      00140  bankisel stack 
                      00141  movf FSR,w           ;Restore "softstack" if main thread was using 2nd stack
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00142  movf softstack0,f        ; (coded to preserve constant interrupt latency)
                      00143  btfss STATUS,Z       
                      00144  movf softstack0,w  
                      00145  movwf FSR          
                      00146 #endif 
                      00147  endm
                      00148  
                      00149 RESUME macro
                      00150  
                      00151 #ifdef HLLMULTITASK 
                      00152  clrf in_isr
                      00153  movf ALT_Save,w
                      00154  movwf alt_fsr 
                      00155  movf PC_Save,w ; restore context (W and STATUS)
                      00156  movwf PCLATH
                      00157  movf FSR_Save,w 
                      00158  movwf FSR
                      00159  ;Per the datasheet...
                      00160  swapf STATUS_Save,W
                      00161  movwf STATUS ;Move W into Status reg
                      00162  swapf W_Save,F ;Swap W_TEMP
                      00163  swapf W_Save,W ;Swap W_TEMP into W
                      00164 #endif
                      00165 
                      00166  endm
                      00167  
                      00168 ; Table macro.. this followed by any series of RETLW calls
                      00169 ; transforms said call list into a function that takes an offset
                      00170 ; and returns that entry in the table (takes 1 byte, returns 1
                      00171 ; byte... this goes atop the HLL feature which allows generation 
                      00172 ; of tables. It can also go atop RETLW tables entered into assembly 
                      00173 ; files in a very basic fashion when doing assembly programming. In 
                      00174 ; either case, the overall result can be called exactly as if it were any 
                      00175 ; other HLOE function
                      00176 HLTABLE macro mmnme
                      00177 mmnme:
                      00178  movlw high mmnme#v(2) ; Necess. b/c writes to PCL take 5 bits fr. PCLATH
                      00179  movwf PCLATH ; and PAGESEL doesn't take care of all 5
                      00180  movlw low mmnme#v(2) ; Perform pointer arithmetic
                      00181  addwf INDF,w 
                      00182  decf FSR,f
                      00183  btfsc STATUS,C ; Necess. b/c writes to PCL take 5 bits fr. PCLATH
                      00184  incf PCLATH,f 
                      00185  movwf PCL 
                      00186 mmnme#v(2): 
                      00187  ;retlw K, retlw K, etc. go here
                      00188  endm
                      00189 
                      00190 READEEPROM macro
                      00191  POP
                      00192  banksel EEADR
                      00193  movwf EEADR
                      00194  banksel EECON1
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00195  bcf EECON1, EEPGD
                      00196  bsf EECON1, RD
                      00197  banksel EEDAT
                      00198  movf EEDAT, W
                      00199  PUSH
                      00200 endm
                      00201 
                      00202 WRITEEEPROM macro
                      00203  POP
                      00204  banksel EEDAT
                      00205  movwf  EEDAT
                      00206  POP
                      00207  banksel EEADR 
                      00208  movwf  EEADR
                      00209  banksel EECON1
                      00210  bcf EECON1, EEPGD
                      00211  bsf EECON1, WREN
                      00212  bcf  INTCON, GIE
                      00213  btfsc INTCON, GIE
                      00214  goto $-2
                      00215  movlw  55h
                      00216  movwf  EECON2
                      00217  movlw  0AAh
                      00218  movwf  EECON2
                      00219  bsf    EECON1, WR
                      00220  bsf    INTCON, GIE
                      00221  bcf    EECON1, WREN
                      00222 endm
2007   33C4           00003  __config (_INTRC_OSC_NOCLKOUT & _WDT_OFF & _PWRTE_ON & _MCLRE_OFF & _CP_OFF & _BOR_ON & _IESO_OFF & _FC
                            MEN_OFF)
                      00004 Resetv code 0
0000   138B           00005  bcf INTCON,GIE
0001   ????           00006  pagesel hloego
0002   2???           00007  goto hloego
                      00008 #ifdef HLLMULTITASK
                      00009 vectr code 4 ;Device specific
                      00010 ISR:
                      00011  PREEMPT
                      00012 #endif
                      00013 #ifdef HLLMULTITASK
                      00014 ExitISR:
                      00015  RESUME
                      00016  retfie
                      00017 #endif
                      00018 mainvars udata_shr
                      00019 #ifdef HLLMULTITASK
                      00020 pbase res .1 ; Used for functions w/ numbered pass/return,to clean up parms/push args
                      00021 pbaseisr res .1
                      00022 #else
0000                  00023 pbase res .1
                      00024 #endif
0001                  00025 PC_Save res .1
                      00026 main code
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000                  00027 hloego:
0000   01??           00028  clrf in_isr
0001   30??           00029  movlw stack-1 ;Set up stack starting position based on literals det. by incremental linker
0002   0084           00030  movwf FSR
0003   30??           00031  movlw alt_stack-1
0004   00??           00032  movwf alt_fsr
0005   01??           00033  clrf softstack0
0006   ????           00034  bankisel stack
0007   ????           00035  pagesel hlluserprog
0008   2???           00036  goto hlluserprog
                      00037 hllupuser CODE
0000                  00038 hlluserprog:
0000   3070           00039  movlw .112
                      00040  FAR_CALL hlluserprog,safepush
0001   ????               M  pagesel safepush
0002   2???               M  call safepush
0003   ????               M  pagesel hlluserprog ;This one restores the caller's code page
0004   1683 1303      00041  banksel OSCCON
0006   080F           00042  movfw OSCCON
                      00043  HALF_FAR_CALL safepush
0007   ????               M  pagesel safepush       
0008   2???               M  call safepush
                      00044  FAR_CALL hlluserprog,oru
0009   ????               M  pagesel oru
000A   2???               M  call oru
000B   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00045  POP
000C   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
000D   0384               M  decf FSR,f 
000E   1683 1303      00046  banksel OSCCON
0010   008F           00047  movwf OSCCON
0011   30CF           00048  movlw .207
                      00049  FAR_CALL hlluserprog,safepush
0012   ????               M  pagesel safepush
0013   2???               M  call safepush
0014   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00050  POP
0015   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0016   0384               M  decf FSR,f 
0017   1683 1303      00051  banksel SPBRG
0019   0099           00052  movwf SPBRG
001A   3000           00053  movlw .0
                      00054  FAR_CALL hlluserprog,safepush
001B   ????               M  pagesel safepush
001C   2???               M  call safepush
001D   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00055  POP
001E   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
001F   0384               M  decf FSR,f 
0020   1683 1303      00056  banksel SPBRGH
0022   009A           00057  movwf SPBRGH
0023   3004           00058  movlw SYNC
                      00059  FAR_CALL hlluserprog,safepush
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0024   ????               M  pagesel safepush
0025   2???               M  call safepush
0026   ????               M  pagesel hlluserprog ;This one restores the caller's code page
0027   1683 1303      00060  banksel TXSTA
0029   0818           00061  movfw TXSTA
                      00062  HALF_FAR_CALL safepush
002A   ????               M  pagesel safepush       
002B   2???               M  call safepush
                      00063  FAR_CALL hlluserprog,clearbit
002C   ????               M  pagesel clearbit
002D   2???               M  call clearbit
002E   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00064  POP
002F   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0030   0384               M  decf FSR,f 
0031   1683 1303      00065  banksel TXSTA
0033   0098           00066  movwf TXSTA
0034   3004           00067  movlw CREN
                      00068  FAR_CALL hlluserprog,safepush
0035   ????               M  pagesel safepush
0036   2???               M  call safepush
0037   ????               M  pagesel hlluserprog ;This one restores the caller's code page
0038   1283 1303      00069  banksel RCSTA
003A   0818           00070  movfw RCSTA
                      00071  HALF_FAR_CALL safepush
003B   ????               M  pagesel safepush       
003C   2???               M  call safepush
                      00072  FAR_CALL hlluserprog,clearbit
003D   ????               M  pagesel clearbit
003E   2???               M  call clearbit
003F   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00073  POP
0040   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0041   0384               M  decf FSR,f 
0042   1283 1303      00074  banksel RCSTA
0044   0098           00075  movwf RCSTA
0045   3004           00076  movlw CREN
                      00077  FAR_CALL hlluserprog,safepush
0046   ????               M  pagesel safepush
0047   2???               M  call safepush
0048   ????               M  pagesel hlluserprog ;This one restores the caller's code page
0049   1283 1303      00078  banksel RCSTA
004B   0818           00079  movfw RCSTA
                      00080  HALF_FAR_CALL safepush
004C   ????               M  pagesel safepush       
004D   2???               M  call safepush
                      00081  FAR_CALL hlluserprog,setbit
004E   ????               M  pagesel setbit
004F   2???               M  call setbit
0050   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00082  POP
0051   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0052   0384               M  decf FSR,f 
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0053   1283 1303      00083  banksel RCSTA
0055   0098           00084  movwf RCSTA
0056   3007           00085  movlw SPEN
                      00086  FAR_CALL hlluserprog,safepush
0057   ????               M  pagesel safepush
0058   2???               M  call safepush
0059   ????               M  pagesel hlluserprog ;This one restores the caller's code page
005A   1283 1303      00087  banksel RCSTA
005C   0818           00088  movfw RCSTA
                      00089  HALF_FAR_CALL safepush
005D   ????               M  pagesel safepush       
005E   2???               M  call safepush
                      00090  FAR_CALL hlluserprog,setbit
005F   ????               M  pagesel setbit
0060   2???               M  call setbit
0061   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00091  POP
0062   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0063   0384               M  decf FSR,f 
0064   1283 1303      00092  banksel RCSTA
0066   0098           00093  movwf RCSTA
0067   3005           00094  movlw TXEN
                      00095  FAR_CALL hlluserprog,safepush
0068   ????               M  pagesel safepush
0069   2???               M  call safepush
006A   ????               M  pagesel hlluserprog ;This one restores the caller's code page
006B   3006           00096  movlw TX9
                      00097  FAR_CALL hlluserprog,safepush
006C   ????               M  pagesel safepush
006D   2???               M  call safepush
006E   ????               M  pagesel hlluserprog ;This one restores the caller's code page
006F   3002           00098  movlw BRGH
                      00099  FAR_CALL hlluserprog,safepush
0070   ????               M  pagesel safepush
0071   2???               M  call safepush
0072   ????               M  pagesel hlluserprog ;This one restores the caller's code page
0073   1683 1303      00100  banksel TXSTA
0075   0818           00101  movfw TXSTA
                      00102  HALF_FAR_CALL safepush
0076   ????               M  pagesel safepush       
0077   2???               M  call safepush
                      00103  HALF_FAR_CALL setbit
0078   ????               M  pagesel setbit         
0079   2???               M  call setbit
                      00104  HALF_FAR_CALL clearbit
007A   ????               M  pagesel clearbit       
007B   2???               M  call clearbit
                      00105  FAR_CALL hlluserprog,setbit
007C   ????               M  pagesel setbit
007D   2???               M  call setbit
007E   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00106  POP
007F   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0080   0384               M  decf FSR,f 
0081   1683 1303      00107  banksel TXSTA
0083   0098           00108  movwf TXSTA
0084   3003           00109  movlw BRG16
                      00110  FAR_CALL hlluserprog,safepush
0085   ????               M  pagesel safepush
0086   2???               M  call safepush
0087   ????               M  pagesel hlluserprog ;This one restores the caller's code page
0088   3004           00111  movlw SCKP
                      00112  FAR_CALL hlluserprog,safepush
0089   ????               M  pagesel safepush
008A   2???               M  call safepush
008B   ????               M  pagesel hlluserprog ;This one restores the caller's code page
008C   1683 1303      00113  banksel BAUDCTL
008E   081B           00114  movfw BAUDCTL
                      00115  HALF_FAR_CALL safepush
008F   ????               M  pagesel safepush       
0090   2???               M  call safepush
                      00116  HALF_FAR_CALL setbit
0091   ????               M  pagesel setbit         
0092   2???               M  call setbit
                      00117  FAR_CALL hlluserprog,setbit
0093   ????               M  pagesel setbit
0094   2???               M  call setbit
0095   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00118  POP
0096   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0097   0384               M  decf FSR,f 
0098   1683 1303      00119  banksel BAUDCTL
009A   009B           00120  movwf BAUDCTL
009B   3000           00121  movlw .0
                      00122  FAR_CALL hlluserprog,safepush
009C   ????               M  pagesel safepush
009D   2???               M  call safepush
009E   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00123  POP
009F   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
00A0   0384               M  decf FSR,f 
00A1   1283 1703      00124  banksel ANSELH
00A3   009F           00125  movwf ANSELH
00A4   3000           00126  movlw .0
                      00127  FAR_CALL hlluserprog,safepush
00A5   ????               M  pagesel safepush
00A6   2???               M  call safepush
00A7   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00128  POP
00A8   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
00A9   0384               M  decf FSR,f 
00AA   1283 1703      00129  banksel ANSEL
00AC   009E           00130  movwf ANSEL
00AD   3005           00131  movlw RCIE
                      00132  FAR_CALL hlluserprog,safepush
00AE   ????               M  pagesel safepush
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00AF   2???               M  call safepush
00B0   ????               M  pagesel hlluserprog ;This one restores the caller's code page
00B1   3004           00133  movlw TXIE
                      00134  FAR_CALL hlluserprog,safepush
00B2   ????               M  pagesel safepush
00B3   2???               M  call safepush
00B4   ????               M  pagesel hlluserprog ;This one restores the caller's code page
00B5   1683 1303      00135  banksel PIE1
00B7   080C           00136  movfw PIE1
                      00137  HALF_FAR_CALL safepush
00B8   ????               M  pagesel safepush       
00B9   2???               M  call safepush
                      00138  HALF_FAR_CALL clearbit
00BA   ????               M  pagesel clearbit       
00BB   2???               M  call clearbit
                      00139  FAR_CALL hlluserprog,clearbit
00BC   ????               M  pagesel clearbit
00BD   2???               M  call clearbit
00BE   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00140  POP
00BF   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
00C0   0384               M  decf FSR,f 
00C1   1683 1303      00141  banksel PIE1
00C3   008C           00142  movwf PIE1
00C4   3004           00143  movlw SCKP
                      00144  FAR_CALL hlluserprog,safepush
00C5   ????               M  pagesel safepush
00C6   2???               M  call safepush
00C7   ????               M  pagesel hlluserprog ;This one restores the caller's code page
00C8   1683 1303      00145  banksel BAUDCTL
00CA   081B           00146  movfw BAUDCTL
                      00147  HALF_FAR_CALL safepush
00CB   ????               M  pagesel safepush       
00CC   2???               M  call safepush
                      00148  FAR_CALL hlluserprog,clearbit
00CD   ????               M  pagesel clearbit
00CE   2???               M  call clearbit
00CF   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00149  POP
00D0   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
00D1   0384               M  decf FSR,f 
00D2   1683 1303      00150  banksel BAUDCTL
00D4   009B           00151  movwf BAUDCTL
                      00152  ; char 'O'
00D5   304F           00153  movlw .79
                      00154  HALF_FAR_CALL safepush
00D6   ????               M  pagesel safepush       
00D7   2???               M  call safepush
                      00155  FAR_CALL hlluserprog,printch
00D8   ????               M  pagesel printch
00D9   2???               M  call printch
00DA   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00156  ; char 'K'
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00DB   304B           00157  movlw .75
                      00158  HALF_FAR_CALL safepush
00DC   ????               M  pagesel safepush       
00DD   2???               M  call safepush
                      00159  FAR_CALL hlluserprog,printch
00DE   ????               M  pagesel printch
00DF   2???               M  call printch
00E0   ????               M  pagesel hlluserprog ;This one restores the caller's code page
00E1   302C           00160  movlw .44
                      00161  FAR_CALL hlluserprog,safepush
00E2   ????               M  pagesel safepush
00E3   2???               M  call safepush
00E4   ????               M  pagesel hlluserprog ;This one restores the caller's code page
00E5   30DE           00162  movlw .222
                      00163  HALF_FAR_CALL safepush
00E6   ????               M  pagesel safepush       
00E7   2???               M  call safepush
                      00164  FAR_CALL hlluserprog,writeeeprom
00E8   ????               M  pagesel writeeeprom
00E9   2???               M  call writeeeprom
00EA   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00165  ; char 'W'
00EB   3057           00166  movlw .87
                      00167  HALF_FAR_CALL safepush
00EC   ????               M  pagesel safepush       
00ED   2???               M  call safepush
                      00168  FAR_CALL hlluserprog,printch
00EE   ????               M  pagesel printch
00EF   2???               M  call printch
00F0   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00169  ; char 'R'
00F1   3052           00170  movlw .82
                      00171  HALF_FAR_CALL safepush
00F2   ????               M  pagesel safepush       
00F3   2???               M  call safepush
                      00172  FAR_CALL hlluserprog,printch
00F4   ????               M  pagesel printch
00F5   2???               M  call printch
00F6   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00173  ; char 'O'
00F7   304F           00174  movlw .79
                      00175  HALF_FAR_CALL safepush
00F8   ????               M  pagesel safepush       
00F9   2???               M  call safepush
                      00176  FAR_CALL hlluserprog,printch
00FA   ????               M  pagesel printch
00FB   2???               M  call printch
00FC   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00177  ; char 'T'
00FD   3054           00178  movlw .84
                      00179  HALF_FAR_CALL safepush
00FE   ????               M  pagesel safepush       
00FF   2???               M  call safepush
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00180  FAR_CALL hlluserprog,printch
0100   ????               M  pagesel printch
0101   2???               M  call printch
0102   ????               M  pagesel hlluserprog ;This one restores the caller's code page
                      00181  ; char 'E'
0103   3045           00182  movlw .69
                      00183  HALF_FAR_CALL safepush
0104   ????               M  pagesel safepush       
0105   2???               M  call safepush
                      00184  FAR_CALL hlluserprog,printch
0106   ????               M  pagesel printch
0107   2???               M  call printch
0108   ????               M  pagesel hlluserprog ;This one restores the caller's code page
0109   300D           00185  movlw .13
                      00186  HALF_FAR_CALL safepush
010A   ????               M  pagesel safepush       
010B   2???               M  call safepush
                      00187  FAR_CALL hlluserprog,printch
010C   ????               M  pagesel printch
010D   2???               M  call printch
010E   ????               M  pagesel hlluserprog ;This one restores the caller's code page
010F   300A           00188  movlw .10
                      00189  HALF_FAR_CALL safepush
0110   ????               M  pagesel safepush       
0111   2???               M  call safepush
                      00190  HALF_FAR_CALL printch
0112   ????               M  pagesel printch        
0113   2???               M  call printch
                      00191  FAR_CALL hlluserprog,readit
0114   ????               M  pagesel readit
0115   2???               M  call readit
0116   ????               M  pagesel hlluserprog ;This one restores the caller's code page
0117                  00192 hllprogend:
0117   2???           00193  goto hllprogend
                      00194 hllt450 CODE
0000                  00195 readit:
0000   302C           00196  movlw .44
                      00197  HALF_FAR_CALL safepush
0001   ????               M  pagesel safepush       
0002   2???               M  call safepush
                      00198  HALF_FAR_CALL readeeprom
0003   ????               M  pagesel readeeprom     
0004   2???               M  call readeeprom
                      00199  FAR_CALL readit,printu
0005   ????               M  pagesel printu
0006   2???               M  call printu
0007   ????               M  pagesel readit    ;This one restores the caller's code page
0008   300D           00200  movlw .13
                      00201  HALF_FAR_CALL safepush
0009   ????               M  pagesel safepush       
000A   2???               M  call safepush
                      00202  FAR_CALL readit,printch
000B   ????               M  pagesel printch
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000C   2???               M  call printch
000D   ????               M  pagesel readit    ;This one restores the caller's code page
000E   300A           00203  movlw .10
                      00204  HALF_FAR_CALL safepush
000F   ????               M  pagesel safepush       
0010   2???               M  call safepush
                      00205  FAR_CALL readit,printch
0011   ????               M  pagesel printch
0012   2???               M  call printch
0013   ????               M  pagesel readit    ;This one restores the caller's code page
                      00206  ;
0014   2???           00207  goto readit
0015                  00208 hllprgen2:
0015   2???           00209  goto hllprgen2
                      00210 ansiadt udata
0000                  00211 aart00 RES .1
                      00212 #ifdef HLLMULTITASK
                      00213 #ifdef HLLGUARDaart
                      00214 aart00isr RES .1
                      00215 #endif
                      00216 #endif
0001                  00217 aart01 RES .1
                      00218 #ifdef HLLMULTITASK
                      00219 #ifdef HLLGUARDaart
                      00220 aart01isr RES .1
                      00221 #endif
                      00222 #endif
0002                  00223 aart02 RES .1
                      00224 #ifdef HLLMULTITASK
                      00225 #ifdef HLLGUARDaart
                      00226 aart02isr RES .1
                      00227 #endif
                      00228 #endif
                      00229 ansiara CODE
                      00230 ansiadu udata
0000                  00231 aartpr00 RES .1
                      00232 #ifdef HLLMULTITASK
                      00233 #ifdef HLLGUARDaartpr
                      00234 aart00prisr RES .1
                      00235 #endif
                      00236 #endif
                      00237 cprntuc CODE
                      00238 #define margpi aartpr00
0000                  00239 printu:
                      00240 #ifdef HLLMULTITASK
                      00241 #ifdef HLLGUARDaartpr
                      00242  movf in_isr,f
                      00243  btfsc STATUS,Z
                      00244  goto printu0
                      00245  POP
                      00246  banksel margpi
                      00247  movwf margpi
                      00248  PUSH
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00249  movlw .100
                      00250  PUSH
                      00251  FAR_CALL printu,divu
                      00252  POP
                      00253  addlw '0'
                      00254  PUSH
                      00255  FAR_CALL printu,printch
                      00256  banksel margpi
                      00257  movfw margpi
                      00258  PUSH
                      00259  movlw .100
                      00260  PUSH
                      00261  FAR_CALL printu,modu
                      00262  movlw .10
                      00263  PUSH
                      00264  FAR_CALL printu,divu
                      00265  POP
                      00266  addlw '0'
                      00267  PUSH
                      00268  FAR_CALL printu,printch
                      00269  banksel margpi
                      00270  movfw margpi
                      00271  PUSH
                      00272  movlw .10
                      00273  PUSH
                      00274  FAR_CALL printu,modu
                      00275  POP
                      00276  addlw '0'
                      00277  PUSH
                      00278  FAR_CALL printu,printch
                      00279  return
                      00280 #undefine margpi
                      00281 #define margpi aartpr00+1
                      00282 printu0:
                      00283 #endif
                      00284 #endif
                      00285  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   ???? ????      00286  banksel margpi
0004   00??           00287  movwf margpi
                      00288  PUSH
0005   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0006   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0007   3064           00289  movlw .100
                      00290  PUSH
0008   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0009   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00291  FAR_CALL printu,divu
000A   ????               M  pagesel divu
000B   2???               M  call divu
000C   ????               M  pagesel printu    ;This one restores the caller's code page
                      00292  POP
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000D   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
000E   0384               M  decf FSR,f 
000F   3E30           00293  addlw '0'
                      00294  PUSH
0010   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0011   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00295  FAR_CALL printu,printch
0012   ????               M  pagesel printch
0013   2???               M  call printch
0014   ????               M  pagesel printu    ;This one restores the caller's code page
0015   ???? ????      00296  banksel margpi
0017   08??           00297  movfw margpi
                      00298  PUSH
0018   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0019   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
001A   3064           00299  movlw .100
                      00300  PUSH
001B   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
001C   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00301  FAR_CALL printu,modu
001D   ????               M  pagesel modu
001E   2???               M  call modu
001F   ????               M  pagesel printu    ;This one restores the caller's code page
0020   300A           00302  movlw .10
                      00303  PUSH
0021   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0022   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00304  FAR_CALL printu,divu
0023   ????               M  pagesel divu
0024   2???               M  call divu
0025   ????               M  pagesel printu    ;This one restores the caller's code page
                      00305  POP
0026   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0027   0384               M  decf FSR,f 
0028   3E30           00306  addlw '0'
                      00307  PUSH
0029   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
002A   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00308  FAR_CALL printu,printch
002B   ????               M  pagesel printch
002C   2???               M  call printch
002D   ????               M  pagesel printu    ;This one restores the caller's code page
002E   ???? ????      00309  banksel margpi
0030   08??           00310  movfw margpi
                      00311  PUSH
0031   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0032   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0033   300A           00312  movlw .10
                      00313  PUSH
0034   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0035   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00314  FAR_CALL printu,modu
0036   ????               M  pagesel modu
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0037   2???               M  call modu
0038   ????               M  pagesel printu    ;This one restores the caller's code page
                      00315  POP
0039   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
003A   0384               M  decf FSR,f 
003B   3E30           00316  addlw '0'
                      00317  PUSH
003C   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
003D   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00318  FAR_CALL printu,printch
003E   ????               M  pagesel printch
003F   2???               M  call printch
0040   ????               M  pagesel printu    ;This one restores the caller's code page
0041   0008           00319  return
                      00320 #undefine margpi
                      00321 hlog1a CODE
                      00322 #define margp2 hllblss00
0000                  00323 clearbit:
                      00324 #ifdef HLLMULTITASK
                      00325 #ifdef HLLGUARDhllblss
                      00326  movf in_isr,f
                      00327  btfsc STATUS,Z
                      00328  goto clearbit0
                      00329  POP
                      00330  banksel margp2
                      00331  movwf margp2
                      00332  POP
                      00333  xorlw .0
                      00334  btfss STATUS,Z
                      00335  goto tff00h
                      00336  movfw margp2
                      00337  andlw .255-.1
                      00338  goto tff99h
                      00339 tff00h:
                      00340  xorlw .1
                      00341  btfss STATUS,Z
                      00342  goto tff01h
                      00343  movfw margp2
                      00344  andlw .255-.2
                      00345  goto tff99h
                      00346 tff01h:
                      00347  xorlw .1
                      00348  xorlw .2
                      00349  btfss STATUS,Z
                      00350  goto tff02h
                      00351  movfw margp2
                      00352  andlw .255-.4
                      00353  goto tff99h
                      00354 tff02h:
                      00355  xorlw .2
                      00356  xorlw .3
                      00357  btfss STATUS,Z
                      00358  goto tff03h
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00359  movfw margp2
                      00360  andlw .255-.8
                      00361  goto tff99h
                      00362 tff03h:
                      00363  xorlw .3
                      00364  xorlw .4
                      00365  btfss STATUS,Z
                      00366  goto tff04h
                      00367  movfw margp2
                      00368  andlw .255-.16
                      00369  goto tff99h
                      00370 tff04h:
                      00371  xorlw .4
                      00372  xorlw .5
                      00373  btfss STATUS,Z
                      00374  goto tff05h
                      00375  movfw margp2
                      00376  andlw .255-.32
                      00377  goto tff99h
                      00378 tff05h:
                      00379  xorlw .5
                      00380  xorlw .6
                      00381  btfss STATUS,Z
                      00382  goto tff07h
                      00383  movfw margp2
                      00384  andlw .255-.64
                      00385  goto tff99h
                      00386 tff07h:
                      00387  movfw margp2
                      00388  andlw .255-.128
                      00389 tff99h:
                      00390  PUSH
                      00391  return
                      00392 #undefine margp2
                      00393 #define margp2 hllblss00+1
                      00394 clearbit0:
                      00395 #endif
                      00396 #endif
                      00397  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   ???? ????      00398  banksel margp2
0004   00??           00399  movwf margp2
                      00400  POP
0005   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0006   0384               M  decf FSR,f 
0007   3A00           00401  xorlw .0
0008   1D03           00402  btfss STATUS,Z
0009   2???           00403  goto hllAAAAA
000A   08??           00404  movfw margp2
000B   39FE           00405  andlw .255-.1
000C   2???           00406  goto hllHAAAA
000D                  00407 hllAAAAA:
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000D   3A01           00408  xorlw .1
000E   1D03           00409  btfss STATUS,Z
000F   2???           00410  goto hllBAAAA
0010   08??           00411  movfw margp2
0011   39FD           00412  andlw .255-.2
0012   2???           00413  goto hllHAAAA
0013                  00414 hllBAAAA:
0013   3A01           00415  xorlw .1
0014   3A02           00416  xorlw .2
0015   1D03           00417  btfss STATUS,Z
0016   2???           00418  goto hllCAAAA
0017   08??           00419  movfw margp2
0018   39FB           00420  andlw .255-.4
0019   2???           00421  goto hllHAAAA
001A                  00422 hllCAAAA:
001A   3A02           00423  xorlw .2
001B   3A03           00424  xorlw .3
001C   1D03           00425  btfss STATUS,Z
001D   2???           00426  goto hllDAAAA
001E   08??           00427  movfw margp2
001F   39F7           00428  andlw .255-.8
0020   2???           00429  goto hllHAAAA
0021                  00430 hllDAAAA:
0021   3A03           00431  xorlw .3
0022   3A04           00432  xorlw .4
0023   1D03           00433  btfss STATUS,Z
0024   2???           00434  goto hllEAAAA
0025   08??           00435  movfw margp2
0026   39EF           00436  andlw .255-.16
0027   2???           00437  goto hllHAAAA
0028                  00438 hllEAAAA:
0028   3A04           00439  xorlw .4
0029   3A05           00440  xorlw .5
002A   1D03           00441  btfss STATUS,Z
002B   2???           00442  goto hllFAAAA
002C   08??           00443  movfw margp2
002D   39DF           00444  andlw .255-.32
002E   2???           00445  goto hllHAAAA
002F                  00446 hllFAAAA:
002F   3A05           00447  xorlw .5
0030   3A06           00448  xorlw .6
0031   1D03           00449  btfss STATUS,Z
0032   2???           00450  goto hllGAAAA
0033   08??           00451  movfw margp2
0034   39BF           00452  andlw .255-.64
0035   2???           00453  goto hllHAAAA
0036                  00454 hllGAAAA:
0036   08??           00455  movfw margp2
0037   397F           00456  andlw .255-.128
0038                  00457 hllHAAAA:
                      00458  PUSH
0038   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0039   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

003A   0008           00459  return
                      00460 #undefine margp2
                      00461 ukrnl2 UDATA
0000                  00462 stack res HLOE_STACK_SIZE
                      00463 ukrnl3 UDATA
0000                  00464 alt_stack res HLOE_STACK2_SIZE
                      00465 ukernl udata
0000                  00466 hllblss00 res 1
                      00467 #ifdef HLLMULTITASK
                      00468 #ifdef HLLGUARDhllblss
                      00469 hllblss00isr res 1
                      00470 #endif
                      00471 #endif
0001                  00472 hllblss01 res 1
                      00473 #ifdef HLLMULTITASK
                      00474 #ifdef HLLGUARDhllblss
                      00475 hllblss01isr res 1
                      00476 #endif
                      00477 #endif
0002                  00478 hllblss02 res 1
                      00479 #ifdef HLLMULTITASK
                      00480 #ifdef HLLGUARDhllblss
                      00481 hllblss02isr res 1
                      00482 #endif
                      00483 #endif
                      00484 ukrshr udata_shr
0000                  00485 softstack0 res 1
                      00486 #ifdef HLLMULTITASK
                      00487 softstack0isr res 1
                      00488 #endif
0001                  00489 softstack1 res 1
                      00490 #ifdef HLLMULTITASK
                      00491 softstack1isr res 1
                      00492 #endif
0002                  00493 softstack2 res 1
                      00494 #ifdef HLLMULTITASK
                      00495 softstack2isr res 1
                      00496 #endif
0003                  00497 alt_fsr res 1
0004                  00498 W_Save res 1
0005                  00499 STATUS_Save res 1
0006                  00500 FSR_Save res 1
0007                  00501 ALT_Save res 1
0008                  00502 in_isr res 1
                      00503 hllkrna00 CODE
                      00504 #define mterm hllblss00
0000                  00505 mul:
                      00506 #ifdef HLLMULTITASK
                      00507 #ifdef HLLGUARDhllblss
                      00508  movf in_isr,f
                      00509  btfsc STATUS,Z
                      00510  goto mul0
                      00511  POP
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00512  banksel mterm
                      00513  movwf mterm
                      00514  clrw
                      00515  addwf HLINDF,w
                      00516  decf mterm,f
                      00517  btfss STATUS,Z
                      00518  goto $-3
                      00519  movwf HLINDF
                      00520  return
                      00521 #undefine mterm
                      00522 #define mterm hllblss00+1
                      00523 mul0:
                      00524 #endif
                      00525 #endif
                      00526  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   ???? ????      00527  banksel mterm
0004   00??           00528  movwf mterm
0005   0103           00529  clrw
0006   0700           00530  addwf HLINDF,w
0007   03??           00531  decf mterm,f
0008   1D03           00532  btfss STATUS,Z
0009   2???           00533  goto $-3
000A   0080           00534  movwf HLINDF
000B   0008           00535  return
                      00536 #undefine mterm
                      00537 hllkrna01 CODE
0000                  00538 add:
                      00539  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   0700           00540  addwf HLINDF,w
0003   0384           00541  decf HLFSR,f
                      00542  PUSH
0004   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0005   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0006   0008           00543  return
                      00544 hllkrna02 CODE
0000                  00545 negti:
0000   0980           00546  comf HLINDF,f
0001   0A80           00547  incf HLINDF,f
0002   0008           00548  return
                      00549 hllkrna03 CODE
0000                  00550 printch:
                      00551  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
                      00552 #ifdef HLLMULTITASK
                      00553  banksel PIR1
                      00554  btfss PIR1,TXIF
                      00555  goto $-1
                      00556 #endif
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0002   1283 1303      00557  banksel TXREG
0004   0099           00558  movwf TXREG
0005   1283 1303      00559  banksel PIR1
0007   1E0C           00560  btfss PIR1,TXIF
0008   2???           00561  goto $-1
0009   0008           00562  return
                      00563 hllkrna04 CODE
                      00564 #define mterm hllblss00
                      00565 #define mdiv hllblss01
                      00566 #define mquot hllblss02
0000                  00567 modu:
                      00568 #ifdef HLLMULTITASK
                      00569 #ifdef HLLGUARDhllblss
                      00570  movf in_isr,f
                      00571  btfsc STATUS,Z
                      00572  goto modu0
                      00573  banksel mquot
                      00574  clrf mquot
                      00575  POP
                      00576  movwf mdiv
                      00577  POP
                      00578  movwf mterm
                      00579  movfw mdiv
                      00580  subwf mterm,f
                      00581  btfss STATUS,C
                      00582  goto $+3
                      00583  incf mquot,f
                      00584  goto $-4
                      00585  addwf mterm,w
                      00586  PUSH
                      00587  return
                      00588 #undefine mterm
                      00589 #undefine mdiv
                      00590 #undefine mquot
                      00591 #define mterm hllblss00+1
                      00592 #define mdiv hllblss01+1
                      00593 #define mquot hllblss02+1
                      00594 modu0:
                      00595 #endif
                      00596 #endif
0000   ???? ????      00597  banksel mquot
0002   01??           00598  clrf mquot
                      00599  POP
0003   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0004   0384               M  decf FSR,f 
0005   00??           00600  movwf mdiv
                      00601  POP
0006   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0007   0384               M  decf FSR,f 
0008   00??           00602  movwf mterm
0009   08??           00603  movfw mdiv
000A   02??           00604  subwf mterm,f
000B   1C03           00605  btfss STATUS,C
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000C   2???           00606  goto $+3
000D   0A??           00607  incf mquot,f
000E   2???           00608  goto $-4
000F   07??           00609  addwf mterm,w
                      00610  PUSH
0010   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0011   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0012   0008           00611  return
                      00612 #undefine mterm
                      00613 #undefine mdiv
                      00614 #undefine mquot
                      00615 hllkrna05 CODE
                      00616 #define mterm hllblss00
                      00617 #define mdiv hllblss01
                      00618 #define mquot hllblss02
0000                  00619 divu:
                      00620 #ifdef HLLMULTITASK
                      00621 #ifdef HLLGUARDhllblss
                      00622  movf in_isr,f
                      00623  btfsc STATUS,Z
                      00624  goto divu0
                      00625  banksel mquot
                      00626  clrf mquot
                      00627  POP
                      00628  movwf mdiv
                      00629  POP
                      00630  movwf mterm
                      00631  movfw mdiv
                      00632  subwf mterm,f
                      00633  btfss STATUS,C
                      00634  goto $+3
                      00635  incf mquot,f
                      00636  goto $-4
                      00637  movfw mquot
                      00638  PUSH
                      00639  return
                      00640 #undefine mterm
                      00641 #undefine mdiv
                      00642 #undefine mquot
                      00643 #define mterm hllblss00+1
                      00644 #define mdiv hllblss01+1
                      00645 #define mquot hllblss02+1
                      00646 divu0:
                      00647 #endif
                      00648 #endif
0000   ???? ????      00649  banksel mquot
0002   01??           00650  clrf mquot
                      00651  POP
0003   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0004   0384               M  decf FSR,f 
0005   00??           00652  movwf mdiv
                      00653  POP
0006   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0007   0384               M  decf FSR,f 
0008   00??           00654  movwf mterm
0009   08??           00655  movfw mdiv
000A   02??           00656  subwf mterm,f
000B   1C03           00657  btfss STATUS,C
000C   2???           00658  goto $+3
000D   0A??           00659  incf mquot,f
000E   2???           00660  goto $-4
000F   08??           00661  movfw mquot
                      00662  PUSH
0010   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0011   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0012   0008           00663  return
                      00664 #undefine mterm
                      00665 #undefine mdiv
                      00666 #undefine mquot
                      00667 hllkrna06 CODE
0000                  00668 getch:
0000   1283 1303      00669  banksel RCSTA
0002   1C98           00670  btfss RCSTA,OERR
0003   2???           00671  goto geth2
0004   1218           00672  bcf RCSTA,CREN
0005   1618           00673  bsf RCSTA,CREN
0006                  00674 geth2:
0006   1D18           00675  btfss RCSTA,FERR
0007   2???           00676  goto geth4
0008   1398           00677  bcf RCSTA,SPEN
0009   1798           00678  bsf RCSTA,SPEN
000A                  00679 geth4:
000A   1283 1303      00680  banksel PIR1
000C                  00681 geth3:
000C   1E8C           00682  btfss PIR1,RCIF
000D   2???           00683  goto geth3
000E   1283 1303      00684  banksel RCREG
0010   081A           00685  movf RCREG,w
                      00686  PUSH
0011   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0012   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0013   0008           00687  return
                      00688 hllkrna07 CODE
0000                  00689 eq:
                      00690  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   0600           00691  xorwf HLINDF,w
0003   3001           00692  movlw .1
0004   1D03           00693  btfss STATUS,Z
0005   3000           00694  movlw .0
0006   0384           00695  decf HLFSR,f
                      00696  PUSH
0007   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0008   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0009   0008           00697  return
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00698 #define sstack0 softstack0
                      00699 #define sstack1 softstack1
                      00700 #define sstack2 softstack2
                      00701 hllparmcore macro
                      00702  movwf sstack2
                      00703  movfw HLFSR
                      00704  movwf sstack0
                      00705  movfw HLINDF
                      00706  subwf sstack2,w
                      00707  movwf HLFSR
                      00708  movfw HLINDF
                      00709  movwf sstack1
                      00710  movfw sstack0
                      00711  movwf HLFSR
                      00712  clrf sstack0
                      00713  movfw sstack1
                      00714  movwf HLINDF
                      00715  movfw sstack2
                      00716  pagesel kpush
                      00717  goto kpush
                      00718  endm
                      00719 hllkrna08 CODE
0000                  00720 parm:
                      00721  KPOP
0000   ????               M  bankisel alt_stack ;This is OK for interrupts... part of STATUS 
0001   08??               M  movf in_isr,f ;In shared RAM, no need for BANKSEL
0002   1903               M  btfsc STATUS,Z
0003   2???               M  goto $+0F
0004   0804               M  movfw FSR 
0005   00??               M  movwf softstack0+1 ;Save user stack ptr 
0006   08??               M  movfw alt_fsr ;Get second stack ptr 
0007   0084               M  movwf FSR 
0008   0800               M  movfw INDF ;Dereference it 
0009   0384               M  decf FSR,f ;Decrement it 
000A   00??               M  movwf softstack1+1  ;Save popped value for ret urn 
000B   0804               M  movfw FSR ;Save second stack ptr 
000C   00??               M  movwf alt_fsr 
000D   08??               M  movfw softstack0+1  ;Restore user stack ptr 
000E   0084               M  movwf FSR 
000F   01??               M  clrf softstack0+1
0010   08??               M  movfw softstack1+1  ;Bring back popped value for ret urn 
0011   2???               M  goto $+0E
0012   0804               M  movfw FSR 
0013   00??               M  movwf softstack0 ;Save user stack ptr 
0014   08??               M  movfw alt_fsr ;Get second stack ptr 
0015   0084               M  movwf FSR 
0016   0800               M  movfw INDF ;Dereference it 
0017   0384               M  decf FSR,f ;Decrement it 
0018   00??               M  movwf softstack1  ;Save popped value for ret urn 
0019   0804               M  movfw FSR ;Save second stack ptr 
001A   00??               M  movwf alt_fsr 
001B   08??               M  movfw softstack0  ;Restore user stack ptr 
001C   0084               M  movwf FSR 
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001D   01??               M  clrf softstack0
001E   08??               M  movfw softstack1  ;Bring back popped value for ret urn 
001F   ????               M  bankisel stack
                      00722 #ifdef HLLMULTITASK
                      00723  movf in_isr,f
                      00724  btfss STATUS,Z
                      00725  goto parm4
                      00726  hllparmcore
                      00727 #undefine sstack0
                      00728 #undefine sstack1
                      00729 #undefine sstack2
                      00730 #define sstack0 softstack0+1
                      00731 #define sstack1 softstack1+1
                      00732 #define sstack2 softstack2+1
                      00733 parm4:
                      00734 #endif
                      00735  hllparmcore
0020   00??               M  movwf sstack2
0021   0804               M  movfw HLFSR
0022   00??               M  movwf sstack0
0023   0800               M  movfw HLINDF
0024   02??               M  subwf sstack2,w
0025   0084               M  movwf HLFSR
0026   0800               M  movfw HLINDF
0027   00??               M  movwf sstack1
0028   08??               M  movfw sstack0
0029   0084               M  movwf HLFSR
002A   01??               M  clrf sstack0
002B   08??               M  movfw sstack1
002C   0080               M  movwf HLINDF
002D   08??               M  movfw sstack2
002E   ????               M  pagesel kpush
002F   2???               M  goto kpush
                      00736 #undefine sstack0
                      00737 #undefine sstack1
                      00738 #undefine sstack2
                      00739 hllkrna09 CODE
0000                  00740 kpop:
                      00741  KPOP
0000   ????               M  bankisel alt_stack ;This is OK for interrupts... part of STATUS 
0001   08??               M  movf in_isr,f ;In shared RAM, no need for BANKSEL
0002   1903               M  btfsc STATUS,Z
0003   2???               M  goto $+0F
0004   0804               M  movfw FSR 
0005   00??               M  movwf softstack0+1 ;Save user stack ptr 
0006   08??               M  movfw alt_fsr ;Get second stack ptr 
0007   0084               M  movwf FSR 
0008   0800               M  movfw INDF ;Dereference it 
0009   0384               M  decf FSR,f ;Decrement it 
000A   00??               M  movwf softstack1+1  ;Save popped value for ret urn 
000B   0804               M  movfw FSR ;Save second stack ptr 
000C   00??               M  movwf alt_fsr 
000D   08??               M  movfw softstack0+1  ;Restore user stack ptr 
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000E   0084               M  movwf FSR 
000F   01??               M  clrf softstack0+1
0010   08??               M  movfw softstack1+1  ;Bring back popped value for ret urn 
0011   2???               M  goto $+0E
0012   0804               M  movfw FSR 
0013   00??               M  movwf softstack0 ;Save user stack ptr 
0014   08??               M  movfw alt_fsr ;Get second stack ptr 
0015   0084               M  movwf FSR 
0016   0800               M  movfw INDF ;Dereference it 
0017   0384               M  decf FSR,f ;Decrement it 
0018   00??               M  movwf softstack1  ;Save popped value for ret urn 
0019   0804               M  movfw FSR ;Save second stack ptr 
001A   00??               M  movwf alt_fsr 
001B   08??               M  movfw softstack0  ;Restore user stack ptr 
001C   0084               M  movwf FSR 
001D   01??               M  clrf softstack0
001E   08??               M  movfw softstack1  ;Bring back popped value for ret urn 
001F   ????               M  bankisel stack
0020   0008           00742  return
                      00743 hllkrna10 CODE
0000                  00744 kpush:
                      00745  KPUSH
0000   ????               M  bankisel alt_stack ;This is OK for interrupts... part of STATUS 
0001   08??               M  movf in_isr,f ;In shared RAM, no need for BANKSEL
0002   1903               M  btfsc STATUS,Z
0003   2???               M  goto $+0E
0004   00??               M  movwf softstack1+1 ;softstack1 holds parm value being pushed
0005   0804               M  movfw FSR  
0006   00??               M  movwf softstack0+1  ;softstack0 holds FSR
0007   08??               M  movfw alt_fsr 
0008   0084               M  movwf FSR 
0009   08??               M  movfw softstack1+1
000A   0A??               M  incf alt_fsr,f 
000B   0A84               M  incf FSR,f ;The actual kernel push... preincrement for interrupt safety
000C   0080               M  movwf INDF 
000D   08??               M  movfw softstack0+1
000E   0084               M  movwf FSR 
000F   01??               M  clrf softstack0+1 
0010   2???               M  goto $+0D
0011   00??               M  movwf softstack1 ;softstack1 holds parm value being pushed
0012   0804               M  movfw FSR  
0013   00??               M  movwf softstack0  ;softstack0 holds FSR
0014   08??               M  movfw alt_fsr 
0015   0084               M  movwf FSR 
0016   08??               M  movfw softstack1
0017   0A??               M  incf alt_fsr,f 
0018   0A84               M  incf FSR,f ;The actual kernel push... preincrement for interrupt safety
0019   0080               M  movwf INDF 
001A   08??               M  movfw softstack0
001B   0084               M  movwf FSR 
001C   01??               M  clrf softstack0
001D   ????               M  bankisel stack
001E   0008           00746  return
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00747 hllkrna11 CODE
0000                  00748 dispose:
                      00749  DISCARD
0000   0384               M  decf FSR,f 
0001   0008           00750  return
                      00751 hlog1d CODE
0000                  00752 oru:
                      00753  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   0400           00754  iorwf HLINDF,w
0003   0384           00755  decf HLFSR,f
                      00756  PUSH
0004   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0005   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0006   0008           00757  return
                      00758 readeepromhloe CODE
0000                  00759 readeeprom:
                      00760  READEEPROM
                          M  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   1283 1703          M  banksel EEADR
0004   008D               M  movwf EEADR
0005   1683 1703          M  banksel EECON1
0007   138C               M  bcf EECON1, EEPGD
0008   140C               M  bsf EECON1, RD
0009   1283 1703          M  banksel EEDAT
000B   080C               M  movf EEDAT, W
                          M  PUSH
000C   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
000D   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
000E   0008           00761  return
                      00762 hllkrn444 CODE
0000                  00763 safepush:
                      00764  PUSH
0000   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0001   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
0002   0804           00765  movf HLFSR,w
0003   3C??           00766  sublw stack
0004   1903           00767  btfsc STATUS,Z
0005   2???           00768  goto kspox5
0006   1803           00769  btfsc STATUS,C
0007   2???           00770  goto sperr11
0008                  00771 kspox5:
0008   0804           00772  movf HLFSR,w
0009   3E01           00773  addlw .1
000A   3C??           00774  sublw (stack+HLOE_STACK_SIZE)
000B   1C03           00775  btfss STATUS,C
000C   2???           00776  goto sperr11
000D   0800           00777  movf HLINDF,w
000E   0008           00778  return
000F                  00779 sperr11:
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000F   138B           00780  BCF INTCON,GIE
                      00781  DISCARD
0010   0384               M  decf FSR,f 
0011                  00782 dmm445:
0011   3021           00783  movlw '!'
                      00784  PUSH
0012   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0013   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
                      00785  FAR_CALL safepush,printch
0014   ????               M  pagesel printch
0015   2???               M  call printch
0016   ????               M  pagesel safepush  ;This one restores the caller's code page
0017   2???           00786  goto dmm445
                      00787 hlog1b CODE
                      00788 #define margp2 hllblss00
0000                  00789 setbit:
                      00790 #ifdef HLLMULTITASK
                      00791 #ifdef HLLGUARDhllblss
                      00792  movf in_isr,f
                      00793  btfsc STATUS,Z
                      00794  goto setbit0
                      00795  POP
                      00796  banksel margp2
                      00797  movwf margp2
                      00798  POP
                      00799  xorlw .0
                      00800  btfss STATUS,Z
                      00801  goto tcf00h
                      00802  movfw margp2
                      00803  iorlw .1
                      00804  goto tcf99h
                      00805 tcf00h:
                      00806  xorlw .1
                      00807  btfss STATUS,Z
                      00808  goto tcf01h
                      00809  movfw margp2
                      00810  iorlw .2
                      00811  goto tcf99h
                      00812 tcf01h:
                      00813  xorlw .1
                      00814  xorlw .2
                      00815  btfss STATUS,Z
                      00816  goto tcf02h
                      00817  movfw margp2
                      00818  iorlw .4
                      00819  goto tcf99h
                      00820 tcf02h:
                      00821  xorlw .2
                      00822  xorlw .3
                      00823  btfss STATUS,Z
                      00824  goto tcf03h
                      00825  movfw margp2
                      00826  iorlw .8
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00827  goto tcf99h
                      00828 tcf03h:
                      00829  xorlw .3
                      00830  xorlw .4
                      00831  btfss STATUS,Z
                      00832  goto tcf04h
                      00833  movfw margp2
                      00834  iorlw .16
                      00835  goto tcf99h
                      00836 tcf04h:
                      00837  xorlw .4
                      00838  xorlw .5
                      00839  btfss STATUS,Z
                      00840  goto tcf05h
                      00841  movfw margp2
                      00842  iorlw .32
                      00843  goto tcf99h
                      00844 tcf05h:
                      00845  xorlw .5
                      00846  xorlw .6
                      00847  btfss STATUS,Z
                      00848  goto tcf07h
                      00849  movfw margp2
                      00850  iorlw .64
                      00851  goto tcf99h
                      00852 tcf07h:
                      00853  movfw margp2
                      00854  iorlw .128
                      00855 tcf99h:
                      00856  PUSH
                      00857  return
                      00858 #undefine margp2
                      00859 #define margp2 hllblss00+1
                      00860 setbit0:
                      00861 #endif
                      00862 #endif
                      00863  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   ???? ????      00864  banksel margp2
0004   00??           00865  movwf margp2
                      00866  POP
0005   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0006   0384               M  decf FSR,f 
0007   3A00           00867  xorlw .0
0008   1D03           00868  btfss STATUS,Z
0009   2???           00869  goto hllIAAAA
000A   08??           00870  movfw margp2
000B   3801           00871  iorlw .1
000C   2???           00872  goto hllPAAAA
000D                  00873 hllIAAAA:
000D   3A01           00874  xorlw .1
000E   1D03           00875  btfss STATUS,Z
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000F   2???           00876  goto hllJAAAA
0010   08??           00877  movfw margp2
0011   3802           00878  iorlw .2
0012   2???           00879  goto hllPAAAA
0013                  00880 hllJAAAA:
0013   3A01           00881  xorlw .1
0014   3A02           00882  xorlw .2
0015   1D03           00883  btfss STATUS,Z
0016   2???           00884  goto hllKAAAA
0017   08??           00885  movfw margp2
0018   3804           00886  iorlw .4
0019   2???           00887  goto hllPAAAA
001A                  00888 hllKAAAA:
001A   3A02           00889  xorlw .2
001B   3A03           00890  xorlw .3
001C   1D03           00891  btfss STATUS,Z
001D   2???           00892  goto hllLAAAA
001E   08??           00893  movfw margp2
001F   3808           00894  iorlw .8
0020   2???           00895  goto hllPAAAA
0021                  00896 hllLAAAA:
0021   3A03           00897  xorlw .3
0022   3A04           00898  xorlw .4
0023   1D03           00899  btfss STATUS,Z
0024   2???           00900  goto hllMAAAA
0025   08??           00901  movfw margp2
0026   3810           00902  iorlw .16
0027   2???           00903  goto hllPAAAA
0028                  00904 hllMAAAA:
0028   3A04           00905  xorlw .4
0029   3A05           00906  xorlw .5
002A   1D03           00907  btfss STATUS,Z
002B   2???           00908  goto hllNAAAA
002C   08??           00909  movfw margp2
002D   3820           00910  iorlw .32
002E   2???           00911  goto hllPAAAA
002F                  00912 hllNAAAA:
002F   3A05           00913  xorlw .5
0030   3A06           00914  xorlw .6
0031   1D03           00915  btfss STATUS,Z
0032   2???           00916  goto hllOAAAA
0033   08??           00917  movfw margp2
0034   3840           00918  iorlw .64
0035   2???           00919  goto hllPAAAA
0036                  00920 hllOAAAA:
0036   08??           00921  movfw margp2
0037   3880           00922  iorlw .128
0038                  00923 hllPAAAA:
                      00924  PUSH
0038   0A84               M  incf FSR,f ; The "incf" op serves as an allocator; it happens first so that interrupting
0039   0080               M  movwf INDF ; code of any sort will not overwrite the data. 
003A   0008           00925  return
                      00926 #undefine margp2
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00927 writeeepromhloe CODE
0000                  00928 writeeeprom:
                      00929  WRITEEEPROM
                          M  POP
0000   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0001   0384               M  decf FSR,f 
0002   1283 1703          M  banksel EEDAT
0004   008C               M  movwf  EEDAT
                          M  POP
0005   0800               M  movfw INDF ; preserve the safety of this code under interruptible conditions. 
0006   0384               M  decf FSR,f 
0007   1283 1703          M  banksel EEADR 
0009   008D               M  movwf  EEADR
000A   1683 1703          M  banksel EECON1
000C   138C               M  bcf EECON1, EEPGD
000D   150C               M  bsf EECON1, WREN
000E   138B               M  bcf  INTCON, GIE
000F   1B8B               M  btfsc INTCON, GIE
0010   2???               M  goto $-2
0011   3055               M  movlw  55h
0012   008D               M  movwf  EECON2
0013   30AA               M  movlw  0AAh
0014   008D               M  movwf  EECON2
0015   148C               M  bsf    EECON1, WR
0016   178B               M  bsf    INTCON, GIE
0017   110C               M  bcf    EECON1, WREN
0018   0008           00930  return
33C4                  00931  end
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 32


SYMBOL TABLE
  LABEL                             VALUE 

ABDEN                             00000000
ABDOVF                            00000007
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000004
ADCS1                             00000005
ADCS2                             00000006
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
ALT_Save                          00000007
ANS0                              00000000
ANS1                              00000001
ANS10                             00000002
ANS11                             00000003
ANS2                              00000002
ANS3                              00000003
ANS4                              00000004
ANS5                              00000005
ANS6                              00000006
ANS7                              00000007
ANS8                              00000000
ANS9                              00000001
ANSEL                             0000011E
ANSELH                            0000011F
BAUDCTL                           0000009B
BF                                00000000
BRG0                              00000000
BRG1                              00000001
BRG10                             00000002
BRG11                             00000003
BRG12                             00000004
BRG13                             00000005
BRG14                             00000006
BRG15                             00000007
BRG16                             00000003
BRG2                              00000002
BRG3                              00000003
BRG4                              00000004
BRG5                              00000005
BRG6                              00000006
BRG7                              00000007
BRG8                              00000000
BRG9                              00000001
BRGH                              00000002
C                                 00000000
C1CH0                             00000000
C1CH1                             00000001
C1IE                              00000005
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 33


SYMBOL TABLE
  LABEL                             VALUE 

C1IF                              00000005
C1OE                              00000005
C1ON                              00000007
C1OUT                             00000006
C1POL                             00000004
C1R                               00000002
C1SEN                             00000005
C1VREN                            00000007
C2CH0                             00000000
C2CH1                             00000001
C2IE                              00000006
C2IF                              00000006
C2OE                              00000005
C2ON                              00000007
C2OUT                             00000006
C2POL                             00000004
C2R                               00000002
C2REN                             00000004
C2SYNC                            00000000
C2VREN                            00000006
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCPR1H                            00000016
CCPR1L                            00000015
CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CKE                               00000006
CKP                               00000004
CM1CON0                           00000119
CM2CON0                           0000011A
CM2CON1                           0000011B
COPY                              
CREN                              00000004
CSRC                              00000007
D                                 00000005
DATA_ADDRESS                      00000005
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DISCARD                           
D_A                               00000005
ECCPAS                            0000001D
ECCPAS0                           00000004
ECCPAS1                           00000005
ECCPAS2                           00000006
ECCPASE                           00000007
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 34


SYMBOL TABLE
  LABEL                             VALUE 

EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDAT                             0000010C
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
F                                 00000001
FAR_CALL                          
FERR                              00000002
FSR                               00000004
FSR_Save                          00000006
GIE                               00000007
GO                                00000001
GO_DONE                           00000001
HALF_FAR_CALL                     
HLFSR                             FSR
HLINDF                            INDF
HLLGUARDhllblss                   
HLOE_STACK2_SIZE                  .20
HLOE_STACK_SIZE                   .80
HLTABLE                           
HTS                               00000002
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IOC                               00000096
IOC0                              00000000
IOC1                              00000001
IOC2                              00000002
IOC3                              00000003
IOC4                              00000004
IOC5                              00000005
IOCA                              00000096
IOCA0                             00000000
IOCA1                             00000001
IOCA2                             00000002
IOCA3                             00000003
IOCA4                             00000004
IOCA5                             00000005
IOCB                              00000116
IOCB4                             00000004
IOCB5                             00000005
IOCB6                             00000006
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 35


SYMBOL TABLE
  LABEL                             VALUE 

IOCB7                             00000007
IRCF0                             00000004
IRCF1                             00000005
IRCF2                             00000006
IRP                               00000007
KDISCARD                          
KPOP                              
KPUSH                             
LSHIFT                            
LTS                               00000001
MC1OUT                            00000007
MC2OUT                            00000006
MSK                               00000093
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BOR                           00000000
NOT_DONE                          00000001
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RABPU                         00000007
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_W                             00000002
NOT_WRITE                         00000002
OERR                              00000001
OPTION_REG                        00000081
OSCCON                            0000008F
OSCTUNE                           00000090
OSFIE                             00000007
OSFIF                             00000007
OSTS                              00000003
P                                 00000004
P1M0                              00000006
P1M1                              00000007
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PC_Save                           00000001
PDC0                              00000000
PDC1                              00000001
PDC2                              00000002
PDC3                              00000003
PDC4                              00000004
PDC5                              00000005
PDC6                              00000006
PEIE                              00000006
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
POP                               
PORTA                             00000005
PORTB                             00000006
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 36


SYMBOL TABLE
  LABEL                             VALUE 

PORTC                             00000007
PR2                               00000092
PREEMPT                           
PRSEN                             00000007
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSSAC0                            00000002
PSSAC1                            00000003
PSSBD0                            00000000
PSSBD1                            00000001
PSTRCON                           0000019D
PULSR                             00000002
PULSS                             00000003
PUSH                              
PWM1CON                           0000001C
R                                 00000002
RABIE                             00000003
RABIF                             00000000
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
READEEPROM                        
READ_WRITE                        00000002
RESUME                            
RP0                               00000005
RP1                               00000006
RSHIFT                            
RX9                               00000006
RX9D                              00000000
R_W                               00000002
S                                 00000003
SBOREN                            00000004
SCKP                              00000004
SCS                               00000000
SENB                              00000003
SMP                               00000007
SPBRG                             00000099
SPBRGH                            0000009A
SPEN                              00000007
SR0                               00000006
SR1                               00000007
SRCON                             0000019E
SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPEN                             00000005
SSPIE                             00000003
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 37


SYMBOL TABLE
  LABEL                             VALUE 

SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPMSK                            00000093
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
STATUS_Save                       00000005
STRA                              00000000
STRB                              00000001
STRC                              00000002
STRD                              00000003
STRSYNC                           00000004
SWDTEN                            00000000
SYNC                              00000004
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1GINV                            00000007
T1GSS                             00000001
T1IE                              00000000
T1IF                              00000000
T1OSCEN                           00000003
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
T2IE                              00000001
T2IF                              00000001
TMR0                              00000001
TMR1CS                            00000001
TMR1GE                            00000006
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISA0                            00000000
TRISA1                            00000001
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 38


SYMBOL TABLE
  LABEL                             VALUE 

TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000086
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRMT                              00000001
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
TUN3                              00000003
TUN4                              00000004
TX9                               00000006
TX9D                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
UA                                00000001
ULPWUE                            00000005
VCFG                              00000006
VP6EN                             00000004
VR0                               00000000
VR1                               00000001
VR2                               00000002
VR3                               00000003
VRCON                             00000118
VRR                               00000005
W                                 00000000
WCOL                              00000007
WDTCON                            00000097
WDTPS0                            00000001
WDTPS1                            00000002
WDTPS2                            00000003
WDTPS3                            00000004
WPU                               00000095
WPUA                              00000095
WPUA0                             00000000
WPUA1                             00000001
WPUA2                             00000002
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 39


SYMBOL TABLE
  LABEL                             VALUE 

WPUA4                             00000004
WPUA5                             00000005
WPUB                              00000115
WPUB4                             00000004
WPUB5                             00000005
WPUB6                             00000006
WPUB7                             00000007
WR                                00000001
WREN                              00000002
WRERR                             00000003
WRITEEEPROM                       
WUE                               00000001
W_Save                            00000004
Z                                 00000002
_BOR_NSLEEP                       00003EFF
_BOR_OFF                          00003CFF
_BOR_ON                           00003FFF
_BOR_SBODEN                       00003DFF
_CPD_OFF                          00003FFF
_CPD_ON                           00003F7F
_CP_OFF                           00003FFF
_CP_ON                            00003FBF
_EC_OSC                           00003FFB
_EXTRC                            00003FFF
_EXTRCIO                          00003FFE
_EXTRC_OSC_CLKOUT                 00003FFF
_EXTRC_OSC_NOCLKOUT               00003FFE
_FCMEN_OFF                        000037FF
_FCMEN_ON                         00003FFF
_HS_OSC                           00003FFA
_IESO_OFF                         00003BFF
_IESO_ON                          00003FFF
_INTOSC                           00003FFD
_INTOSCIO                         00003FFC
_INTRC_OSC_CLKOUT                 00003FFD
_INTRC_OSC_NOCLKOUT               00003FFC
_LP_OSC                           00003FF8
_MCLRE_OFF                        00003FDF
_MCLRE_ON                         00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FEF
_WDT_OFF                          00003FF7
_WDT_ON                           00003FFF
_XT_OSC                           00003FF9
__16F690                          00000001
_hllkrna00_0009                   00000009
_hllkrna03_0008                   00000008
_hllkrna04_000C                   0000000C
_hllkrna04_000E                   0000000E
_hllkrna05_000C                   0000000C
_hllkrna05_000E                   0000000E
_hllkrna08_0003                   00000003
_hllkrna08_0011                   00000011
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 40


SYMBOL TABLE
  LABEL                             VALUE 

_hllkrna09_0003                   00000003
_hllkrna09_0011                   00000011
_hllkrna10_0003                   00000003
_hllkrna10_0010                   00000010
_writeeepromhloe_0010             00000010
aart00                            00000000
aart01                            00000001
aart02                            00000002
aartpr00                          00000000
add                               00000000
alt_fsr                           00000003
alt_stack                         00000000
clearbit                          00000000
dispose                           00000000
divu                              00000000
dmm445                            00000011
eq                                00000000
getch                             00000000
geth2                             00000006
geth3                             0000000C
geth4                             0000000A
hllAAAAA                          0000000D
hllBAAAA                          00000013
hllCAAAA                          0000001A
hllDAAAA                          00000021
hllEAAAA                          00000028
hllFAAAA                          0000002F
hllGAAAA                          00000036
hllHAAAA                          00000038
hllIAAAA                          0000000D
hllJAAAA                          00000013
hllKAAAA                          0000001A
hllLAAAA                          00000021
hllMAAAA                          00000028
hllNAAAA                          0000002F
hllOAAAA                          00000036
hllPAAAA                          00000038
hllblss00                         00000000
hllblss01                         00000001
hllblss02                         00000002
hllparmcore                       
hllprgen2                         00000015
hllprogend                        00000117
hlluserprog                       00000000
hloego                            00000000
in_isr                            00000008
kpop                              00000000
kpush                             00000000
kspox5                            00000008
modu                              00000000
mul                               00000000
negti                             00000000
oru                               00000000
MPASM  5.35                        TARGET.ASM   1-5-2020  10:17:39         PAGE 41


SYMBOL TABLE
  LABEL                             VALUE 

parm                              00000000
pbase                             00000000
printch                           00000000
printu                            00000000
readeeprom                        00000000
readit                            00000000
safepush                          00000000
setbit                            00000000
softstack0                        00000000
softstack1                        00000001
softstack2                        00000002
sperr11                           0000000F
stack                             00000000
writeeeprom                       00000000

Errors   :     0
Warnings :     0 reported,     2 suppressed
Messages :     0 reported,    28 suppressed

