
#include "hloe.inc"

 __config  _CONFIG1,_WDTE_OFF  & _BOREN_OFF & _FOSC_INTOSC & _PWRTE_OFF & _MCLRE_OFF & _CLKOUTEN_OFF & _IESO_OFF & _FCMEN_OFF
 __config  _CONFIG2,_PLLEN_ON & _STVREN_ON & _LVP_OFF



Resetv code 0 
 bcf INTCON,GIE
 pagesel hloego
 goto hloego
 
#ifdef HLLMULTITASK
vectr code 4	 ;Device specific
ISR:


 PREEMPT
#endif#ifdef HLLMULTITASK
ExitISR:    
 
 RESUME
 
 retfie
#endif

mainvars udata_shr	
#ifdef HLLMULTITASK
pbase res .1			; Used for functions w/ numbered pass/return, to clean up parms/push args
pbaseisr res .1
pmark res .1
pmarkisr res .1
#else
pbase res .1
pmark res .1
#endif
PC_Save res .1

main code
hloego:

  clrf in_isr
 
  movlw LOW (stack-1)		;Set up stack starting position based on literals det. by incremental linker
  movwf FSR0L 
  movlw HIGH (stack-1)
  movwf FSR0H
 
  
 movlw LOW (alt_stack-1)
 movwf FSR1L
 movlw HIGH (alt_stack-1)
 movwf FSR1H
 
 
 clrf softstack0 
 
 
 pagesel hlluserprog
 goto hlluserprog

hllupuser CODE
hlluserprog: 
 

 movlw .112 

   FAR_CALL hlluserprog , safepush


 movlw .247 

   FAR_CALL hlluserprog , safepush

   banksel OSCCON
   movfw OSCCON
   
   

   FAR_CALL hlluserprog , safepush


 FAR_CALL hlluserprog,andu


 FAR_CALL hlluserprog,oru

 POP
 banksel OSCCON
 movwf OSCCON
 


 movlw CREN


   FAR_CALL hlluserprog , safepush

   banksel RCSTA
   movfw RCSTA
   
   

   FAR_CALL hlluserprog , safepush


 FAR_CALL hlluserprog,setbit

 POP
 banksel RCSTA
 movwf RCSTA
 


 movlw BRGH


   FAR_CALL hlluserprog , safepush

   banksel TXSTA
   movfw TXSTA
   
   

   FAR_CALL hlluserprog , safepush


 FAR_CALL hlluserprog,setbit

 POP
 banksel TXSTA
 movwf TXSTA
 


 movlw BRG16


   FAR_CALL hlluserprog , safepush

   banksel BAUDCON
   movfw BAUDCON
   
   

   FAR_CALL hlluserprog , safepush


 FAR_CALL hlluserprog,setbit

 POP
 banksel BAUDCON
 movwf BAUDCON
 


 movlw .68 

   FAR_CALL hlluserprog , safepush

 POP
 banksel SPBRG
 movwf SPBRG
 


 movlw .0 

   FAR_CALL hlluserprog , safepush

 POP
 banksel SPBRGH
 movwf SPBRGH
 


 movlw TX9


   FAR_CALL hlluserprog , safepush


 movlw TXEN


   FAR_CALL hlluserprog , safepush


 movlw SYNC


   FAR_CALL hlluserprog , safepush

   banksel TXSTA
   movfw TXSTA
   
   

   FAR_CALL hlluserprog , safepush


 FAR_CALL hlluserprog,clearbit


 FAR_CALL hlluserprog,setbit


 FAR_CALL hlluserprog,clearbit

 POP
 banksel TXSTA
 movwf TXSTA
 


 movlw SCKP


   FAR_CALL hlluserprog , safepush

   banksel BAUDCON
   movfw BAUDCON
   
   

   FAR_CALL hlluserprog , safepush


 FAR_CALL hlluserprog,setbit

 POP
 banksel BAUDCON
 movwf BAUDCON
 


 movlw SPEN


   FAR_CALL hlluserprog , safepush

   banksel RCSTA
   movfw RCSTA
   
   

   FAR_CALL hlluserprog , safepush


 FAR_CALL hlluserprog,setbit

 POP
 banksel RCSTA
 movwf RCSTA
 


 movlw .5 

   FAR_CALL hlluserprog , safepush

   banksel TRISB
   movfw TRISB
   
   

   FAR_CALL hlluserprog , safepush


 FAR_CALL hlluserprog,clearbit

 POP
 banksel TRISB
 movwf TRISB
 


 movlw .5 

   FAR_CALL hlluserprog , safepush

   banksel ANSELB
   movfw ANSELB
   
   

   FAR_CALL hlluserprog , safepush


 FAR_CALL hlluserprog,clearbit

 POP
 banksel ANSELB
 movwf ANSELB
 


 movlw .1 

   FAR_CALL hlluserprog , safepush

   banksel ANSELB
   movfw ANSELB
   
   

   FAR_CALL hlluserprog , safepush


 FAR_CALL hlluserprog,clearbit

 POP
 banksel ANSELB
 movwf ANSELB
 


 movlw TXCKSEL


   FAR_CALL hlluserprog , safepush

   banksel APFCON1
   movfw APFCON1
   
   

   FAR_CALL hlluserprog , safepush


 FAR_CALL hlluserprog,setbit

 POP
 banksel APFCON1
 movwf APFCON1
 


 movlw SCKP


   FAR_CALL hlluserprog , safepush

   banksel BAUDCON
   movfw BAUDCON
   
   

   FAR_CALL hlluserprog , safepush


 FAR_CALL hlluserprog,clearbit

 POP
 banksel BAUDCON
 movwf BAUDCON
 


 FAR_CALL hlluserprog,outer

    
hllprogend:
 goto hllprogend
 

hllt450 CODE
outer:


 FAR_CALL outer,getch


 movlw .0
 



   FAR_CALL outer , safepush


 movlw .128
 


   FAR_CALL outer , safepush


 FAR_CALL outer,dofunc

 ;~IFTR~ 


 FAR_CALL outer,outer

 KDISCARD


 return
 

hllt453 CODE
dofunc:


 movf FSR0L,w
 addlw -.2 

 FAR_CALL dofunc , kpush

 movf FSR0L,w
 

 FAR_CALL dofunc , kpush


 movlw .2

   FAR_CALL dofunc , safepush


 FAR_CALL dofunc,parm

 ; char ' '


 movlw .32


   FAR_CALL dofunc , safepush


 FAR_CALL dofunc,eq

 POP
 xorlw .0
 btfsc STATUS,Z
 goto hlllb51J1 
 

 movlw .1

   FAR_CALL dofunc , safepush


 FAR_CALL dofunc,parm


 movlw .0

   FAR_CALL dofunc , safepush


 FAR_CALL dofunc,parm


 FAR_CALL dofunc,printf


 movlw .13

   FAR_CALL dofunc , safepush


 FAR_CALL dofunc,printch


 movlw .10

   FAR_CALL dofunc , safepush


 FAR_CALL dofunc,printch

 
 goto hlllb51J2
 

hlllb51J1:


 FAR_CALL dofunc,getch


 movlw .1

   FAR_CALL dofunc , safepush


 FAR_CALL dofunc,parm


 movlw .0

   FAR_CALL dofunc , safepush


 FAR_CALL dofunc,parm


 movlw .32
 



   FAR_CALL dofunc , safepush


 movlw .3
 


   FAR_CALL dofunc , safepush


 FAR_CALL dofunc,mulf


 movlw .2

   FAR_CALL dofunc , safepush


 FAR_CALL dofunc,parm


 movlw -.1

   FAR_CALL dofunc , safepush

 ; char '0'


 movlw .48


   FAR_CALL dofunc , safepush


 FAR_CALL dofunc,mul


 FAR_CALL dofunc,add


 FAR_CALL dofunc,utof


 FAR_CALL dofunc,addf


 FAR_CALL dofunc,dofunc


hlllb51J2:


 FAR_CALL dofunc,kpop
; LOAD POINTER

 movwf FSR0L
 

 DISCARD


 DISCARD

 KDISCARD


 return
 